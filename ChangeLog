2007-05-31  lorenzen

	* [r2948] build/octopus.spec.in:
	  Stupid me! Did not check the latest octopus.spec.in against our cluster
	  autoconf. Now, the documentation files do not go to <share>/doc/octopus
	  but to <share>/octopus/doc with the RPMs. Not too RPM like but also
	  ok.

2007-05-22  acastro

	* [r2921] src/io.F90:
	  This is the change suggested by Daniele. The reason is that the
	  Portland compiler does not seem to handle properly the characters with
	  MPI. So the string is converted to integers.
	  
	  I checked it with a couple of architectures and it works. But if you
	  get some time, please do some testing (on this and in general) in the
	  following days!
	* [r2920] Makefile.am, doc/Makefile.am:
	  (*) My "autoreconf" was failing in my machine for 2.1.x
	  This probably is not a problem since what matters is that
	  the distribution works. However, it is nice that everything
	  can be built from scratch.
	  
	  The reason was that something called "docdir" was missing.
	  It shoule point to the place where, for example, octopus.pdf
	  is placed.
	  
	  (*) The manual "octopus.pdf" should be distributed. If it is not
	  present, the dependency that builds it is a wget that retrieves
	  it from the web page (I did not know that ;)
	  However, if wget is not installed, or the web page is down,
	  the build fails. I think that this should not happen; the whole
	  build procedure should not depend on those two uncertainties.
	  Of course for those who get the distribution, in principle
	  octopus.pdf is there and it does not matter; but with "make"
	  one never know, sometimes it gets confused with the dates
	  and tries to rebuild everything. So if octopus.pdf cannot
	  be retrieved, the build should continue nevertheless.
	  
	  I have fixed those two issues; however, since we are in a very
	  critical stage please, those of you who can, review my changes!
	  I might have screwed up rather than helping.

2007-05-22  xavier

	* [r2919] src/filters.F90:
	  * Backported the work around for a bug in the Sun Studio compiler.

2007-05-16  rozzi

	* [r2914] libxc/lda_x.c:
	  this comment was confusing the pgi compiler

2007-05-12  lorenzen

	* [r2909] ChangeLog, Makefile.am, NEWS, README, build/octopus.spec.in, build/var2html.pl,
	  configure.ac, doc/Makefile.am, doc/authors.texi, doc/copying.texi, doc/description.texi,
	  doc/examples.texi, doc/external.texi, doc/index.texi, doc/installation.texi,
	  doc/introduction.texi, doc/octopus.texi, doc/parser.texi, doc/pdf, doc/undocumented.texi,
	  doc/update.el:
	  Release preparations:
	  
	  * Removal of the Texinfo manual. Instead, a PDF version of the Wiki manual
	  is included in the distribution.
	  * Updated the README and NEWS files.
	  * Small fix in the RPM generation concerning the documentation files.
	  * Updated the ChangeLog (more to test svn2cl.sh, it will have to be done
	  once more anyway).

2007-05-07  lorenzen

	* [r2887] src/derivatives.F90:
	  Inserted forgotten word in variable description.

2007-05-04  lorenzen

	* [r2881] src/derivatives.F90:
	  Documented the DerivativesOrder variable.

2007-05-04  xavier

	* [r2879] m4/acx_fft.m4:
	  * Made fftw mandatory for 2.1, because the code doesn't compile
	  without it and it is required for a decent perfomance.

2007-03-23  xavier

	* [r2787] debian/changelog, debian/control, debian/rules, debian/rules.other_compilers:
	  * Changed the files to build a Debian package in 2.1.x, now the the
	  octopus deb can be built on a clean debian etch (or ubuntu) system
	  using gfortran.
	  
	  * I had to disable the parallel binary, because the mpich available in
	  Debian is still compiled with g77 and there are some problems
	  compiling octopus with openmpi.
	  
	  * I moved the old debian/rules file to debian/rules.other_compilers .
	* [r2786] README, src/fftw2.F90:
	  More 2.1.x fixes:
	  
	  * Modified the README file to point user to the wiki.
	  * A variable was defined twice when compiling with fftw2.
	* [r2784] src/poisson.F90, src/poisson_cg.F90, src/poisson_multigrid.F90:
	  * Backport of the NP/NP_PART fix to 2.1.x

2007-03-22  lorenzen

	* [r2776] Makefile.am, build/octopus.spec.in:
	  Revision of the RPM packaging infrastructure. The RPM spec file now takes
	  care of building both serial and MPI executables.
	  
	  The rpm target of the main Makefile.am has been polished a bit to respect local build
	  settings, so being root is not necessarily required any more.
	  
	  As soon as the 2.1 release will be done, I can take care of the RPMs for 32 Bit and also
	  64 Bit.

2007-03-12  xavier

	* [r2741] src/fftw2.F90:
	  * Bugfix: The declaration of an argument was missing, as pointed out
	  in ticket 77. This was fixed in trunk.
	  
	  The other bug is already fixed in trunk and in the 2.1.x branch.
	  
	  This fixes #77.

2007-02-25  acastro

	* [r2727] src/eigen.F90, src/eigen_arpack_inc.F90:
	  Backport of the bug corrected in trunk. However, even if arpack does
	  not crash, it does not produce very good numbers in 2.1.x (in trunk,
	  however, it seems to work much better...)

2007-02-07  lorenzen

	* [r2700] doc/octopus.texi, src/atomic.F90, src/broad.F90, src/casida.F90, src/complex.F90,
	  src/crystal.F90, src/fftw2.F90, src/fftw3.F90, src/filters.F90, src/geometry.F90,
	  src/global.h, src/hgh.F90, src/linalg_basic_int.F90, src/linear_response.F90,
	  src/math.F90, src/mesh_init.F90, src/mpi.F90, src/multicomm.F90, src/ode_solver_inc.F90,
	  src/opt_control.F90, src/out_inc.F90, src/pes_mask.F90, src/ps.F90, src/real.F90,
	  src/simul_box.F90, src/states.F90, src/systm.F90, src/td_exp.F90, src/tm.F90,
	  src/unocc.F90, src/xc_vxc.F90:
	  This is a backport of revisions r2647 and r2659 to branches/2.1.x.
	  Those changes renamed the following macros of global.h:
	  
	  DOUBLE -> REAL_DOUBLE
	  SINGLE -> REAL_SINGLE
	  PRECISION -> REAL_PRECISION
	  
	  Again, the rationale was that -- unfortunately -- DOUBLE PRECISION is still
	  a Fortran 90 reserved word and it is a bad idea to shadow any of those by
	  a macro. This caused a compilation error with the mpif.h header file. With
	  this commit I also revert the last change of Xavier in the 2.1.x branch, which
	  circumvented the problem by undefining the macros but became superfluous by
	  this more systematic renaming.

2007-02-06  xavier

	* [r2696] src/mpi.F90:
	  * Compilation fix: DOUBLE and PRECISION have to be undefined when
	  including mpif.h.

2007-01-19  xavier

	* [r2654] share/Makefile.am, src/specie.F90,
	  testsuite/finite_systems_3d/07-spin_orbit_coupling.01-ground_state.inp,
	  testsuite/periodic_systems_1d/03-sodium_chain.01-ground_state.inp:
	  Some fixes before 2.1.0rc2 release:
	  
	  * Fixed address of the pseudopotential generator in doc of the species
	  block.
	  * The file variables.local wasn't being added to the tarball.
	  * Two tests used old variable names for pseudopotential species.

2006-12-13  acastro

	* [r2624] src/states.F90:
	  Backport of trunk bugfix 2623, to 2.1.x.

2006-12-09  acastro

	* [r2618] src/cf.F90, src/epot.F90, src/f.F90, src/f_inc.F90, src/fft.F90, src/filters.F90,
	  src/poisson.F90, src/poisson2D.F90, src/poisson3D.F90, src/run.F90, src/states.F90,
	  src/td.F90, src/td_exp_split.F90, src/td_rti.F90:
	  2.1.x now also compiles if FFTW was not found at configure time.

2006-11-03  xavier

	* [r2542] src/lcao_inc.F90:
	  * Backport of the LCAO fixes.

2006-10-27  acastro

	* [r2521] src/out.F90, src/out_inc.F90, src/td.F90:
	  Backport of some bugs found in branch but also present in 2.1.x

2006-10-06  xavier

	* [r2467] src/atomic.F90:
	  Backport of alberto's bugfixes (changesets 2454 and 2403).

2006-10-06  athimm

	* [r2466] src/Makefile.am:
	  Missing netcdf detection fragement.
	* [r2465] Makefile.am, configure.ac, python:
	  Remove the gui from 2.1.x.
	  
	  There are changes required that should change the variables' interface
	  in octopus. Furthermore 2.1.x is release-ready other than the gui.
	* [r2464] m4/acx_netcdf.m4:
	  Backports the netcdf detection fixes from trunk, fixes #39.

2006-10-02  xavier

	* [r2444] src/casida.F90:
	  This error check can be made simpler.
	* [r2443] src/casida.F90:
	  This is the bug that appeared during the Benasque school. An error
	  condition was not checked.
	* [r2442] m4/acx_arpack.m4:
	  A newline at the end of this file was missing and this caused problems
	  with autoconf.

2006-09-13  acastro

	* [r2401] src/liboct_parser.F90, src/opt_control.F90:
	  [Porting one bug already fixed in trunk]
	  
	  Bug fixed.
	  
	  The Portland compiler did not like very long lines even if they are
	  just comments, and did not like to mix, in an interface block, the
	  function or subroutine interface definitions, with the module
	  procedure statements. I have looked up the standard, and I believe
	  both things are legal, but in any case this way that compiler is happy
	  and it does not harm the others compilers.

2006-08-24  appel

	* [r2397] src/states_kpoints.F90, src/td.F90, src/units.F90:
	  A few more places where check_inp was still missing.

2006-08-24  acastro

	* [r2395] testsuite/finite_systems_3d/11-sic.01-gs.inp,
	  testsuite/finite_systems_3d/11-sic.test:
	  Bug fixed.
	  
	  The problem with the 11-sic.test (never converging) was the use of
	  density mixing, instead of potential mixing. The potential mixing is
	  necessary when using orbital dependent xc functionals.

2006-08-24  athimm

	* [r2394] configure.ac:
	  Default to not use python.
	  
	  It is currently of little value and only adds to the release process
	  (like forcing the release manager to perform gettext/varinfo.xml
	  steps).
	* [r2393] configure.ac, doc/octopus.texi, python/configure.ac,
	  testsuite/finite_systems_1d/01-hydrogen.test,
	  testsuite/finite_systems_1d/02-neon_mpi.test,
	  testsuite/finite_systems_1d/03-asym_doublewell.test,
	  testsuite/finite_systems_1d/04-box_oct_long.test,
	  testsuite/finite_systems_1d/05-adw_oct_features.test,
	  testsuite/finite_systems_2d/01-quadratic_box.test,
	  testsuite/finite_systems_2d/02-fock-darwin.test,
	  testsuite/finite_systems_2d/03-helium_atom.test,
	  testsuite/finite_systems_3d/01-carbon_atom.test,
	  testsuite/finite_systems_3d/02-curvlinear_coordinates.test,
	  testsuite/finite_systems_3d/03-functionals.test,
	  testsuite/finite_systems_3d/04-jellium.test,
	  testsuite/finite_systems_3d/05-multigrid_solver.test,
	  testsuite/finite_systems_3d/06-restart.test,
	  testsuite/finite_systems_3d/07-spin_orbit_coupling.test,
	  testsuite/finite_systems_3d/08-sodium_dimer.test,
	  testsuite/finite_systems_3d/09-spinors.test, testsuite/finite_systems_3d/10-casida.test,
	  testsuite/finite_systems_3d/11-sic.test, testsuite/finite_systems_3d/12-forces.test,
	  testsuite/finite_systems_3d/13-full_potential_hydrogen.test,
	  testsuite/finite_systems_3d/14-h2o_pol_lr.test,
	  testsuite/periodic_systems_1d/01-free_electrons.test,
	  testsuite/periodic_systems_1d/02-cosine_potential.test,
	  testsuite/periodic_systems_1d/03-sodium_chain.test:
	  Make branch point to the next release (candiate).

2006-08-23  appel

	* [r2391] .:
	  Creating branch for 2.1.x development series.
	* [r2390] trunk/configure.ac, trunk/debian/changelog, trunk/doc/octopus.texi,
	  trunk/python/configure.ac, trunk/testsuite/finite_systems_1d/01-hydrogen.test,
	  trunk/testsuite/finite_systems_1d/02-neon_mpi.test,
	  trunk/testsuite/finite_systems_1d/03-asym_doublewell.test,
	  trunk/testsuite/finite_systems_1d/04-box_oct_long.test,
	  trunk/testsuite/finite_systems_1d/05-adw_oct_features.test,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.test,
	  trunk/testsuite/finite_systems_2d/02-fock-darwin.test,
	  trunk/testsuite/finite_systems_2d/03-helium_atom.test,
	  trunk/testsuite/finite_systems_3d/01-carbon_atom.test,
	  trunk/testsuite/finite_systems_3d/02-curvlinear_coordinates.test,
	  trunk/testsuite/finite_systems_3d/03-functionals.test,
	  trunk/testsuite/finite_systems_3d/04-jellium.test,
	  trunk/testsuite/finite_systems_3d/05-multigrid_solver.test,
	  trunk/testsuite/finite_systems_3d/06-restart.test,
	  trunk/testsuite/finite_systems_3d/07-spin_orbit_coupling.test,
	  trunk/testsuite/finite_systems_3d/08-sodium_dimer.test,
	  trunk/testsuite/finite_systems_3d/09-spinors.test,
	  trunk/testsuite/finite_systems_3d/10-casida.test,
	  trunk/testsuite/finite_systems_3d/11-sic.test,
	  trunk/testsuite/finite_systems_3d/12-forces.test,
	  trunk/testsuite/finite_systems_3d/13-full_potential_hydrogen.test,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.test,
	  trunk/testsuite/periodic_systems_1d/01-free_electrons.test,
	  trunk/testsuite/periodic_systems_1d/02-cosine_potential.test,
	  trunk/testsuite/periodic_systems_1d/03-sodium_chain.test:
	  Preparing the first release candidate of octopus 2.1.0. Setting
	  version strings to 2.1.0rc1.
	* [r2389] trunk/src/out.F90:
	  Make the various output options public, so that they can be
	  used in other parts of the code for calls to X(output_function).
	* [r2388] trunk/src/td_exp.F90:
	  This push_sub had the wrong routine name.
	* [r2387] trunk/src/td.F90:
	  When using UserDefinedStates as initial states for a time
	  propagation, octopus was always trying to read ground state
	  files from the tmp directory, even when all initial orbitals
	  were given as formula strings (I didn't think of this case,
	  when I was initially adding the UserDefinedStates feature).
	  Adding therefore a logical variable OnlyUserDefinedInitialStates
	  (with default "no"). If true, then one can use arbitrary
	  initial states for a time propagation (via UserDefinedStates)
	  and octopus is not attempting to read ground state orbitals.
	  
	  This is e.g. useful to propagate coherent states, or gaussian
	  wave packets. Might also be useful for excerices on time
	  propagations in the summer school.
	* [r2386] trunk/src/scalar_mesh.F90:
	  Avoid division by zero, when scalar meshes with "zero"
	  points are created.
	* [r2385] trunk/src/sparskit_inc.F90:
	  A !%Variable header was missing for one of the variables.
	* [r2384] trunk/src/states_kpoints.F90:
	  A check_inp and a pop_sub were missing.

2006-08-22  xavier

	* [r2383] trunk/src/linear_response.F90:
	  Added a new variable, LinearSolverMaxTol, that is the maximum
	  tolerance that will be applied to the Linear Solver.

2006-08-18  xavier

	* [r2382] trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.test:
	  I forgot to change the filename in this test.

2006-08-17  xavier

	* [r2381] trunk/src/nl_operator.F90:
	  * Reverted from allocatables to pointers, because the code was not F90
	  standard.
	* [r2380] trunk/src/linear_response_solvers.F90:
	  * Iterations are counted once, even if the apply the hamiltonian twice
	  per iteration.
	* [r2379] trunk/liboct/signals.c:
	  * Added GPL header.
	* [r2378] trunk/src/em_resp.F90:
	  * Renamed the output file of dynamic polarizability to 'linear/alpha'.
	* [r2377] trunk/src/nl_operator.F90:
	  * In the nl_operator class, the arrays were defined as pointers, i
	  changed the definition to allocatables, this gives the compiler more
	  room for optimization.
	  * I had to change some code that relied on pointers to this arrays.
	  Instead i used a pointer to the operators.
	  
	  It would be nice if someone can review this changes, specially for
	  mpi, i don't know if this code is checked by the testsuite.

2006-08-17  appel

	* [r2376] trunk/testsuite/periodic_systems_1d/01-free_electrons.test,
	  trunk/testsuite/periodic_systems_1d/02-cosine_potential.test,
	  trunk/testsuite/periodic_systems_1d/03-sodium_chain.test:
	  When adding multi-dataset lables to the input files yesterday I
	  forgot to change the directories in the *.test files that are
	  used for the matches. This fixes the failed periodic tests of
	  today.

2006-08-17  acastro

	* [r2375] trunk/src/Makefile.am:
	  Two *_inc.F90 files were missing from the noinst_HEADERS,
	  so that the package constructed by make dist was incomplete.

2006-08-16  acastro

	* [r2374] trunk/doc/description.texi, trunk/doc/octopus.texi, trunk/src/linear_response.F90:
	  The regeneration of the info file, when typing "make dist" was broken,
	  due to some repetition of node names which apparently is not allowed.
	  Maybe we are going to get rid of this file anyways, but anyways
	  I fix this.
	  
	  The "make dist" still does not work, it breaks now in the python
	  directory, complaining about config.rpath missing.

2006-08-16  appel

	* [r2373] trunk/src/simul_box.F90:
	  Add routines which take care of resizing the simulation
	  box for scattering calculations (by multiples of the asymptotic
	  unit cell). The resizing is done such that the spacing
	  of the "central region" matches in the end the spacing
	  that is used for a periodic calculation of the asymptotic
	  region.
	* [r2372] trunk/src/states.F90:
	  Only index 0 is available for spin unpolarized
	  calculations. This will fix the failed periodic
	  tests of today (that will arrive later).

2006-08-15  appel

	* [r2371] trunk/src/states.F90:
	  For spin-polarized calculations also output spin resolved bands and DOS.
	* [r2370] trunk/src/states_kpoints.F90:
	  Add unscaled k-vectors to the output of the Wigner-Seitz cell.
	* [r2369] trunk/testsuite/periodic_systems_1d/01-free_electrons.01-ground_state.inp,
	  trunk/testsuite/periodic_systems_1d/02-cosine_potential.01-ground_state.inp,
	  trunk/testsuite/periodic_systems_1d/03-sodium_chain.01-ground_state.inp:
	  Add labels for multi dataset mode.
	* [r2368] trunk/src/io.F90:
	  Uncomment this for the moment, since Input/OutputDir is not (yet)
	  used and we would create non-necessary directories in multi-
	  dataset mode otherwise.

2006-08-13  appel

	* [r2367] trunk/src/states.F90:
	  Also include unscaled k-vectors in the output of the
	  fermi energy.
	* [r2366] trunk/src/states.F90, trunk/src/states_kpoints.F90:
	  The scaling of kpoints in crystal_init was causing all my
	  confusion about factors of two. Now I made my Wigner-Seitz
	  routine compatible to crystal_init.
	* [r2365] trunk/debian/rules:
	  For speed reasons Intel 9.1 is now also the default
	  compiler for the i386 deb.
	* [r2364] trunk/src/states.F90:
	  When using a large number of states the record length was
	  exceeded during output. Revert again to direct io.
	* [r2363] trunk/src/states_kpoints.F90:
	  Reciprocal cell sizes were still not correct.

2006-08-12  appel

	* [r2362] trunk/src/states_kpoints.F90:
	  o Allow to use FullWignerSeitzCell also for 1D periodic
	  systems.
	  
	  o Correct some factors of two.
	* [r2361] trunk/src/scf.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/unocc.F90:
	  o Add routine to compute the degeneracy matrix for scattering
	  states.
	  
	  o Add option to choose between scaled and unscaled k-vectors
	  for the output of bands.
	  
	  o Fix a couple of cases which were not MPI clean.
	* [r2360] trunk/src/mesh.F90, trunk/src/restart.F90:
	  Add routine to write mesh info to disk (similar to simul_box_dump).
	* [r2359] trunk/src/h.F90:
	  Also write total Kohn-Sham potential.

2006-08-12  acastro

	* [r2358] trunk/src/scf.F90, trunk/testsuite/finite_systems_1d/02-neon_mpi.test:
	  Bug fixed.
	  
	  The call to write_momentum should be done by all nodes,
	  or else it stops when running in parallels.
	  
	  I removed the last digit of the test; I think that it is asking
	  for too much precision, and that last digit is not obtained
	  when running with different compilers or with different number
	  of processors.
	* [r2357] trunk/testsuite/finite_systems_1d/05-adw_oct_features.test:
	  I disconnect the last match of this test, since the code
	  produces different numbers depending on the compiler flags.
	  Obvioiusly something weird is inside the algorithm.

2006-08-12  xavier

	* [r2356] trunk/src/main.F90, trunk/src/run.F90, trunk/src/static_pol.F90:
	  * Renamed the "pol" calculation mode to "pol_fd" and the output file
	  to "linear/polarizability_fd".

2006-08-12  acastro

	* [r2355] trunk/src/hgh.F90:
	  Bug fixed.
	  
	  The atomic wave functions of some atoms (like Ag with semicore) could
	  not be calculated by the Schrodinger solver in the hgh module. This
	  little change, for some reason, seems to solve this issue.
	* [r2354] trunk/share/PP/HGH/Ag_sc.hgh:
	  Bug fixed.
	  The Ag_sc pseudopotential file had an extra line.

2006-08-10  appel

	* [r2353] trunk/src/scf.F90, trunk/src/states.F90, trunk/src/unocc.F90:
	  Adding routine to calculate total and band resolved density of
	  states. When running with periodic boundary conditions octopus
	  now also writes the density of states (including band resolved
	  DOS) and the fermi energy to 'static'.
	* [r2352] trunk/src/h_inc.F90:
	  Adding to X(Hpsi) the possibility to compute (H-E)|psi>.
	  This will be needed for scattering states.
	* [r2351] trunk/src/ode_solver.F90, trunk/src/ode_solver_inc.F90:
	  Forgot to update header.

2006-08-09  acastro

	* [r2350] trunk/testsuite/finite_systems_1d/05-adw_oct_features.test:
	  After some update of the code (I could not find which one), the last
	  number of this test stopped matching the previous value. However, I
	  find it more likely that the number is correct now, rather than
	  before. So I changed the value of the test.
	  
	  Optimal control should still be tagged as an "experimental feature,
	  anyway.
	* [r2349] trunk/testsuite/finite_systems_1d/04-box_oct_long.test:
	  I deactivate one of the tests that is failing, since it will
	  take some time to figure out why, and it is not relevant at
	  this point.

2006-08-09  xavier

	* [r2348] trunk/src/em_resp.F90:
	  * Added a very basic printing of frequency dependent hyperpolarizability.

2006-08-09  appel

	* [r2347] trunk/src/simul_box.F90:
	  Bug fixed.
	  
	  When running parallel in domains octopus was crashing for
	  periodic boundary conditions. This happened because the mesh_index
	  function was assigning an index 0 to several entries of opi%i
	  in nl_operator.F90. Not only the "removed point" was missing
	  in the interior mesh (as it should), but also the mirror point of
	  the "removed point". All of that occured because simul_box_in_box
	  was returning the wrong answer for the "mirror points" in the case
	  of periodic boundary conditions.
	* [r2346] trunk/src/scf.F90:
	  Similar to the time measurements of td steps, octopus now
	  also prints the elapsed (wall) time of a SCF step. The same
	  format as in the td case is used.
	  This turned out to be useful for estimating how much time
	  octopus spends in Hpsi operations during the scf cycle for
	  a chosen grid size.

2006-08-08  acastro

	* [r2345] trunk/src/filters.F90, trunk/src/opt_control.F90:
	  Bugs fixed.
	  
	  Related to the failure of the 04-box_oct_long.test (optimal-control).
	  It gave run-time errors and crashed. However, now the tests keeps
	  failing due to discrepancies in the numbers.
	  
	  I do not know now which numbers are correct, so I leave it as it
	  is for the moment.
	* [r2344] trunk/src/casida.F90:
	  Bug fixed.
	  
	  The Casida test was failing, when the run-time checks are enabled, due
	  to this very stupid bug. The bug was harmless, when the checks were
	  not done.

2006-08-08  appel

	* [r2343] trunk/src/io.F90, trunk/src/states_kpoints.F90:
	  Add possibility to choose the full Wigner-Seitz cell of the
	  reciprocal lattice for the sampling of the k-points. If the
	  variable FullWignerSeitzCell is set to true no symmetry is
	  taken into account for the choice of k-points (i.e. no
	  Monkhorst-Pack scheme will be used). Instead the k-point
	  sampling will range over the full Wigner-Seitz cell. Currently
	  cubes, octahedrons and dodecahedrons are implemented. The
	  shape of the Wigner-Seitz cell has to be selected manually by
	  setting the variable WignerSeitzCellType. A more sophisticated
	  automatic detection could be added later.

2006-08-06  appel

	* [r2342] trunk/src/scf.F90, trunk/src/states.F90, trunk/src/states_inc.F90:
	  Similar to angular momentum, octopus now also computes
	  the expectation values of the momentum operator for the
	  KS states at the end of a ground-state calculation.
	* [r2341] trunk/liboct/oct_f.c, trunk/src/liboct.F90, trunk/src/restart.F90,
	  trunk/src/states.F90:
	  Octopus can now output also wavefunctions with index > 999,
	  or 1024 respectively.
	  The old bit-shift code in liboct/oct_f.c was clearly more
	  compact than this but it was bound to work only for state
	  indices < 32*32 (increasing val in (1 << val) beyond 31
	  would cause a left shift count which is larger than the width
	  of the type).
	* [r2340] trunk/src/states.F90:
	  Bug fixed. The output of files in multi-dataset mode
	  was not always ending up in the right directories.

2006-08-04  xavier

	* [r2339] trunk/src/em_resp.F90:
	  * Bugfix: Some indexes were wrong, so trying to calculate the lr_elf resulted
	  in segmentation fault.
	  * Added push_sub/pop_sub to lr_calc_current.

2006-08-03  appel

	* [r2338] trunk/testsuite/oct-run_testsuite:
	  o Measure total runtime of the testsuite. This could be used
	  to compare how fast octopus is running on a given hardware
	  platform or for a given compiler.
	  
	  o Add option to the script to run testsuite without MPI runs.
	  
	  o Add datestamp to the mail subject of the mail-report.

2006-08-03  xavier

	* [r2337] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90:
	  * Initial version of dynamic hyperpolarizabilities. Now comes testing.
	* [r2336] trunk/testsuite/finite_systems_1d/04-box_oct_long.test:
	  I had disabled this test by mistake.
	* [r2335] trunk/testsuite/finite_systems_1d/04-box_oct_long.test,
	  trunk/testsuite/finite_systems_3d/03-functionals.test,
	  trunk/testsuite/finite_systems_3d/04-jellium.test,
	  trunk/testsuite/finite_systems_3d/11-sic.test:
	  Updated the matches of long tests to take into account the use of the
	  RR projection.

2006-08-02  xavier

	* [r2334] trunk/share/recipes/es/pulpo_a_feira.txt:
	  Nothing important, only a bit of i18n ;-)

2006-08-02  appel

	* [r2333] trunk/testsuite/oct-run_regression_test.pl:
	  No output log was appended to the mail reports of the
	  daily testsuite. Let's see if this helps.
	* [r2332] trunk/debian/rules:
	  The suffix was in the case of the MPI executables not really
	  a suffix, rather a "inbetweenfix". Change octopus-suffix_mpi
	  to octopus_mpi-suffix.
	* [r2331] trunk/src/math.F90, trunk/src/math_inc.F90:
	  o Adding Newton-Raphson method for matrices. Starting from a
	  sufficiently good initial guess, this routine can be used
	  to polish inverse matrices. In the case of Vandermonde matrices
	  e.g. the Parker-Traub algorithm can be used to compute an
	  initial guess.
	  Due to the required matrix-matrix multiplication Newton-Raphson
	  is however O(N^3).
	  
	  o Adding routine to estimate the quality of a inverse matrix.
	* [r2330] trunk/src/math.F90, trunk/src/math_inc.F90:
	  Adding an implementation of the Parker-Traub algorithm for the
	  inversion of Vandermonde matrices.
	  The algorithm inverts a Vandermonde matrix in O(N^2) operations
	  compared to O(N^3) for methods that don't take structure into
	  account.
	  
	  Refs.:
	  F. Parker, Inverses of Vandermonde matrices, Amer. Math.
	  Monthly, 71, 1964, p410-411
	  J. Traub, Associated polynomials and uniform methods for
	  the solution of linear problems
	  SIAM Review, 8, No. 3, 1966, p277-301
	  
	  This will be needed for the method that I developed to compute
	  scattering states.

2006-08-01  appel

	* [r2329] trunk/src/casida.F90:
	  Bug fixed. The linear/excitations directory was not created
	  in multi dataset mode because loct_mkdir was used instead of
	  io_mkdir. However, loct_mkdir is not aware of multi datatsets.
	  The 10-casida.test was failing because of this.

2006-08-01  xavier

	* [r2328] trunk/src/states.F90:
	  Added two new methods: wfs_are_complex and wfs_are_real.
	  
	  Both functions receive an states_t object and return true when
	  wavefunctions are of the type specified in the name and false
	  otherwise.

2006-08-01  appel

	* [r2327] trunk/testsuite/oct-run_testsuite:
	  Forgot ${exec_suffix} inside mail_report().
	  
	  ... we are getting close to revitalizing the nightly builds and regression tests.
	* [r2326] trunk/src/filters.F90:
	  Also the variable "last" was used without beeing intialized first.
	* [r2325] trunk/src/Makefile.am:
	  o Don't use compile flags as linking flags.
	  
	  o Remove duplicated preprocessing code. Don't delete prerequisite instead.

2006-07-31  xavier

	* [r2324] trunk/src/Makefile.am:
	  I forgot to put some of the lines required to create atomic_oct.f90.
	* [r2323] trunk/src/Makefile.am:
	  * The FCDEBUGFLAGS was not used when linking.
	  
	  * The atomic.o file was rebuilt every time, changing the rule from
	  "atomic.o: atomic_oct.f90" to "atomic.o: atomic.F90" solves the
	  problem.
	  
	  * Using FCDEBUGFLAGS is possible to compile octopus using interfile
	  optimizations, for example -ipa with pathf90 or -ipo with ifort. This
	  is because with this flags, the compiler doesn't produce binary
	  objects until the linking step, so the configure script doesn't work
	  properly.
	* [r2322] trunk/src/mix_inc.F90,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.02-hartree.inp,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.03-hartree+xc.inp:
	  * More explicits bounds in vectorial operations.
	  
	  * The quadratic box test has undeterminisc behaviour. Leaving the
	  default mixing instead of Mixing=0.5 "solves" the problem, but I am
	  not 100% sure that this is the right thing to do.
	* [r2321] trunk/src/eigen.F90, trunk/src/eigen_cg_inc.F90, trunk/src/eigen_inc.F90,
	  trunk/testsuite/finite_systems_3d/12-forces.test,
	  trunk/testsuite/periodic_systems_1d/01-free_electrons.test,
	  trunk/testsuite/periodic_systems_1d/02-cosine_potential.test,
	  trunk/testsuite/periodic_systems_1d/03-sodium_chain.test:
	  * Using the Rayleigh-Ritz subspace diagonalization, the unstability of
	  the self consistency iteration disappears, so I am enabling it by
	  default. There is still the problem of non-determinisc behaviour, but
	  now it takes 31 or 32 iterations for benzene and not 32, 33 or 127. I
	  still have to check what happens with other compilers.
	  
	  * The results of some test changed slightly with this. So i updated
	  them.
	  
	  * I put back the NP_PART size in CG eigensolvers, but i couldn't find
	  why it should be like that.
	* [r2320] trunk/src/eigen_cg_inc.F90:
	  A bit of cleaning in the CG Eigensolver:
	  
	  * All arrays were defined with NP_PART size, altough it's not needed.
	  I only kept NP_PART size in arrays were the hamiltonian is applied.
	  * Put explicit limits in vectorial operations.

2006-07-31  appel

	* [r2319] trunk/configure.ac, trunk/debian/rules, trunk/src/Makefile.am:
	  Besides FCFLAGS there is now a variable FCDEBUGFLAGS. I had to
	  separate debug flags from regular flags since some files cannot
	  be compiled with debug flags. The prime example is atomic.F90.
	  If this file is compiled with a full set of debug flags all sorts
	  of runtime errors occur, causing a lot of tests to fail. I guess
	  nobody really bothers to fix the issues in the F77 spaghetti code.
	  Therefore we exclude this file from runtime checking so that we
	  can enable the cheks in the nightly builds *for the rest of the files*.
	  
	  To achive a conditional compilation with different FC flags I
	  had to introduce in src/Makefile.am pattern based rules instead
	  of suffix rules for the compilation

2006-07-31  xavier

	* [r2318] trunk/src/scf.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/states_kpoints.F90:
	  Put some explicit limits in vectorial operations. This is an (failed) attempt
	  to solve bug 37.

2006-07-30  appel

	* [r2317] trunk/src/filters.F90:
	  The variable first was being used without being defined.
	* [r2316] trunk/testsuite/oct-run_regression_test.pl, trunk/testsuite/oct-run_testsuite:
	  else clauses where missing for the case when no exec suffix
	  is given.
	* [r2315] trunk/debian/rules:
	  Seems to be smarter to sort this out by symlinks.
	* [r2314] trunk/debian/rules:
	  Also need to take care of manual installs.
	* [r2313] trunk/debian/rules:
	  o Add also program suffix for executables build with NAG.
	  o Add missing LDFLAGS for MPI flavours.
	* [r2312] trunk/testsuite/oct-run_regression_test.pl, trunk/testsuite/oct-run_testsuite:
	  Add support for program suffixes like -debug. This allows to
	  run the testsuite for different flavours of executables (e.g.
	  with or without bound checking, etc).
	* [r2311] trunk/debian/changelog, trunk/debian/rules:
	  o On amd64 linking to the gdlib causes octopus to segfault always when
	  statically linked executables are used (independent of the compiler).
	  octopus doesn't even get to the point where it reads the input file.
	  Add --disable-gdlib so that -Bstatic/-static can be used again. With
	  commerical compilers the -static options are more important than having
	  gdlib support, I think.
	  
	  Since the nightly builds were not running while I was away, this was not
	  captured. In the end I had to do bisection in the revision numbers 2156-2310
	  to figure out that this problem was introduced with Miguels commit in
	  r2185/r2186.
	  
	  o Adding optimized and debug executables to the package. They are build with
	  the Intel compiler. The executables carry the program suffix -intel-9.1 and
	  -intel-9.1-debug respectively. This is mainly used for nightly builds and
	  regression testing. It increases the size of the packages considerably,
	  so that we will use it only for internal purposes.
	  
	  o Remove outdated metis configure options.

2006-07-29  appel

	* [r2310] trunk/src/scalar_mesh.F90:
	  o adding extra treatment for scalar meshes with only a single
	  point.
	  o removing variable initialization inside the type definition
	  of scalar_mesh_t. this is not conform with the f90 standard.
	* [r2309] trunk/src/sparskit.F90, trunk/src/sparskit_driver.F90, trunk/src/sparskit_inc.F90:
	  o adding calling interface for transpose operators. this is required
	  for solvers like bi-conjugate gradients or some gmres flavours.
	  o adding verbosity flag and a bit more relaxed warning criteria.
	* [r2308] trunk/testsuite/finite_systems_1d/01-hydrogen.01-ground_state.inp,
	  trunk/testsuite/finite_systems_1d/01-hydrogen.test,
	  trunk/testsuite/finite_systems_1d/02-neon_mpi.01-ground_state-kli_par_domains.inp,
	  trunk/testsuite/finite_systems_1d/02-neon_mpi.02-td_calc-kli_par_states.inp,
	  trunk/testsuite/finite_systems_1d/02-neon_mpi.test,
	  trunk/testsuite/finite_systems_1d/03-asym_doublewell.01-ground_state.inp,
	  trunk/testsuite/finite_systems_1d/03-asym_doublewell.02-oct_run.inp,
	  trunk/testsuite/finite_systems_1d/03-asym_doublewell.test,
	  trunk/testsuite/finite_systems_1d/04-box.01-ground_state.inp,
	  trunk/testsuite/finite_systems_1d/04-box.02-oct_long.inp,
	  trunk/testsuite/finite_systems_1d/04-box.03-oct_long.inp,
	  trunk/testsuite/finite_systems_1d/04-box.04-oct_long.inp,
	  trunk/testsuite/finite_systems_1d/04-box.05-oct_local.inp,
	  trunk/testsuite/finite_systems_1d/04-box_oct_long.test,
	  trunk/testsuite/finite_systems_1d/05-adw.01-ground_state.inp,
	  trunk/testsuite/finite_systems_1d/05-adw.02-filter_fixed.inp,
	  trunk/testsuite/finite_systems_1d/05-adw.03-filter_indirect.inp,
	  trunk/testsuite/finite_systems_1d/05-adw_oct_features.test,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.01-ground_state.inp,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.02-hartree.inp,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.03-hartree+xc.inp,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.04-spin_polarized.inp,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.test,
	  trunk/testsuite/finite_systems_2d/02-fock-darwin.01-ground_state.inp,
	  trunk/testsuite/finite_systems_2d/02-fock-darwin.test,
	  trunk/testsuite/finite_systems_2d/03-helium_atom.01-ground_state.inp,
	  trunk/testsuite/finite_systems_2d/03-helium_atom.02-ground_state.inp,
	  trunk/testsuite/finite_systems_2d/03-helium_atom.test,
	  trunk/testsuite/finite_systems_3d/01-carbon_atom.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/01-carbon_atom.test,
	  trunk/testsuite/finite_systems_3d/02-curvlinear_coordinates.01-gygi.inp,
	  trunk/testsuite/finite_systems_3d/02-curvlinear_coordinates.test,
	  trunk/testsuite/finite_systems_3d/03-functionals.01-jellium-lsda.inp,
	  trunk/testsuite/finite_systems_3d/03-functionals.02-jellium-exx_kli.inp,
	  trunk/testsuite/finite_systems_3d/03-functionals.03-jellium-full_exx.inp,
	  trunk/testsuite/finite_systems_3d/03-functionals.test,
	  trunk/testsuite/finite_systems_3d/04-jellium.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/04-jellium.test,
	  trunk/testsuite/finite_systems_3d/05-multigrid_solver.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/05-multigrid_solver.test,
	  trunk/testsuite/finite_systems_3d/06-restart.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/06-restart.02-restart_ground_state.inp,
	  trunk/testsuite/finite_systems_3d/06-restart.03-td_calc.inp,
	  trunk/testsuite/finite_systems_3d/06-restart.04-restart_td_calc.inp,
	  trunk/testsuite/finite_systems_3d/06-restart.test,
	  trunk/testsuite/finite_systems_3d/07-spin_orbit_coupling.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/07-spin_orbit_coupling.test,
	  trunk/testsuite/finite_systems_3d/08-sodium_dimer.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/08-sodium_dimer.test,
	  trunk/testsuite/finite_systems_3d/09-spinors.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/09-spinors.test,
	  trunk/testsuite/finite_systems_3d/10-casida.01-N2.inp,
	  trunk/testsuite/finite_systems_3d/10-casida.test,
	  trunk/testsuite/finite_systems_3d/11-sic.01-gs.inp,
	  trunk/testsuite/finite_systems_3d/11-sic.test,
	  trunk/testsuite/finite_systems_3d/12-forces.01-N2_gs.inp,
	  trunk/testsuite/finite_systems_3d/12-forces.test,
	  trunk/testsuite/finite_systems_3d/13-full_potential_hydrogen.01-gs.inp,
	  trunk/testsuite/finite_systems_3d/13-full_potential_hydrogen.test,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.01_h2o_gs.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.02_h2o_static_pol.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.03_h2o_dyn_pol.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.04_h2o_dyn_pol_cmplx.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.test,
	  trunk/testsuite/periodic_systems_1d/01-free_electrons.01-ground_state.inp,
	  trunk/testsuite/periodic_systems_1d/01-free_electrons.test,
	  trunk/testsuite/periodic_systems_1d/02-cosine_potential.01-ground_state.inp,
	  trunk/testsuite/periodic_systems_1d/02-cosine_potential.test,
	  trunk/testsuite/periodic_systems_1d/03-sodium_chain.01-ground_state.inp,
	  trunk/testsuite/periodic_systems_1d/03-sodium_chain.test:
	  o adding emacs encoding lines also to the testsuite files. (I've chosen shell-script mode
	  to get a reasonable syntax highlighting)
	  o some more missing svn:keywords
	* [r2307] trunk/src/atomic.F90, trunk/src/blas.F90, trunk/src/broad.F90,
	  trunk/src/casida.F90, trunk/src/casida_inc.F90, trunk/src/centergeom.F90,
	  trunk/src/cf.F90, trunk/src/cf_inc.F90, trunk/src/complex.F90,
	  trunk/src/cross_section.F90, trunk/src/crystal.F90, trunk/src/curv_briggs.F90,
	  trunk/src/curv_gygi.F90, trunk/src/curv_modine.F90, trunk/src/curvlinear.F90,
	  trunk/src/datasets.F90, trunk/src/derivatives.F90, trunk/src/derivatives_inc.F90,
	  trunk/src/eigen.F90, trunk/src/eigen_arpack_inc.F90, trunk/src/eigen_cg_inc.F90,
	  trunk/src/eigen_evolution_inc.F90, trunk/src/eigen_inc.F90, trunk/src/eigen_plan_inc.F90,
	  trunk/src/eigen_trlan.F90, trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90,
	  trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/f.F90, trunk/src/f_inc.F90,
	  trunk/src/fft.F90, trunk/src/fftw2.F90, trunk/src/fftw3.F90, trunk/src/filters.F90,
	  trunk/src/geom_opt.F90, trunk/src/geometry.F90, trunk/src/global.F90, trunk/src/global.h,
	  trunk/src/grid.F90, trunk/src/gs.F90, trunk/src/h.F90, trunk/src/h_inc.F90,
	  trunk/src/hgh.F90, trunk/src/hs.F90, trunk/src/integer.F90, trunk/src/io.F90,
	  trunk/src/lasers.F90, trunk/src/lcao.F90, trunk/src/lcao_inc.F90, trunk/src/liboct.F90,
	  trunk/src/liboct_parser.F90, trunk/src/libxc.F90, trunk/src/linalg_adv.F90,
	  trunk/src/linalg_adv_lapack.F90, trunk/src/linalg_basic.F90,
	  trunk/src/linalg_basic_blas.F90, trunk/src/linalg_basic_int.F90,
	  trunk/src/linear_response.F90, trunk/src/linear_response_inc.F90,
	  trunk/src/linear_response_out.F90, trunk/src/linear_response_solvers.F90,
	  trunk/src/logrid.F90, trunk/src/main.F90, trunk/src/math.F90, trunk/src/math_cg_inc.F90,
	  trunk/src/math_inc.F90, trunk/src/mesh.F90, trunk/src/mesh_init.F90,
	  trunk/src/mesh_lib.F90, trunk/src/messages.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90,
	  trunk/src/mix.F90, trunk/src/mix_inc.F90, trunk/src/mpi.F90, trunk/src/mpi_debug.F90,
	  trunk/src/mpi_debug_inc.F90, trunk/src/multicomm.F90, trunk/src/multigrid.F90,
	  trunk/src/nl_operator.F90, trunk/src/ode_solver.F90, trunk/src/ode_solver_inc.F90,
	  trunk/src/opt_control.F90, trunk/src/out.F90, trunk/src/out_inc.F90,
	  trunk/src/par_vec.F90, trunk/src/par_vec_inc.F90, trunk/src/pes.F90,
	  trunk/src/pes_mask.F90, trunk/src/pes_rc.F90, trunk/src/phonon_spectrum.F90,
	  trunk/src/phonons.F90, trunk/src/poisson.F90, trunk/src/poisson1D.F90,
	  trunk/src/poisson2D.F90, trunk/src/poisson3D.F90, trunk/src/poisson_cg.F90,
	  trunk/src/poisson_corrections.F90, trunk/src/poisson_multigrid.F90,
	  trunk/src/preconditioners.F90, trunk/src/preconditioners_inc.F90, trunk/src/profiling.F90,
	  trunk/src/ps.F90, trunk/src/pulpo.F90, trunk/src/real.F90, trunk/src/restart.F90,
	  trunk/src/restart_inc.F90, trunk/src/root_solver.F90, trunk/src/root_solver_inc.F90,
	  trunk/src/rotational_strength.F90, trunk/src/run.F90, trunk/src/scalar_mesh.F90,
	  trunk/src/scf.F90, trunk/src/simul_box.F90, trunk/src/sparskit.F90,
	  trunk/src/sparskit_driver.F90, trunk/src/sparskit_inc.F90, trunk/src/specie.F90,
	  trunk/src/specie_grid.F90, trunk/src/spectrum.F90, trunk/src/spline.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/states_kpoints.F90,
	  trunk/src/static_pol.F90, trunk/src/stencil_cube.F90, trunk/src/stencil_star.F90,
	  trunk/src/stencil_starplus.F90, trunk/src/stencil_variational.F90, trunk/src/string.F90,
	  trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_exp.F90,
	  trunk/src/td_exp_split.F90, trunk/src/td_init.F90, trunk/src/td_rti.F90,
	  trunk/src/td_write.F90, trunk/src/tm.F90, trunk/src/undef.F90, trunk/src/units.F90,
	  trunk/src/unocc.F90, trunk/src/unocc_inc.F90, trunk/src/v_ks.F90, trunk/src/varinfo.F90,
	  trunk/src/wave_matching.F90, trunk/src/xc.F90, trunk/src/xc_KLI_inc.F90,
	  trunk/src/xc_OEP.F90, trunk/src/xc_OEP_SIC_inc.F90, trunk/src/xc_OEP_inc.F90,
	  trunk/src/xc_OEP_x_inc.F90, trunk/src/xc_axc.F90, trunk/src/xc_functl.F90,
	  trunk/src/xc_fxc.F90, trunk/src/xc_kxc.F90, trunk/src/xc_vxc.F90,
	  trunk/src/xyz_adjust.F90, trunk/src/xyz_file.F90, trunk/src/xyzanim.F90:
	  o add emacs encoding line
	  o release preparation: update year entries in
	  the header (200x -> 200x-2006)

2006-07-28  xavier

	* [r2306] trunk/configure.ac, trunk/liboct/oct_f.c, trunk/src/em_resp_inc.F90:
	  * Now when the restart lr density is not found for a certain
	  frequency, then octopus uses the restart lr density of the closest
	  frequency available.

2006-07-28  appel

	* [r2305] trunk/src/nl_operator.F90:
	  Removing the nl_operator_operate_cmplx routine. Complex weights
	  are now treated by nl_operator_operate directly if op%cmplx_op
	  is enabled.
	* [r2304] trunk/src/nl_operator.F90:
	  Bug fixed. This was a copy'n paste mistake. Should be op%cmplx_op
	  instead of op%const_w.
	* [r2303] trunk/src/nl_operator.F90:
	  stencil_center is a new field in nl_operator_t. The variable
	  contains the index value of the central stencil point (i.e. the
	  position which matches the application point of the stencil).
	* [r2302] trunk/testsuite/finite_systems_1d/04-box.01-ground_state.inp,
	  trunk/testsuite/finite_systems_1d/04-box.02-oct_long.inp,
	  trunk/testsuite/finite_systems_1d/04-box.03-oct_long.inp,
	  trunk/testsuite/finite_systems_1d/04-box.04-oct_long.inp,
	  trunk/testsuite/finite_systems_1d/04-box.05-oct_local.inp,
	  trunk/testsuite/finite_systems_1d/04-box_oct_long.test,
	  trunk/testsuite/finite_systems_1d/05-adw.01-ground_state.inp,
	  trunk/testsuite/finite_systems_1d/05-adw.02-filter_fixed.inp,
	  trunk/testsuite/finite_systems_1d/05-adw.03-filter_indirect.inp,
	  trunk/testsuite/finite_systems_1d/05-adw_oct_features.test,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.01_h2o_gs.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.02_h2o_static_pol.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.03_h2o_dyn_pol.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.04_h2o_dyn_pol_cmplx.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.test:
	  o Fixing svn:keywords for the testsuite
	  o Adding a bunch of missing $Id$

2006-07-28  xavier

	* [r2301] trunk/src/em_resp.F90:
	  As pointed by Heiko, nspin was not correctly initialized. In this case
	  is always 1, because information is not separated by spin components.

2006-07-28  appel

	* [r2300] trunk/src/casida.F90, trunk/src/em_resp_inc.F90, trunk/src/filters.F90,
	  trunk/src/states.F90:
	  Remove unused variables.
	  
	  Xavier: can you have a look at this warning of the NAG compiler
	  
	  Warning: em_resp.F90, line 578: Symbol NSPIN referenced but never set
	  detected at DYNAMIC_OUTPUT_INIT@<end-of-statement>
	  
	  Thanks.
	* [r2299] trunk/src/preconditioners.F90, trunk/src/preconditioners_inc.F90:
	  o The NAG compiler was complaining about too long subroutine
	  names (> 31 characters)
	  
	  o Adding GPL header to _inc file
	* [r2298] trunk/src/opt_control.F90:
	  o Remove unused variables.
	  o Use tabstops of 2 instead of 4.
	  o Cleanup formatting a bit to make this code a
	  bit more coherent with the rest.
	* [r2297] trunk/src/casida_inc.F90, trunk/src/eigen_inc.F90, trunk/src/filters.F90,
	  trunk/src/lcao_inc.F90, trunk/src/linear_response_solvers.F90, trunk/src/mix_inc.F90,
	  trunk/src/preconditioners.F90, trunk/src/preconditioners_inc.F90, trunk/src/unocc_inc.F90:
	  svn:keywords "Id" property was missing for these files.
	* [r2296] trunk/debian/rules:
	  o Currently the generation of info files from svn sources is
	  broken. Uncomment dh_installinfo so that deb packages can be
	  build without info files (master source for documentation is
	  the wiki anyways).
	  
	  o Build executables for x86_64 dynamically (used to revitalize
	  the nightly builds and testuite runs).
	* [r2295] trunk/build/svn_release_number.sh:
	  If available use svn info to extract the current revision number.
	  In this way the find run is avoided. Gives a noticeable speedup
	  on slow disks (e.g. Laptops).

2006-07-28  acastro

	* [r2294] trunk/liboct_parser/parser_f.c:
	  Bug fixed.
	  
	  One more on the problem of passing strings from Fortran to C.

2006-07-27  xavier

	* [r2293] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90, trunk/src/restart.F90:
	  Now restart information for linear response is stored for every
	  frequency. Only the delta density is written, this appears to be a
	  good compromise between disk space and calculation time.

2006-07-27  acastro

	* [r2292] trunk/src/opt_control.F90:
	  Bug fixed.
	  
	  One of the optimal control tests was failing because of this.
	* [r2291] trunk/liboct_parser/string_f.c:
	  About thirty something tests were failing with the NAG compiler on the
	  opterons. The reason for most of the bugs is removed with the change
	  that I now commit, which has to do with the Fortran to C interface --
	  especially the string handling --, and with the difference between int
	  and unsigned long int in 64 bit machines (I think).
	  
	  *However*:
	  This change removes the bug, but I am very uncomfortable changing
	  these subtleties in C, so I ask any of the C experts to take a look.
	  
	  *And*:
	  Still five tests fail, due to unrelated reasons.

2006-07-26  xavier

	* [r2290] trunk/src/em_resp.F90:
	  Corrected indentation.
	* [r2289] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.02_h2o_static_pol.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.test:
	  * Now static polarizability is calculated by the dynamic
	  polarizability code. The old code can be used by setting the PolStatic
	  variable.
	  * Updated tests.
	* [r2288] trunk/src/em_resp.F90:
	  Bigfix: An array was deallocated even when not allocated.

2006-07-25  acastro

	* [r2287] trunk/src/states.F90:
	  The construction of excited states was not possible in
	  the one-electron case if the spin-unpolarized mode was being
	  used. This was annoying.

2006-07-24  xavier

	* [r2286] trunk/src/linear_response.F90:
	  Bugfix: pop_sub() wasn't been called when using return to exit.

2006-07-14  xavier

	* [r2285] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90, trunk/src/io.F90:
	  * The sign of the complex part of polarizabilty was uncorrect.
	  * Now a linear/cross_section_tensor file is created, from the information of
	  linear response. The format is the same of the cross_section_tensor file
	  generated by oct-cross-section, altough it is not separated by spin.
	* [r2284] trunk/src/out.F90, trunk/src/systm.F90:
	  Added the option to print the values of the coordinates over the grid, this
	  is not very informative, but can be used to calculate new functions from
	  other functions, for instance dipole density can be calculated as the
	  density times r.

2006-07-11  janwer

	* [r2283] trunk/src/opt_control.F90:
	  removed some debug statements, td local targets should work

2006-07-11  acastro

	* [r2282] trunk/liboct_parser/parser_f.c, trunk/src/lasers.F90:
	  Bugs fixed.
	  
	  1. The loct_parse_expression routines were not working properly,
	  because the conversion from "Fortran string" to "C string" was not
	  done.
	  
	  2. In the laser_field routine, when the laser field was read from
	  file, the index "i" was used to loop over the various laser fields,
	  but in this case there is only one (this should be eventually
	  extended). This caused an out of bounds.

2006-07-11  janwer

	* [r2281] trunk/src/lasers.F90:
	  bug fixed in laser.F90. Now we can read the optimized field directly for a td
	  calculation.(thanks to Alberto)

2006-07-10  janwer

	* [r2280] trunk/src/lasers.F90, trunk/src/opt_control.F90:
	  I have changed the routines that read a laser pulse from a file, so that it is compatible
	  with the output of the optimal control run. (Very likely that it is still buggy...).
	  The user interface for td targets was also modified (still buggy..).
	  Will fix both in the next days.
	  
	  jan

2006-07-10  xavier

	* [r2279] trunk/src/em_resp.F90:
	  Fixed another memory leak.

2006-07-08  xavier

	* [r2278] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90:
	  Fixed a memory leak when \delta elf was calculated several times.

2006-07-07  xavier

	* [r2277] trunk/src/em_resp.F90, trunk/src/linear_response.F90:
	  * Now functions are printed even when calculating polarizabilities for
	  several frequencies. The files go to linear/freq_w (with w the frequency).
	  
	  * Modified the dynamical linear response tolerance code, so its value is
	  never decreased with respect to the previous iteration.

2006-07-07  acastro

	* [r2276] trunk/src/linalg_adv_lapack.F90:
	  Bug fixed.
	  The calculation of the determinant stopped emitting an error if the
	  determinant was null. It should only stop if there is an attempt to
	  calculate the inverse matrix.
	* [r2275] trunk/src/casida.F90, trunk/src/states.F90, trunk/src/states_inc.F90:
	  Changed a bit the interface to the occupied_states subroutine.
	  Now it is used by the casida module.

2006-07-06  acastro

	* [r2274] trunk/src/h_inc.F90, trunk/src/lasers.F90:
	  I got tired of looking up the documentation for the possible envelopes
	  of the laser field, so I added the corresponding !%Option in the
	  documentations for the TDLasers block.

2006-07-05  xavier

	* [r2273] trunk/src/em_resp_inc.F90, trunk/src/linear_response.F90,
	  trunk/src/linear_response_out.F90,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.02_h2o_static_pol.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.03_h2o_dyn_pol.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.04_h2o_dyn_pol_cmplx.inp:
	  * Now the LR SCF uses variable precision to calculate the wavefunctions.
	  * Added the posibility to print the polarizability density.

2006-07-04  xavier

	* [r2272] trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.test:
	  Updated test to match previous commit.
	* [r2271] trunk/src/em_resp_inc.F90:
	  * The imaginary eta term was been applied with the wrong symbol to the
	  equation for negative frequency perturbation.

2006-07-04  janwer

	* [r2270] trunk/src/filters.F90, trunk/src/opt_control.F90:
	  introduced polarization dependent filters and psiT.0xx is produced during optimization,
	  to monitor the improvement during the iterations (thanks, Esa).

2006-07-04  acastro

	* [r2269] trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/td_write.F90:
	  The calculation of the populations of the ground state and/or excited
	  states is now done without stupid repetitions of calculations, that
	  made it very slow. Nevertheless, for large systems it may still be a
	  slow calculation.
	  
	  Also, in order to do these calculations, one has to use now the
	  keyword "populations", not "gs_proj", as before. [This keywork had to be
	  passed to the "TDOutput" input variable]. Since probably nobody except
	  me was using this (I think), I hope that nobody cares. The generated
	  file also changed name, to "populations". These changes describe more
	  accurately what the file contains: populations of the ground state and
	  possibly also of excited states, no only the ground state as before.
	* [r2268] trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/td_write.F90:
	  The calculation of the matrix of dot products between the orbitals of
	  two Slater determinants is now an independent routine. This is to
	  avoid recomputations.
	  
	  Only one interface for the many-particle dot products:
	  X(states_mpdotp), valid for both dot products between single Slater
	  determinants, and between single Slater determinants and linear
	  combinations.

2006-07-03  xavier

	* [r2267] trunk/liboct/signals.c:
	  Bugfix: Replaced FC_FUNC by FC_FUNC_.

2006-07-03  acastro

	* [r2266] trunk/src/lcao_inc.F90:
	  Bug fixed.
	  
	  A couple of problems in the lcao part, that could something
	  to do with ticket #37. But I do not know if it solves it since
	  I did not attempt to reproduce it.
	  
	  The uninitialized variables problem can be usually tracked well
	  by passing the -fpe0 -ftrapuv options when using the Intel
	  compilers.

2006-07-03  xavier

	* [r2265] trunk/src/eigen.F90,
	  trunk/testsuite/finite_systems_3d/07-spin_orbit_coupling.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/09-spinors.01-ground_state.inp:
	  Some tests were calling the "lanczos" eigensolver while there is no
	  eigensolver option called like that. The lanczos option belongs to the
	  TDExponentialMethod variable. Numerically this value matched with 'plan'
	  option, preconditioned lanczos. To avoid confusions the test were corrected
	  and another number was asigned to the 'plan' option.
	  
	  WARNING: Some existing input files can fail after this change, if this is the case
	  just put 'plan' instead of 'lanczos' in the EigenSolver variable.
	* [r2264] trunk/src/Makefile.am, trunk/src/eigen.F90, trunk/src/eigen_plan_inc.F90,
	  trunk/src/preconditioners.F90, trunk/src/preconditioners_inc.F90,
	  trunk/src/xyz_adjust.F90:
	  * I was going to implement the smoothing preconditioner of Saad to use it for
	  linear response, when i discovered that it was already implemented :-D . It
	  is used for the preconditioned Lanczos eigen solver. So I moved it into a
	  new module called preconditioners_m, hopefully it'll have more
	  preconditioners in the future.
	  
	  * I also submit a fix for the docu of MainAxis, that had the wrong format.

2006-07-03  acastro

	* [r2263] trunk/src/states.F90:
	  Bug fixed. Forgot to put one "skip_header" so that an "excitations"
	  file could be properly read.

2006-07-02  xavier

	* [r2262] trunk/configure.ac, trunk/src/run.F90, trunk/src/xyz_adjust.F90:
	  * The configure script was using AC_FUNC_MALLOC and AC_FUNC_REALLOC, this
	  two macros search for a GNU compatible malloc and realloc. If they don't
	  find it they define malloc as rpl_malloc, the problem is that later in the
	  configure the gsl check tries to use malloc and fails. This bug was seen in
	  OSF, using the Compaq C compiler. As we don't need a gnu compatible malloc
	  (the difference is the way it handles zero size allocations) the presence of
	  this functions is now checked by AC_CHECK_FUNCS.
	  
	  * Documented two variables, fromScratch and MainAxis.

2006-07-01  xavier

	* [r2261] trunk/src/linear_response.F90:
	  Put explicit boundaries in a vectorial operation that gfortran didn't like.

2006-06-29  xavier

	* [r2260] trunk/src/multigrid.F90:
	  Moved the variable documention of MultigridLevels to Mesh section.

2006-06-29  acastro

	* [r2259] trunk/liboct/varia.c, trunk/src/casida.F90, trunk/src/io.F90,
	  trunk/src/spectrum.F90, trunk/src/states.F90, trunk/src/xyzanim.F90:
	  * Bug fixed: Some division by zero could be done when printing the
	  progress bar if the process was very fast.
	  
	  * Moved spectrum_skip_header to module io (now it is called
	  io_skip_header), where it belongs.
	  
	  * Changed the way in which the "Casida vectors" are printed. Instead
	  of the casida.vec file, now a directory called "excitations" is
	  created, and every excitation now has its own file, where the weight
	  assigned to each of the particle hole transitions is written. These
	  files are compatible with the format required by the
	  states_init_excited_state routine. In this way one can force the
	  calculation of the projections onto excited state number 1 to 3,
	  for example, by doing:
	  
	  %TDExcitedStatesToProject
	  "linear/excitations/00001"
	  "linear/excitations/00002"
	  "linear/excitations/00003"
	  %
	  
	  One also has to specify gs_proj in the list assigned to TDOutput.
	  This nomenclature is now somehow misleading, so maybe it will have
	  to be changed.
	  
	  Beware that this feature is still not well tested.
	* [r2258] trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/td_write.F90:
	  The approximated projections onto excited states may now be
	  calculated. Still untested for most situations.
	* [r2257] trunk/src/opt_control.F90:
	  The is and ik variables in this line are always
	  1 and 1, for the moment being.
	  
	  This closes #36.
	* [r2256] trunk/src/em_resp.F90, trunk/src/states.F90, trunk/src/td_write.F90:
	  Added some initial code aimed to describe "excited states", by which I
	  mean single-particle modifications of the ground state Slater
	  determinant (KS state, unless one is doing independent particles).
	  
	  That is, one takes the Slater determinant, and changes one of the
	  occupied states by an unoccupied one (only one!). Then, one can take
	  linear combinations of this "singly excited" determinants.
	  
	  The objective is to be able to monitor, during a time-evolution, the
	  populations of excited states by looking at the dot products between
	  the TDKS determinant and these excited states. Ideally, one should use
	  the approximated excited states that are obtained in a Casida
	  calculation. Of course, a zillion approximations and theoretical
	  mistakes need to be ignored to believe in this, but it is the best
	  that we can attempt for, I think.
	  
	  [Note that those populations are not calculated yet, I am only
	  committing the initial structure]

2006-06-28  xavier

	* [r2255] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90, trunk/src/linear_response.F90,
	  trunk/src/linear_response_solvers.F90,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.02_h2o_static_pol.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.03_h2o_dyn_pol.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.04_h2o_dyn_pol_cmplx.inp:
	  * Modified the input variables for linear_response and em_resp.
	  
	  * Documented all variables for linear_response and em_resp.
	  
	  * Improved output for both modules.
	  
	  * Added a new experimental solver, currently it's called hx. It solves a
	  sequence of hermitian equations to find the solution of the non-hermitian
	  equation. It seems to work better than other solvers, specially for resonant
	  frequencies.
	  
	  * Updated polarizability tests to use new variables.

2006-06-28  acastro

	* [r2254] trunk/src/opt_control.F90, trunk/src/states.F90, trunk/src/states_inc.F90:
	  * Improved the way in which the dot product between Slater
	  determinants is being calculated. Now it is more flexible, and it
	  does not give erroneous numbers when states with empty or
	  half-filled orbitals are used.
	  
	  * The use of whatever partial occupation numbers is still not
	  possible. This should be detected and the program terminated. The
	  problem is not trivial, but I will try to address it.
	  
	  * As a result, I eliminated the calc_overlap function in
	  opt_control.F90, which was essentially doing this dot product, but
	  in a wrong way for more than one electron.
	* [r2253] trunk/src/fftw3.F90, trunk/src/filters.F90, trunk/src/opt_control.F90:
	  Bugs fixed.
	  
	  One of them is trivial (in opt_control.F90); however the
	  other one is not that clear (in filters.F90), so please Jan
	  check it whenever you can.
	  
	  btw, last part of test 04-box_oct_long.test is not passed
	  in my box.
	* [r2252] trunk/src/states_inc.F90, trunk/src/td_write.F90:
	  The dot product between Slater determinants now also considers the
	  k-points.

2006-06-26  xavier

	* [r2251] trunk/configure.ac, trunk/liboct/Makefile.am, trunk/liboct/signals.c,
	  trunk/src/restart.F90:
	  Before the restart files could be left in an unconsistent state if octopus
	  was killed while writing restart info. Now octopus ignores SIGTERM and
	  SIGINT signals during calls to restart_write.
	  
	  This is done by the block_signals and unblock_signals functions.
	  
	  
	  
	  Now while writing restart info, octopus ignores signals. This way

2006-06-26  athimm

	* [r2250] trunk/src/filters.F90, trunk/src/opt_control.F90, trunk/src/simul_box.F90:
	  Fix 18 documentation buglets that break var2xml. Addresses #20.

2006-06-26  janwer

	* [r2249] trunk/src/filters.F90, trunk/src/opt_control.F90:
	  fixed the filter procedure and implemented td local targets
	* [r2248] trunk/testsuite/finite_systems_1d/04-box.01-ground_state.inp,
	  trunk/testsuite/finite_systems_1d/04-box.05-oct_local.inp,
	  trunk/testsuite/finite_systems_1d/04-box_oct_long.test,
	  trunk/testsuite/finite_systems_1d/05-adw.01-ground_state.inp,
	  trunk/testsuite/finite_systems_1d/05-adw.02-filter_fixed.inp,
	  trunk/testsuite/finite_systems_1d/05-adw.03-filter_indirect.inp,
	  trunk/testsuite/finite_systems_1d/05-adw_oct_features.test:
	  new tests for different features of OCT code:
	  filter, local, schemes.

2006-06-26  xavier

	* [r2247] trunk/build/mk_varinfo.pl, trunk/src/linear_response.F90:
	  * Added an return code != 1 to the error exits of mk_varinfo.pl, so now the
	  build stops when there is a problem parsing the variable documentation.
	  
	  * Fixed the documentation of LinearSolver variable and removed the mention
	  to preconditioners because they are not correctly implemented.
	* [r2246] trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.01_h2o_gs,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.01_h2o_gs.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.02_h2o_static_pol,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.02_h2o_static_pol.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.03_h2o_dyn_pol,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.03_h2o_dyn_pol.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.04_h2o_dyn_pol_cmplx,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.04_h2o_dyn_pol_cmplx.inp,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.test:
	  The input files of the test didn't have the .inp extension.
	* [r2245] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90, trunk/src/linear_response.F90,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.01_h2o_gs,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.02_h2o_static_pol,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.03_h2o_dyn_pol,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.04_h2o_dyn_pol_cmplx,
	  trunk/testsuite/finite_systems_3d/14-h2o_pol_lr.test:
	  More changes in linear response polarizabilities:
	  * Added a test to check this part of the code.
	  * Removed the code that read unoccupied orbitals, it was not used.
	  * The self consistency is terminated after two iterations below the
	  threshold.
	  * The default solver is chosen according to the type of wavefunctions.
	  * Default iterations for the linear solver increased to 1000.
	  * Improved the documentation of variable PolLinearSolver.
	* [r2244] trunk/testsuite/finite_systems_2d/01-quadratic_box.test,
	  trunk/testsuite/finite_systems_3d/02-curvlinear_coordinates.test,
	  trunk/testsuite/finite_systems_3d/13-full_potential_hydrogen.test:
	  Corrected the title of some tests. For full potential it was uncorrect, the
	  other two the title was not capitalized as for the rest of the tests.

2006-06-25  xavier

	* [r2243] trunk/src/em_resp_inc.F90:
	  A small bugfix.
	* [r2242] trunk/src/em_resp_inc.F90, trunk/src/linear_response.F90,
	  trunk/src/linear_response_inc.F90, trunk/src/linear_response_solvers.F90:
	  * The lr code now uses the complex mixer.
	  * Moved the solve_HXeY function to linear_response_solver
	  * Removed many unused variables.
	* [r2241] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90:
	  More unused variables removed.
	* [r2240] trunk/src/opt_control.F90, trunk/src/simul_box.F90:
	  Fixed a couple of unused variable warnings.
	* [r2239] trunk/src/Makefile.am, trunk/src/em_resp_inc.F90, trunk/src/mix.F90,
	  trunk/src/mix_inc.F90, trunk/src/scf.F90:
	  Now the mixer can also work with complex functions. This is useful for the
	  solution of the Sternheimer equation where the \delta rho can be complex.
	  
	  The mix_init subroutine now receives and optional argument that indicates
	  the type of the function to be mixed, and the mixing subroutine is replaced
	  by dmixing and zmixing.
	* [r2238] trunk/src/global.F90, trunk/src/states.F90:
	  Moved the definition of M_REAL and M_CMPLX to global_m so they can be
	  used without depending on states_m.

2006-06-23  xavier

	* [r2237] trunk/src/em_resp_inc.F90:
	  I forgot to change one function call so the code was not compiling.
	* [r2236] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90, trunk/src/linear_response.F90,
	  trunk/src/linear_response_inc.F90, trunk/src/linear_response_solvers.F90,
	  trunk/src/xc_OEP_inc.F90:
	  Several small changes:
	  * The routine lr_solve_HXeY now receives the states as arguments.
	  * Some deallocate were missing
	  * Added preconditioning support for the lr linear solver, but only very
	  very simple preconditioners are implemented.
	  * Added push_sub/pop_sub to some routines.

2006-06-23  acastro

	* [r2235] trunk/src/cross_section.F90, trunk/src/spectrum.F90:
	  Bug fixed.
	  
	  The anisotropy is calculated from some number which should be
	  positive, but which may be in some cases a very small negative number
	  due to numerical error. This caused an error.
	  
	  The debugging mode was not read in the cross_section program.

2006-06-23  xavier

	* [r2234] trunk/src/restart.F90:
	  Renamed logical variable used in the initial assert to something more
	  descriptive.

2006-06-22  xavier

	* [r2233] trunk/src/Makefile.am, trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90,
	  trunk/src/linear_response.F90, trunk/src/linear_response_inc.F90,
	  trunk/src/linear_response_solvers.F90:
	  When a small complex term is added to the Sternheimer equation, the operator
	  is not hermitian anymore, this causes problems for the conjugated gradients
	  solver that is designed for hermitian operators.
	  
	  Now the lr_solve_Hxy routine can use another solvers that are suitable for
	  non hermitian operators: Biconjugated Gradients (LR_BCG) and Biconjugated
	  Gradients Stabilized (LR_BICGSTAB). The solver is chosen by the
	  PolLinearSolver variable, the default is still Conjugated Gradients (LR_CG).

2006-06-21  xavier

	* [r2232] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90:
	  Added a new input variable to control the number of scf interations in the
	  pol_lr module.

2006-06-20  acastro

	* [r2231] trunk/src/opt_control.F90:
	  Bug fixed.
	  
	  The optimal control was failing with the NAG compiler in the opteron
	  machines. The reason was some places where intent(out) was used
	  instead of intent(in).
	  
	  I took the opportunity to change read_state so that it assumes a
	  complex wavefunction, even if the ground state is real.
	  
	  I also added some push_sub/pop_sub to help further bug hunts.

2006-06-20  marques

	* [r2230] trunk/liboct/Makefile.am, trunk/liboct/oct_f.c, trunk/liboct/poisson_finite_cyl.c,
	  trunk/src/liboct.F90, trunk/src/poisson.F90, trunk/src/poisson3D.F90:
	  Added a finite cylinder cutoff for the poisson solver using FFTS.
	  It is activated by "PoissonSolver = fft_cyl", just like in the 1D
	  periodic case.
	  
	  The poisson FFT is a bit messy, and requires some cleaning. I will try
	  to do it later on.
	  
	  This work was done by Luis Matos.

2006-06-20  xavier

	* [r2229] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90:
	  * All restart info for pol_lr is now written under tmp/restart_pol_lr/ .
	  * Info is appended to the linear/dynpols when not running from scratch.
	  * When starting from scratch, response wfns are initialized to zero and when
	  calculating for multiple frequencies are initialized with the result from
	  the previous frequency.

2006-06-20  acastro

	* [r2228] trunk/src/restart.F90:
	  The compile was failing with NAG compiler due to the problem
	  with long lines.

2006-06-19  xavier

	* [r2227] trunk/src/Makefile.am, trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90,
	  trunk/src/restart.F90:
	  Now the pol_lr mode has restart capabilities. I used the same restart
	  functions for gs wfns, adding and extra optional parameter, this not very
	  elegant, but avoids redundant code (if we only had inheritance... ;-).
	* [r2226] trunk/src/em_resp_inc.F90:
	  * Lots of code cleaning.
	  * Removed commented code.
	  * Improved output (no more print*).
	* [r2225] trunk/src/linear_response.F90:
	  * Some code cleaning.
	  * A deallocate was missing.

2006-06-18  athimm

	* [r2224] trunk/doc, trunk/doc/.cvsignore, trunk/doc/html, trunk/doc/html/icons,
	  trunk/doc/html/js, trunk/doc/img, trunk/doc/octopus.texi, trunk/doc/pdf:
	  Resurrect octopus.texi with history and fix .cvsignore.
	* [r2223] trunk/build-aux:
	  Forgotten to remove build-aux from svn.
	* [r2222] trunk/doc, trunk/doc/.cvsignore, trunk/doc/html, trunk/doc/html/icons,
	  trunk/doc/html/js, trunk/doc/img, trunk/doc/octopus.info, trunk/doc/octopus.texi,
	  trunk/doc/pdf:
	  Exclude generated files from svn.
	* [r2221] trunk, trunk/.cvsignore, trunk/build, trunk/build-aux, trunk/debian, trunk/doc,
	  trunk/doc/html, trunk/doc/html/icons, trunk/doc/html/js, trunk/doc/img, trunk/doc/pdf,
	  trunk/external_libs, trunk/external_libs/expokit, trunk/external_libs/metis-4.0,
	  trunk/external_libs/qshep, trunk/liboct, trunk/liboct_parser, trunk/libxc, trunk/m4,
	  trunk/python, trunk/python/octopus, trunk/python/octopus/ui,
	  trunk/python/octopus/variables, trunk/python/po, trunk/share, trunk/share/PP,
	  trunk/share/PP/HGH, trunk/share/PP/TM2, trunk/share/recipes, trunk/share/recipes/en,
	  trunk/share/recipes/es, trunk/share/recipes/it, trunk/share/samples, trunk/share/util,
	  trunk/src, trunk/testsuite, trunk/testsuite/finite_systems_1d,
	  trunk/testsuite/finite_systems_2d, trunk/testsuite/finite_systems_3d,
	  trunk/testsuite/periodic_systems_1d, trunk/testsuite/rc_bugs:
	  Exclude build-aux from entering svn.

2006-06-18  acastro

	* [r2220] trunk/src/cf.F90, trunk/src/poisson3D.F90:
	  Bug fixed.
	  
	  The fft_corrected PoissonSolver was producing a shifted potential when
	  the box geometry implied a non-cubical FFT box. The error was just a
	  shift, but it implied all energies were shifted. The reason was that
	  the surface average integral that needs to be done assumed a cube.

2006-06-16  micael

	* [r2219] trunk/liboct/oct_f.c, trunk/src/messages.F90, trunk/src/td.F90:
	  The number of clock tics per second can be machine dependend (ex: the Linux and Mac OS X
	  values
	  are different). Nevertheless, there's no need to hardwire it, because that number is
	  provided
	  in the time.h header.

2006-06-16  marques

	* [r2218] trunk/Makefile.am:
	  Removed m4 files from the distribution (when making dist)

2006-06-16  rozzi

	* [r2217] trunk/src/crystal.F90, trunk/src/states_kpoints.F90:
	  portability bugfix

2006-06-15  micael

	* [r2216] trunk/src/td_exp.F90:
	  Changed the fix of the last NP/NP_PART issue to make it more efficient.

2006-06-15  acastro

	* [r2215] trunk/src/td_exp.F90:
	  Bug fixed.
	  
	  All time-dependent calculations in spinors mode were compromised, if
	  the standard, cheby or lanczos exponentials were used. The second
	  component of the spinors was badly treated. It is one of the
	  NP/NP_PART problem, so this bug has been around probably for a
	  while...
	* [r2214] trunk/src/opt_control.F90, trunk/src/states.F90:
	  Some parenthesis too many in some format descriptors were found by
	  Tobias.
	* [r2213] trunk/external_libs/expokit/expokit.f90:
	  Substituted the deprecated complex*16 by the complex(8) syntax.
	  
	  This closes #28.

2006-06-15  janwer

	* [r2212] trunk/testsuite/finite_systems_1d/04-box_oct_long.test:
	  fixed typo
	* [r2211] trunk/src/filters.F90, trunk/src/opt_control.F90:
	  o fixes according to Tobias
	  o preparing time-dependent targets
	* [r2210] trunk/testsuite/finite_systems_1d/04-box_oct_long.test:
	  updated tests, now they should work
	  (i forgot to check them in...)
	  jan

2006-06-14  acastro

	* [r2209] trunk/liboct_parser/parser_f.c, trunk/src/liboct_parser.F90,
	  trunk/src/opt_control.F90, trunk/src/simul_box.F90, trunk/src/specie.F90,
	  trunk/src/states.F90:
	  The loct_parse_expression subroutine now needs one more extra
	  argument, the time, which is assigned to the "t" variable in the input
	  file.
	* [r2208] trunk/src/filters.F90, trunk/testsuite/finite_systems_1d/04-box.02-oct_long.inp,
	  trunk/testsuite/finite_systems_1d/04-box.03-oct_long.inp,
	  trunk/testsuite/finite_systems_1d/04-box.04-oct_long.inp:
	  The "freq" and "time" tags to be used for the OCTFilter block were not
	  defined as an "!%Option tag", and thus were not put in the variables
	  file, and thus were not really available to the user. I defined them,
	  but changing the name to time_filter and frequency_filter, since
	  "time" and "freq" could be wanted by the user, or required for other
	  purposes.

2006-06-14  janwer

	* [r2207] trunk/src/filters.F90, trunk/src/opt_control.F90:
	  replaced psi = initial_st by states_copy routine.
	  Overloading seems to fail here (why ? see link).
	  Now the double check works !
	  
	  jan
	  
	  every pointer is a new surprise...
	  
	  http://www.cs.rpi.edu/~szymansk/OOF90/bugs.html#6

2006-06-14  acastro

	* [r2206] trunk/src/td_rti.F90:
	  Initialized some variables to zero. Otherwise I was
	  getting some overflows when running the optimal control
	  stuff.

2006-06-14  marques

	* [r2205] trunk/Makefile.am:
	  M4 files changed place, so make dist was failing.

2006-06-13  janwer

	* [r2204] trunk/src/opt_control.F90:
	  added a double check feature which immediately indicated a bug which needs to be found
	* [r2203] trunk/testsuite/finite_systems_1d/03-asym_doublewell.test:
	  changes in opt_control.F90 required update of the test

2006-06-13  acastro

	* [r2202] trunk/src/opt_control.F90:
	  Bug fixed.
	  
	  I got some segmentation fault due to td_tg not being initialised.
	* [r2201] trunk/src/cf_inc.F90, trunk/src/fftw2.F90, trunk/src/fftw3.F90,
	  trunk/src/filters.F90, trunk/src/pes_mask.F90, trunk/src/td_exp.F90:
	  The ffts are now not any more defined in terms of a simulation box,
	  but in terms of a set of three integers. [If the two last ones are
	  one, we have a 1D transform, if the last one is one, we have a 2D
	  transform]. The 1D transforms that had been recently added to
	  fftw3.F90 are now gone; one can now use the normal transforms.

2006-06-12  acastro

	* [r2200] trunk/m4/acx_gdlib.m4, trunk/src/fftw3.F90, trunk/src/simul_box.F90:
	  * Now the FFTs are also allowd for 1D cases. Only if you
	  use fftw3, though. I really don't know why we did not allow
	  that before. This permits to use split operator for 1d runs.
	  * Bug fixed in the printing of the simul box for parallelepipeds.
	  * Reduced the requirement of the gdlib: now it only emits a
	  warning if it is not found, instead of stopping the configure.

2006-06-12  janwer

	* [r2199] trunk/src/opt_control.F90:
	  removing previously introduced bugs :-)
	  it looks like 2D is working
	* [r2198] trunk/testsuite/finite_systems_1d/03-asym_doublewell.01-ground_state.inp,
	  trunk/testsuite/finite_systems_1d/03-asym_doublewell.02-oct_run.inp,
	  trunk/testsuite/finite_systems_1d/03-asym_doublewell.test,
	  trunk/testsuite/finite_systems_1d/04-box.01-ground_state.inp,
	  trunk/testsuite/finite_systems_1d/04-box.02-oct_long.inp,
	  trunk/testsuite/finite_systems_1d/04-box.03-oct_long.inp,
	  trunk/testsuite/finite_systems_1d/04-box.04-oct_long.inp,
	  trunk/testsuite/finite_systems_1d/04-box_oct_long.test:
	  new tests and fixes to the old one

2006-06-12  acastro

	* [r2197] trunk/src/casida.F90, trunk/src/out.F90, trunk/src/states.F90:
	  Now one can print the dipole transition elements between Kohn-Sham
	  states. This is done by setting Output = ksdipole. I used the output
	  slot that was fixed, but never used before, to the transition
	  densities.

2006-06-12  xavier

	* [r2196] trunk/src/linear_response_inc.F90:
	  This is part of the cleaning of the linear response code:
	  * Added some comments
	  * Occupations are now considered in X(lr_orth_response)
	  * Removed the experimental gauss-jacobi solver
	  * Added explicit limits to some vectorial operations
	* [r2195] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90:
	  Bugfix: For independent particles the hartree and fxc terms were considered
	  in some parts.

2006-06-12  janwer

	* [r2194] trunk/doc/octopus.info, trunk/doc/octopus.texi, trunk/src/opt_control.F90,
	  trunk/testsuite/finite_systems_1d/03-asym_doublewell.01-ground_state.inp,
	  trunk/testsuite/finite_systems_1d/03-asym_doublewell.02-oct_run.inp,
	  trunk/testsuite/finite_systems_1d/03-asym_doublewell.test:
	  Hi Folks,
	  I have updated the test (faster and hopefully more stable), removed some problems with the
	  NAG (and very likely created new ones).
	  
	  With setting the OCTPolarization Block 3D runs should work...but are UNTESTED as yet.
	  Also, TDDFT remains a dream (or nightmare?).
	  
	  jan

2006-06-12  acastro

	* [r2193] trunk/src/gs.F90, trunk/src/lcao.F90, trunk/src/unocc.F90:
	  Bug fixed.
	  
	  The LCAO mode required in the input file was ignored in the unocc
	  calculations. This led to convergence problems for some systems.
	* [r2192] trunk/src/opt_control.F90:
	  Bug fixed.
	  
	  The opt_control test is now passed at least in my
	  machine. Some of the fixes that I did are unclear, however,
	  so I will check with Jan. Let us see if we can stabilise
	  things a little bit, at least.
	* [r2191] trunk/src/states.F90:
	  Bug fixed.
	  A small inconsistency in states_copy.

2006-06-11  micael

	* [r2190] trunk/src/cf.F90, trunk/src/curv_briggs.F90, trunk/src/curv_gygi.F90,
	  trunk/src/curv_modine.F90, trunk/src/curvlinear.F90, trunk/src/epot.F90, trunk/src/f.F90,
	  trunk/src/fftw3.F90, trunk/src/linalg_basic.F90, trunk/src/logrid.F90, trunk/src/pes.F90,
	  trunk/src/poisson.F90, trunk/src/poisson_cg.F90, trunk/src/run.F90, trunk/src/td_exp.F90,
	  trunk/src/td_exp_split.F90, trunk/src/td_rti.F90:
	  Added some "private" statements with a distant hope to fix a compilation problem.

2006-06-09  xavier

	* [r2189] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90, trunk/src/linear_response.F90,
	  trunk/src/linear_response_out.F90:
	  Linear response elf is working, including the frequency dependent version.
	* [r2188] trunk/src/states.F90:
	  The states_output routine verifies that wavefunctions are real before trying
	  to output the current.

2006-06-08  xavier

	* [r2187] trunk/src/em_resp.F90:
	  Now the values of beta are printed in scientifi format.

2006-06-08  marques

	* [r2186] trunk/m4/acx_gdlib.m4:
	  Forgot this file
	* [r2185] trunk/configure.ac, trunk/liboct/Makefile.am, trunk/liboct/oct_gdlib_f.c,
	  trunk/src/Makefile.am, trunk/src/liboct.F90, trunk/src/simul_box.F90:
	  Have you ever wondered what are the solutions of the Schroedinger equation
	  inside a fractal box...
	  
	  I added a fairly esoteric option to octopus. Now one can define a simulation
	  box (in 2D) using an image map. The points painted in white are considered to
	  be inside the simulation box, while the rest of the points are outside. This
	  is quite experimental, so do not expect miracles.
	  
	  For reading the images, I decided to use the GD library. This means that one
	  can use .gif, .jpg, and .png as input formats. There is very basic support
	  for this library in liboct/oct_gdlib_f.c.
	  
	  Of course that you can disable the whole thing configuring octopus with the
	  flag --disable-gdlib

2006-06-07  xavier

	* [r2184] trunk/src/opt_control.F90:
	  A line was too long for gfortran compiler.

2006-06-06  xavier

	* [r2183] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90:
	  Now the hyperpolarizabiliy density can be written, this is quantity that
	  integrates to the hyperpolarizability. The associated variable is pol_density.
	* [r2182] trunk/src/em_resp_inc.F90, trunk/src/linear_response.F90,
	  trunk/src/linear_response_inc.F90:
	  Bugfix: Polarizabilities were wrong for system with unoccupied states (very
	  small non-zero occupations), now a threshold of 10^-4 for occupations is
	  used to descriminate between occupied/unoccupies states.

2006-06-04  marques

	* [r2181] trunk/src/em_resp_inc.F90, trunk/src/linear_response_out.F90,
	  trunk/src/states.F90, trunk/src/static_pol.F90:
	  I belive that the linear ELF is working. However, results for small densities (but large
	  elfs) are questionable. Take this with care.
	  
	  I also cleaned up a little bit the ELF routine. In particular, now both D and ) are
	  multiplied by rho, which avoids a division by rho.

2006-06-03  acastro

	* [r2180] trunk/share/util/mf.cfg, trunk/share/util/mf.net:
	  The mf.net utility now has a "script mode", useful for scripts to
	  produce movies.
	  
	  The procedure would be to first use mf.net in the normal mode, until
	  the "camera setup" is nice enough. The program now saves a file
	  "camera.dx" file with the camera setup. Then one reverts to script
	  mode, specifying this camera file. One can then save the mf.net file
	  (with another name, for example myscript.net) and then one can run the
	  program with:
	  
	  dx -script -file myscript.net
	  
	  which would produce not an image in the display, but an output file
	  called mf_output.tiff.
	  
	  With some sufficiently smart bash or perl or whatever script, one can
	  then run succesively the myscript.net modifying the input names at
	  each time, thus producing a series of tiff files that can then be
	  transformed into a movie.
	* [r2179] trunk/share/util/mf.cfg, trunk/share/util/mf.net:
	  Now one has the option of showing or not the colorbar
	  when plotting a slab.

2006-06-01  janwer

	* [r2178] trunk/src/opt_control.F90:
	  nag fix - part 2
	* [r2177] trunk/src/filters.F90, trunk/src/opt_control.F90:
	  filters.F90 did not compile with NAG:
	  blk has to be integer of POINTER_SIZE
	  
	  j
	  
	  nag:
	  1. To annoy by constant scolding, complaining, or urging.
	  2. To torment persistently, as with anxiety or pain.

2006-06-01  xavier

	* [r2174] trunk/libxc/lca.c:
	  Portability fix, variable declaration was not in the beginning of file.

2006-05-31  acastro

	* [r2173] trunk/share/util/mf.cfg, trunk/share/util/mf.net:
	  The mf.net dx program now prints by default a file called
	  mf_output.tiff with a tiff-format image of whatever has been executed.
	  
	  When running interactively it is not really important, since one can
	  always save an image file from the image window. However, it is
	  necessary if one intends to use mf.net as an automatic script to
	  generate the images.

2006-05-31  janwer

	* [r2172] trunk/doc/octopus.info, trunk/doc/octopus.texi, trunk/python/po/de_DE.po,
	  trunk/src/Makefile.am, trunk/src/fftw3.F90, trunk/src/filters.F90,
	  trunk/src/opt_control.F90,
	  trunk/testsuite/finite_systems_1d/03-asym_doublewell.01-ground_state.inp,
	  trunk/testsuite/finite_systems_1d/03-asym_doublewell.02-oct_run.inp,
	  trunk/testsuite/finite_systems_1d/03-asym_doublewell.test:
	  lots of new features in control module, a 1d fft routine, and testsuite
	  now we have:
	  o 3 control algorithms
	  o filters
	  o time-dependent penalty factors
	  o opt. on predefined fluences
	  o and minor documentation
	  
	  everything still for 1 particle and 1d
	  
	  jan

2006-05-30  xavier

	* [r2171] trunk/src/states.F90:
	  Putting the elf function to zero for small densities is still needed.
	* [r2170] trunk/src/math.F90:
	  Removed a mysterious external variable in besselint function that was not used and not
	  defined anywhere.

2006-05-30  athimm

	* [r2169] trunk/python/configure.ac:
	  Lower version requirement for gettext (experimental).

2006-05-29  athimm

	* [r2168] trunk/python/po/Makevars:
	  Even more i18n bits (still trying to find all non-generated bits).
	* [r2167] trunk/python/po/POTFILES.in, trunk/python/po/de_DE.po:
	  Some more i18n bits.
	* [r2166] trunk/INSTALL, trunk/Makefile.am, trunk/acinclude.m4, trunk/build-aux,
	  trunk/build/acx.m4, trunk/build/acx_arpack.m4, trunk/build/acx_blas.m4,
	  trunk/build/acx_fft.m4, trunk/build/acx_jdqz.m4, trunk/build/acx_lapack.m4,
	  trunk/build/acx_metis.m4, trunk/build/acx_mpi.m4, trunk/build/acx_netcdf.m4,
	  trunk/build/acx_sparskit.m4, trunk/build/acx_trlan.m4, trunk/configure.ac,
	  trunk/doc/octopus.info, trunk/doc/octopus.texi, trunk/m4, trunk/m4/acx.m4,
	  trunk/m4/acx_arpack.m4, trunk/m4/acx_blas.m4, trunk/m4/acx_fft.m4, trunk/m4/acx_jdqz.m4,
	  trunk/m4/acx_lapack.m4, trunk/m4/acx_metis.m4, trunk/m4/acx_mpi.m4,
	  trunk/m4/acx_netcdf.m4, trunk/m4/acx_sparskit.m4, trunk/m4/acx_trlan.m4:
	  o modernize autotools support
	  - move *.m4 from build to m4 (which is the canonical location)
	  - point AC_CONFIG_AUX_DIR to build-aux
	  
	  o Reenable python by default, let's hope nothing explodes
	* [r2165] trunk/python, trunk/python/.cvsignore, trunk/python/Makefile.am,
	  trunk/python/configure.ac, trunk/python/octopus, trunk/python/octopus-gui.in,
	  trunk/python/octopus-gui.in.in, trunk/python/octopus/ui, trunk/python/octopus/ui/main.py,
	  trunk/python/octopus/ui/octopus-gui.glade, trunk/python/octopus/ui/widgets.py,
	  trunk/python/octopus/variables, trunk/python/po, trunk/python/po/LINGUAS,
	  trunk/python/var2xml.py.in, trunk/python/var2xml.py.in.in:
	  o Rip out glade, do it all by hand
	  It was becoming combersome to keep an overview of what setting one
	  had done in glade.
	  o Make applications aware of install locations for variables.xml and
	  oct_main.jpg
	  o Install oct_main.jpg
	  o Add internationalization support
	  - Add some de_DE support for demonstrating its use

2006-05-29  xavier

	* [r2164] trunk/src/linear_response_out.F90:
	  Updated version of the lr_elf, not working though.
	* [r2163] trunk/src/specie.F90:
	  * Removed the ' in variable doc.
	  * Closes #22 .
	* [r2162] trunk/src/td_write.F90:
	  A "(" was missing.

2006-05-28  micael

	* [r2161] trunk/src/states_inc.F90, trunk/src/td_write.F90:
	  This fixes Daniele's problem with the angular momentum. The bug only showed up
	  when using the parallelization in states. It seems some compilers have problems
	  with arrays which have a first element different than 1...

2006-05-26  xavier

	* [r2160] trunk/src/epot.F90, trunk/src/specie.F90, trunk/src/specie_grid.F90,
	  trunk/testsuite/finite_systems_3d/13-full_potential_hydrogen.01-gs.inp,
	  trunk/testsuite/finite_systems_3d/13-full_potential_hydrogen.test:
	  Several fixes to all electron specie (with help of Micael):
	  * s%niwfs was not initialized. Now is initialized to 2*z_val.
	  * LCAO doesn't work with this specie, put some warnings. I will try to fix
	  it later.
	  * Fixed np/np_part issue when calculating the potential.
	  * Corrected a push_sub tag.
	  * Added a regression test.

2006-05-25  athimm

	* [r2159] trunk/python/Makefile.am:
	  Fix typo in distutils parameters. When embedded hyphen becomes an underscore, but we're
	  calling out-of-script.

2006-05-25  appel

	* [r2158] trunk/liboct_parser/grammar.c, trunk/liboct_parser/grammar.y:
	  Changing the grammar to what we agreed, i.e.
	  
	  for functions: f(x), f(x,y)
	  for complex numbers: {a, b}

2006-05-25  acastro

	* [r2157] trunk/src/out_inc.F90, trunk/src/states.F90, trunk/src/td.F90:
	  o The modification of the occupations should be
	  done before the density and KS potentials is
	  calculated, so that the td is started with the
	  proper potential (I think, take a look if you are
	  not too sure about what I am saying).
	  o Pretty printing of the orbital substitution through
	  user defined functions.
	  o Stupid dx has problems reading Fortran formatted data
	  sometimes. I think this format is the safest.
	* [r2156] trunk/src/td.F90:
	  Bug fixed.
	  
	  Some portion of code should be inside an if statement,
	  not outside.

2006-05-25  athimm

	* [r2155] trunk/configure.ac, trunk/python/Makefile.am, trunk/python/setup.py.in:
	  Try to respect configure's paths.
	  
	  Since this may break builds, python is currently disabled by
	  default. Use --enable-python to test the paths.
	  
	  Pinging Heiko: Does this work now in the nightly builds setup (you'll
	  need to test with --enable-python)? DESTDIR usage should also be safe.

2006-05-24  xavier

	* [r2154] trunk/testsuite/oct-run_regression_test.pl:
	  * Replacing the external call to mktemp by a library call to tempdir works
	  fine on Solaris. (thanks Tobias :-)
	  * Closes #15 .

2006-05-24  acastro

	* [r2153] trunk/src/out_inc.F90:
	  I changed slightly the format in which the numbers are
	  written on output. I added a specification for the number
	  of digits that describe the exponential. The reason is that
	  some compilers badly printed very small numbers: instead
	  of putting
	  1.00000E-100,
	  they would put
	  1.00000-100,
	  getting rid of the "E".
	  
	  Sometimes we have these small numbers. This confuses gnuplot,
	  for example, and also dx.
	* [r2152] trunk/src/out.F90:
	  Bug fixed.
	  The list of wavefunction should be plotted also if the
	  wfs_sqmod option is selected.

2006-05-24  athimm

	* [r2151] trunk/python/Makefile.am:
	  distutils don't match with autotools. Disable installation until a proper solution is
	  found.

2006-05-24  xavier

	* [r2150] trunk/testsuite/oct-run_regression_test.pl:
	  * Fixed the output redirection according to the suggestions by Tobias.
	  * Closes #18 .

2006-05-24  athimm

	* [r2149] trunk/Makefile.am, trunk/configure.ac, trunk/liboct/Makefile.am,
	  trunk/libxc/Makefile.am, trunk/python/Makefile.am, trunk/share/Makefile.am,
	  trunk/src/Makefile.am:
	  a) python and xml
	  - Make python conditional, on by default.
	  
	  Use --disable-python to turn off python (see ./configure --help)
	  
	  - Remove variables.xml generation from main code, make it
	  python-private. variables.xml are only used by the GUI. Let it live
	  under share for now, we'll see were we'll put it in the future,
	  perhaps it will be removed altogether.
	  
	  b) Add some vpath fixes

2006-05-24  acastro

	* [r2148] trunk/src/td_exp.F90:
	  Bug fixed.
	  I slipped this one in 2079. The problem is that it
	  did not cause immediate trouble, but rather unexplainable
	  overflows in the middle of the runs...

2006-05-23  xavier

	* [r2147] trunk/testsuite/oct-run_regression_test.pl:
	  More solaris compatibility issues:
	  * Replaced "cp -a" calls by "cp -r", -a is not available.
	  * Replaced the "&>" redirection by "2>1 >" which is sh friendly.
	* [r2146] trunk/configure.ac, trunk/liboct/recipes.c:
	  The oct_printrecipe uses the scandir and alphasort, are some sort BSDism and
	  are not always available. Now it this functions are not found by the
	  configure, this function does nothing.
	  
	  System V users won't be able to enjoy our tasteful recipes ;-)
	* [r2145] trunk/src/states.F90:
	  Using an alternative* way of writing the elf, there are not numerical
	  problems when rho -> 0.
	  
	  * 1/(1+(d/d0)^2) = d0^2/(d0^2+d^2)

2006-05-23  acastro

	* [r2144] trunk/liboct_parser/parser_f.c, trunk/src/liboct_parser.F90:
	  Added a new function in the parser, oct_parse_expression1,
	  accesed in the Fortran code throuth the interface
	  loct_parse_expreession. Hopefully the example put in
	  the comment in liboct_parsers.F90 should be self explanatory.
	  
	  There is a tricky thing about the possibility of using "reserved"
	  symbols in the definition of the function that is parsed. I
	  tested it, and it does not seem to cause any problem.
	  
	  This closes #14.

2006-05-23  appel

	* [r2143] trunk/liboct_parser/grammar.c, trunk/liboct_parser/grammar.y,
	  trunk/liboct_parser/gsl_userdef.c, trunk/liboct_parser/gsl_userdef.h,
	  trunk/liboct_parser/symbols.c, trunk/liboct_parser/symbols.h:
	  Modified the grammar of the parser to allow for functions
	  with two arguments. Since the (x, y) syntax is already used
	  for complex numbers I introduced square brackets instead. The
	  parser is now aware of max[a, b] and min[a, b] in formula
	  strings. If a and b are complex numbers then only the real
	  parts are considered (could be easily changed though). This
	  closes #13.
	  
	  I kept normal brackets () for functions with a single argument.
	  But it would be more consistent to have either
	  
	  exp[-(0,1)*k*x], min[x, y], max[x, y] (Mathematica like syntax for functions)
	  
	  or
	  
	  exp(-[0,1]*k*x), min(x, y), max(x, y) (closer to current syntax for functions)
	  
	  
	  What do you like better? Both variants will break current
	  input files (BTW that would be an ABI change for the input
	  file :).

2006-05-22  micael

	* [r2142] trunk/src/poisson_cg.F90, trunk/src/poisson_corrections.F90:
	  I believe this "uninitialized variable" issue was not solved properly.
	  The code was crashing with the parallelization in domains because sometimes
	  the size of rho in this routine is m%np.

2006-05-22  xavier

	* [r2141] trunk/liboct/varinfo.c:
	  * Added alternative code to use when strndup is not found.
	  * This fixes #12
	  
	  Maybe we can just leave the alternative code, which is 3 lines long and uses
	  malloc and strncpy that are standard. What do you think?

2006-05-22  micael

	* [r2140] trunk/liboct/oct_f.c:
	  Corrected another function name inconsistency between upper and lower case.

2006-05-22  acastro

	* [r2139] trunk/src/grid.F90, trunk/src/out.F90, trunk/src/states.F90, trunk/src/xc_OEP.F90:
	  Some other pop_sub was missing. I also added a couple
	  of more push_sub/pop_sub pairs.

2006-05-21  xavier

	* [r2138] trunk/src/multigrid.F90,
	  trunk/testsuite/finite_systems_3d/05-multigrid_solver.test:
	  * Now gfortran passes the multigrid test. It seems there are some problems
	  with 1 point grids, so I changed the default number of grids.
	  
	  * Also added a match for the number of grid in the multigrid test.
	* [r2137] trunk/src/atomic.F90, trunk/src/poisson.F90, trunk/src/sparskit_inc.F90,
	  trunk/src/specie.F90, trunk/src/xyz_adjust.F90:
	  Fixed several uninitialized variable warnings, for most cases the code was
	  correct, except for xyz_adjust, where the total mass was accumulated over a
	  uninitialized variable.

2006-05-21  acastro

	* [r2136] trunk/src/epot_inc.F90:
	  X(epot_forces) was now unused.

2006-05-21  micael

	* [r2135] trunk/src/Makefile.am:
	  linear_response_out.F90 was missing from the distribution.

2006-05-21  acastro

	* [r2134] trunk/src/lcao_inc.F90:
	  Bug fixed.
	  Just another case of pop_subs missing.

2006-05-21  micael

	* [r2133] trunk/configure.ac:
	  Removed last references to octopus_cmplx from the configure script.

2006-05-21  athimm

	* [r2132] trunk/configure.ac, trunk/python/configure.ac, trunk/share/Makefile.am:
	  Make python scripts executable. This fixes #10.

2006-05-21  acastro

	* [r2131] trunk/src/epot.F90, trunk/src/f_inc.F90:
	  Yet more uninitialized variables trapped by the compiler.

2006-05-21  appel

	* [r2130] trunk/src/fftw2.F90:
	  fftw2 support was broken. Due to missing use statements the
	  code was not compiling in that case.

2006-05-21  acastro

	* [r2129] trunk/src/eigen_plan_inc.F90, trunk/src/h.F90, trunk/src/nl_operator.F90,
	  trunk/src/poisson_corrections.F90:
	  Bugs fixed.
	  One np/np_part, and some more problems related to unitialized
	  variables.
	* [r2128] trunk/src/eigen_cg_inc.F90, trunk/src/mesh.F90, trunk/src/states.F90:
	  Bug fixed.
	  Once again, problems related to uninintialized variables.

2006-05-21  appel

	* [r2127] trunk/src/lcao.F90:
	  All tests that are using LCAO were still failing with the NAG compiler.

2006-05-21  athimm

	* [r2126] trunk/python, trunk/python/.cvsignore, trunk/python/Makefile.am,
	  trunk/python/configure.ac, trunk/python/octopus, trunk/python/octopus/ui,
	  trunk/python/octopus/variables, trunk/python/setup.py.in:
	  Add distutils support, also add some generated files to .cvsignore/svn:ignore.

2006-05-20  xavier

	* [r2125] trunk/src/lcao.F90:
	  Put a nullify for pointers in lcao_init, this avoids problems with gfortran
	  that appears to have a buggy associated() subroutine.
	  With this gfortran now passes all tests, except multigrid.
	* [r2124] trunk/src/fftw3.F90:
	  Added push/pop sub calls to functions that call fftw3. This makes easier to find
	  incompatibilities when calling external libraries.

2006-05-20  micael

	* [r2123] trunk/src/epot.F90, trunk/src/h.F90, trunk/src/states.F90,
	  trunk/testsuite/finite_systems_2d/02-fock-darwin.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/07-spin_orbit_coupling.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/09-spinors.01-ground_state.inp:
	  WaveFunctionsType is gone. This means the code should be able to decide
	  if it has to use complex or real wave-functions.
	  For this to work properly, all the states_t variables in the code should
	  be "nullified" with the states_null routine. Also, note that the optional
	  argument in states_allocate_wfns always take precedence.

2006-05-20  xavier

	* [r2122] trunk/src/casida.F90, trunk/src/phonons.F90, trunk/src/simul_box.F90:
	  Some subroutines calls were made passing the same argument twice with
	  different intent.

2006-05-19  xavier

	* [r2121] trunk/src/ode_solver_inc.F90:
	  An argument defined as out, when it should be inout.

2006-05-19  appel

	* [r2120] trunk/configure.ac:
	  For the moment I put AM_PATH_PYTHON back in since share/Makefile.am
	  still contains @PYTHON@. Perhaps we can organize that differently
	  in the future ...
	* [r2119] trunk/build/var2xml.py.in, trunk/configure.ac:
	  r2118 has build problems since var2xml.py did not move completely.

2006-05-19  xavier

	* [r2118] trunk/src/out.F90, trunk/src/states.F90:
	  A new output quantity can be printed: dipole_density.

2006-05-19  athimm

	* [r2117] trunk, trunk/build, trunk/debian, trunk/doc, trunk/doc/html, trunk/doc/html/icons,
	  trunk/doc/html/js, trunk/doc/img, trunk/doc/octopus.info, trunk/doc/octopus.texi,
	  trunk/doc/pdf, trunk/external_libs, trunk/external_libs/expokit,
	  trunk/external_libs/metis-4.0, trunk/external_libs/qshep, trunk/liboct,
	  trunk/liboct_parser, trunk/libxc, trunk/share, trunk/share/PP, trunk/share/PP/HGH,
	  trunk/share/PP/TM2, trunk/share/recipes, trunk/share/recipes/en, trunk/share/recipes/es,
	  trunk/share/recipes/it, trunk/share/samples, trunk/share/util, trunk/src, trunk/testsuite,
	  trunk/testsuite/finite_systems_1d, trunk/testsuite/finite_systems_2d,
	  trunk/testsuite/finite_systems_3d, trunk/testsuite/periodic_systems_1d,
	  trunk/testsuite/rc_bugs:
	  Update svn:ignore recursively.
	* [r2116] trunk/python/.cvsignore, trunk/python/octopus-gui.in, trunk/src/opt_control.F90:
	  o octopus-gui: Main script for calling the GUI (should had been committed in r2112)
	  o Ignore *.pyc in svn
	  o Fix a type in opt_control.F90 ("String" should be "string")
	* [r2115] trunk/build/var2xml.py, trunk/python/var2xml.py.in, trunk/share/Makefile.am:
	  Move var2xml.py to the python subdir.
	* [r2114] trunk/python/AUTHORS, trunk/python/COPYING, trunk/python/ChangeLog,
	  trunk/python/INSTALL, trunk/python/NEWS, trunk/python/README:
	  Add symlinks to AUTHORS, NEWS etc. to make autotools happy
	* [r2113] trunk/.cvsignore:
	  Add *.bak to global ignore files
	* [r2112] trunk/python/octopus, trunk/python/octopus/__init__.py, trunk/python/octopus/ui,
	  trunk/python/octopus/ui/__init__.py, trunk/python/octopus/ui/main.py,
	  trunk/python/octopus/ui/oct_main.jpg, trunk/python/octopus/ui/octopus-gui.glade,
	  trunk/python/octopus/ui/widgets.py, trunk/python/octopus/variables,
	  trunk/python/octopus/variables/XML.py, trunk/python/octopus/variables/__init__.py,
	  trunk/python/octopus/variables/base.py:
	  Octopus python packages.
	  
	  Any octopus module/package will get under the octopus hierarchy/namespace.
	  
	  Import into your python scripts with
	  
	  import octopus.<xxx>
	  
	  This commit contains
	  
	  o variable management
	  - basic variable treatment in sections, trees etc.
	  - XML input/output
	  o first GUI bits and bolts
	  - top level widgets
	  - TreeView of variables
	  - Check out the splashscreen and the about dialog ;)
	  
	  Note: There are some filechooser bits in progress, don't pay attention.
	* [r2111] trunk/configure.ac, trunk/python, trunk/python/Makefile.am,
	  trunk/python/configure.ac:
	  python subdir
	  
	  This will hold the GUI, but also several non-GUI tools.
	* [r2110] trunk/AUTHORS:
	  Hi, I'm Axel, and I'm living next door to Alice.

2006-05-19  micael

	* [r2109] trunk/src/states.F90:
	  When running periodic systems WaveFunctionsType should not be read from the input file
	  as that information will be overwriten. Otherwise the content of the file out.oct could
	  be misleading.

2006-05-18  appel

	* [r2108] trunk/src/Makefile.am, trunk/src/xc_KLI.F90, trunk/src/xc_KLI_inc.F90,
	  trunk/src/xc_OEP.F90, trunk/src/xc_OEP_SIC.F90, trunk/src/xc_OEP_SIC_inc.F90,
	  trunk/src/xc_OEP_x.F90, trunk/src/xc_OEP_x_inc.F90:
	  Since they contain X() macros the xc_OEP_{x,SIC,KLI}.F90
	  files belong now also to the family of _inc files.
	* [r2107] trunk/testsuite/finite_systems_2d/01-quadratic_box.01-ground_state.inp,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.02-hartree.inp:
	  These tests were originally written by Alberto for real
	  wave functions. Also remove here WaveFunctionsType = complex
	  (was inconsistent anyways since test 01 and 02 were for complex
	  and 03 and 04 for real wave functions)
	  
	  BTW: I noticed that we "lost" some revision history due to
	  some file renames in old cvs times and the migration to svn
	  (in the sense that some things are not visible in trac). If
	  possible I'd recommend to keep the cvsweb for lookup purposes
	  as long as possible.
	* [r2106] trunk/testsuite/periodic_systems_1d/01-free_electrons.01-ground_state.inp,
	  trunk/testsuite/periodic_systems_1d/02-cosine_potential.01-ground_state.inp,
	  trunk/testsuite/periodic_systems_1d/03-sodium_chain.01-ground_state.inp:
	  Because of the previous changeset [2105], the explicit statement
	  of WaveFunctionsType = complex can be removed.
	* [r2105] trunk/src/states.F90:
	  Like in the case of TD calculations the code will now automatically
	  choose complex wave functions for periodic systems. There's no need
	  to specify WaveFunctionsType = complex explicitely in the input file
	  (as this is a direct corollary to PeriodicDimensions > 0).

2006-05-18  xavier

	* [r2104] trunk/src/em_resp.F90:
	  A bit of cleaning in the selection of the wavefunctions type.
	  It's chosen based on the value of delta (the imaginary part of the
	  frequency).

2006-05-18  micael

	* [r2103] trunk/src/states.F90:
	  CDFT requirement of complex wavefunctions cannot be checked inside
	  states_allocate_wfns. This will have to be done somewhere else.
	* [r2102] trunk/doc/octopus.info, trunk/doc/octopus.texi, trunk/src/gs.F90,
	  trunk/src/lcao.F90, trunk/src/opt_control.F90, trunk/src/states.F90, trunk/src/td.F90:
	  WaveFunctionsType is now read inside the states_allocate_wfns routine.
	  Also, states_allocate_wfns now as an optional argument that allows
	  to set the wave-functions type without reading it from the input file.
	  
	  I used this feature several places in the code.

2006-05-18  appel

	* [r2101] trunk/src/opt_control.F90:
	  The new optimal control code did not compile with the NAG
	  compiler. Also introduced oct_algorithm_* variables.
	* [r2100] trunk/src/epot.F90, trunk/src/h.F90:
	  Only h%d%wfs_type is available for epot_init.
	* [r2099] trunk/src/epot.F90:
	  Resolved this FIXME. If a static magnetic field is applied
	  the user should use complex wavefunctions.
	* [r2098] trunk/src/Makefile.am, trunk/src/gs.F90, trunk/src/restart.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/unocc.F90,
	  trunk/src/unocc_inc.F90, trunk/src/v_ks.F90, trunk/src/xc_OEP.F90:
	  *aaaargh*
	  
	  Micael: what is your notion of a revision control system like
	  cvs or svn? There is no point in using such a system if you
	  keep an old copy of the files and simply copy your old version
	  over to the latest checkout of HEAD/trunk. In this way you
	  essentially _undo_ the changes that other people did in the
	  meantime!!!! Ever heard something about resolving version
	  conflicts? I recommend vimdiff as an excellent tool for this
	  purpose ...
	  
	  
	  Fixed the build of the MPI executable.

2006-05-17  appel

	* [r2097] trunk/src/h_so.F90, trunk/src/v_ks_inc.F90:
	  These files are empty and can be removed.
	* [r2096] trunk/src/epot.F90:
	  There was some debug output left over.
	* [r2095] trunk/src/epot.F90:
	  Perl or sed run was cluttering this expression.
	* [r2094] trunk/debian/changelog, trunk/debian/rules:
	  Removing the complex executable also from the Debian package build.
	* [r2093] trunk/testsuite/finite_systems_3d/03-functionals.test,
	  trunk/testsuite/oct-run_regression_test.pl, trunk/testsuite/oct-run_testsuite,
	  trunk/testsuite/rc_bugs/03-Na2_MGGA, trunk/testsuite/rc_bugs/07-Atomic_Gd,
	  trunk/testsuite/rc_bugs/12-spin:
	  Remove octopus_cmplx also from the remaining testfiles and
	  from the testsuite scripts.
	* [r2092] trunk/src/eigen.F90, trunk/src/eigen_arpack.F90, trunk/src/eigen_arpack_inc.F90,
	  trunk/src/eigen_cg.F90, trunk/src/eigen_cg_inc.F90, trunk/src/eigen_evolution.F90,
	  trunk/src/eigen_evolution_inc.F90, trunk/src/eigen_plan.F90, trunk/src/eigen_plan_inc.F90:
	  Due to the removal of the complex executable these eigensolver
	  files are now actually _inc files.
	* [r2091] trunk/src/eigen.F90, trunk/src/eigen_arpack.F90:
	  Code did not compile with --with-arpack.

2006-05-17  xavier

	* [r2090] trunk/src/main.F90:
	  The option gs is also defined in opt_

2006-05-17  micael

	* [r2089] trunk/src/td_exp.F90:
	  Forgot to remove a R_TOTYPE macro.
	  
	  BTW, it is not a good idea to initializa a complex variable with R_TOTYPE(M_ZERO)...
	* [r2088] trunk/INSTALL, trunk/build/var2xml.py, trunk/configure.ac, trunk/doc/octopus.info,
	  trunk/doc/octopus.texi, trunk/src/Makefile.am, trunk/src/casida.F90,
	  trunk/src/casida_inc.F90, trunk/src/crystal.F90, trunk/src/eigen.F90,
	  trunk/src/eigen_cg.F90, trunk/src/eigen_evolution.F90, trunk/src/eigen_inc.F90,
	  trunk/src/eigen_plan.F90, trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90,
	  trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/geom_opt.F90, trunk/src/global.h,
	  trunk/src/gs.F90, trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/h_so.F90,
	  trunk/src/lcao.F90, trunk/src/lcao_inc.F90, trunk/src/linear_response.F90,
	  trunk/src/linear_response_inc.F90, trunk/src/opt_control.F90, trunk/src/phonons.F90,
	  trunk/src/restart.F90, trunk/src/restart_inc.F90, trunk/src/scf.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/static_pol.F90, trunk/src/systm.F90, trunk/src/td.F90,
	  trunk/src/td_calc.F90, trunk/src/td_rti.F90, trunk/src/td_write.F90, trunk/src/unocc.F90,
	  trunk/src/unocc_inc.F90, trunk/src/v_ks.F90, trunk/src/v_ks_inc.F90,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.01-ground_state.inp,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.02-hartree.inp,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.test,
	  trunk/testsuite/finite_systems_2d/02-fock-darwin.01-ground_state.inp,
	  trunk/testsuite/finite_systems_2d/02-fock-darwin.test,
	  trunk/testsuite/finite_systems_3d/07-spin_orbit_coupling.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/07-spin_orbit_coupling.test,
	  trunk/testsuite/finite_systems_3d/09-spinors.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/09-spinors.test,
	  trunk/testsuite/periodic_systems_1d/01-free_electrons.01-ground_state.inp,
	  trunk/testsuite/periodic_systems_1d/01-free_electrons.test,
	  trunk/testsuite/periodic_systems_1d/02-cosine_potential.01-ground_state.inp,
	  trunk/testsuite/periodic_systems_1d/02-cosine_potential.test,
	  trunk/testsuite/periodic_systems_1d/03-sodium_chain.01-ground_state.inp,
	  trunk/testsuite/periodic_systems_1d/03-sodium_chain.test:
	  octopus_cmplx is gone :)
	  
	  This obviously implied a lot of changes:
	  - there is now a new variable called WaveFunctionsType to decide if
	  one wants to use complex or real wavefunctions.
	  - some macros like R_TYPE and X() are now only accessible in the *_inc.F90 files.
	  - I had to move some routines from and to the *_inc.F90 files.
	  
	  The code passes all the serial tests (I update the complex tests), but I guess
	  somethings probably got broken.
	  I did not check the mpi executable. I think there might be some problem with the TS()
	  macro. Can someone check this?
	  Another issue is the places in the code were the wave-functions have to be real/complex.
	  For the cases I knew of, the code will either stop if the value of WaveFunctionsType in
	  the input file is not correct or ignore it (maybe this is not very good, but I did not
	  know how to do it otherwise).
	  
	  During this changes I found several inconsistencies in the use of real/complex
	  variables and related macros. For example, in the em_resp module, R_CONJ() was used
	  with some variables that were always complex... In other places real values were
	  assigned to complex variables, etc.
	  
	  I guess the code will need some testing and cleaning during the next couple of weeks.

2006-05-17  janwer

	* [r2087] trunk/src/lasers.F90, trunk/src/opt_control.F90:
	  write(6,*) 'Hello Octopus-World'
	  
	  opt_control.F90:
	  o I have reworked the module opt_control a little. At least for 1d and 1particle it is
	  working. (Method: zbr98)
	  o more particles and dimensions are coming
	  
	  lasers.F90:
	  o added a constant envelope for the laser field
	  o fixed the numerical envelope in subroutine laser_potential
	  o ! the mapping from t -> time-grid seems to be wrong (and is inconsistent with other
	  parts of the code)
	  
	  cheers, Jan

2006-05-17  appel

	* [r2086] trunk/src/casida.F90, trunk/src/datasets.F90, trunk/src/em_resp.F90,
	  trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/global.F90, trunk/src/gs.F90,
	  trunk/src/h_inc.F90, trunk/src/io.F90, trunk/src/lcao.F90, trunk/src/liboct_parser.F90,
	  trunk/src/linear_response_inc.F90, trunk/src/main.F90, trunk/src/mesh_init.F90,
	  trunk/src/messages.F90, trunk/src/mf_inc.F90, trunk/src/mpi.F90, trunk/src/multicomm.F90,
	  trunk/src/out_inc.F90, trunk/src/par_vec.F90, trunk/src/par_vec_inc.F90,
	  trunk/src/poisson.F90, trunk/src/restart.F90, trunk/src/restart_inc.F90,
	  trunk/src/run.F90, trunk/src/scf.F90, trunk/src/simul_box.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/static_pol.F90, trunk/src/systm.F90, trunk/src/td.F90,
	  trunk/src/td_calc.F90, trunk/src/td_write.F90, trunk/src/unocc.F90, trunk/src/xc_KLI.F90,
	  trunk/src/xc_OEP.F90, trunk/src/xc_OEP_SIC.F90, trunk/src/xc_OEP_inc.F90,
	  trunk/src/xc_OEP_x.F90:
	  This is a MPI cleanup. All MPI calls use now consistently
	  mpi_err as error variable. This allowed to remove several
	  ifdefs. We have now for the syntax:
	  
	  example
	  uppercase : ALLOCATE - macros
	  mixed : MPI_Comm_Split - routines from MPI standard
	  lowercase : mpi_grp_init - our own MPI routines

2006-05-16  appel

	* [r2085] trunk/src/mpi_inc.F90:
	  This file is identical to mpi_debug_inc.F90 and was not used.
	  Didn't trace back how it slipped in ...
	* [r2084] trunk/liboct/oct_f.c, trunk/src/datasets.F90, trunk/src/io.F90,
	  trunk/src/liboct.F90, trunk/src/liboct_parser.F90, trunk/src/messages.F90,
	  trunk/testsuite/oct-run_regression_test.pl:
	  o Added interface for stat syscall. It seems that the Fortran inquire
	  can only cope with files but not with directories.
	  
	  o Octopus checks now for the variables InputDir and OutputDir. They will
	  be used to pipe different runs into each other. Consider the following
	  directory structure of an "octopus-project"
	  
	  project/gs/gs_output
	  td/td_output
	  
	  (cf. http://www.tddft.org/programs/octopus/wiki/index.php?title=Projects_and_Runs)
	  
	  The inp in gs will e.g. contain OutputDir = "gs_output" and the inp
	  in td will contain
	  
	  InputDir = "../gs/gs_output"
	  OutputDir = "td_output"
	  
	  The "../gs/gs_output" represents effectively the pipe. In contrast
	  to a checkpointing directory (like tmp/) the code should treat InputDir
	  as read-only to guarantee reproducibility in a sequence of runs.
	  
	  So far I did not really touch the restart business as this involves a
	  change of notion for the fromScratch variable. We should discuss that in
	  the next meeting.
	  
	  o As suggested by Xavier the oct-status files are now written to a separate
	  status directory. Also out.oct is now living there.
	* [r2083] trunk/src/epot_inc.F90:
	  Fixed out of bounds of x() when calling specie_get_glocal in local_RS.
	* [r2082] trunk/src/poisson2D.F90:
	  This routine had a pop_sub but no push_sub. This was effectively hidden
	  before changeset [2080] introduced a correction in a different place.
	* [r2081] trunk/src/profiling.F90, trunk/src/states_inc.F90:
	  Removing unused variables. Corrected and added a few push/pop sub calls.

2006-05-15  acastro

	* [r2080] trunk/src/poisson.F90:
	  Bug fixed.
	  Just one pop_sub missing.
	* [r2079] trunk/src/geometry.F90, trunk/src/td_exp.F90:
	  Another couple of bugs related to the uninitialized variables:
	  * First of all, some routines with intent(out) wave-function
	  arguments fill only the elements from 1 to NP, leaving uninitialized
	  the NP+1:NP_PART part. If that part is to be preserved, then intent(inout)
	  should be used. Otherwise, the NP+1:NP_PART may cause trouble if it is
	  used, since one cannot be sure that it will be zero, or that it will
	  be preserved.
	  * The kinetic energy, if the atoms don't move, should be null, and
	  not a NaN.
	* [r2078] trunk/src/specie.F90:
	  Bug fixed.
	  Yet another uninitialized variable (pot_re) was being
	  used. The Intel compiler catches them if you make use of the
	  -nan -ieee=none options.

2006-05-15  xavier

	* [r2077] trunk/src/static_pol.F90:
	  Now also the density variation can be written.
	  This density is in agree with the one obtained from DFPT.
	* [r2076] trunk/src/eigen.F90:
	  The Rayleigh-Ritz projection (re-diagonalization of the hamiltonian in the space
	  spanned by the eigenvectors found by the eigensolver) was not used and the
	  subroutine that does it was not working correctly. I have fixed the subroutine
	  and added the possibilty of doing this subspace diagonalization after the
	  eigensolver. By default this is not done and it can be activated setting the
	  EigenSolverSubspaceDiag variable to true.

2006-05-14  athimm

	* [r2075] trunk/build/var2xml.py, trunk/build/var2xml.py.in:
	  Some entities would not be properly handled in the pretty-printing output.
	* [r2074] trunk/configure:
	  Removing top level configure.
	  
	  I had added this in r2041 (2006-05-05) before going into discussion
	  about including or not generated files (by autotools or ourselves)
	  and/or using the maintainer mode.
	  
	  Having configure in the repo, but not Makefile.ins is
	  inconsistent. Following the conservative approach, I'm dumping it
	  again. Should the team decide to follow the school of adding generated
	  files to the repo it can easily be resurrected.
	* [r2073] trunk, trunk/.cvsignore, trunk/build, trunk/debian, trunk/doc, trunk/doc/html,
	  trunk/doc/html/icons, trunk/doc/html/js, trunk/doc/img, trunk/doc/pdf,
	  trunk/external_libs, trunk/external_libs/expokit, trunk/external_libs/metis-4.0,
	  trunk/external_libs/qshep, trunk/liboct, trunk/liboct_parser, trunk/libxc, trunk/share,
	  trunk/share/PP, trunk/share/PP/HGH, trunk/share/PP/TM2, trunk/share/recipes,
	  trunk/share/recipes/en, trunk/share/recipes/es, trunk/share/recipes/it,
	  trunk/share/samples, trunk/share/util, trunk/src, trunk/testsuite,
	  trunk/testsuite/finite_systems_1d, trunk/testsuite/finite_systems_2d,
	  trunk/testsuite/finite_systems_3d, trunk/testsuite/periodic_systems_1d,
	  trunk/testsuite/rc_bugs:
	  Ignore config.h stamp file.
	* [r2072] trunk/configure, trunk/debian/changelog, trunk/doc/octopus.texi,
	  trunk/testsuite/finite_systems_1d/01-hydrogen.test,
	  trunk/testsuite/finite_systems_1d/02-neon_mpi.test,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.test,
	  trunk/testsuite/finite_systems_2d/02-fock-darwin.test,
	  trunk/testsuite/finite_systems_2d/03-helium_atom.test,
	  trunk/testsuite/finite_systems_3d/01-carbon_atom.test,
	  trunk/testsuite/finite_systems_3d/02-curvlinear_coordinates.test,
	  trunk/testsuite/finite_systems_3d/03-functionals.test,
	  trunk/testsuite/finite_systems_3d/04-jellium.test,
	  trunk/testsuite/finite_systems_3d/05-multigrid_solver.test,
	  trunk/testsuite/finite_systems_3d/06-restart.test,
	  trunk/testsuite/finite_systems_3d/07-spin_orbit_coupling.test,
	  trunk/testsuite/finite_systems_3d/08-sodium_dimer.test,
	  trunk/testsuite/finite_systems_3d/09-spinors.test,
	  trunk/testsuite/finite_systems_3d/10-casida.test,
	  trunk/testsuite/finite_systems_3d/11-sic.test,
	  trunk/testsuite/finite_systems_3d/12-forces.test,
	  trunk/testsuite/periodic_systems_1d/01-free_electrons.test,
	  trunk/testsuite/periodic_systems_1d/02-cosine_potential.test,
	  trunk/testsuite/periodic_systems_1d/03-sodium_chain.test:
	  trunk is targeting for 2.1 or maybe even 3.0.

2006-05-13  acastro

	* [r2071] trunk/src/curvlinear.F90, trunk/src/epot_inc.F90, trunk/src/xc_OEP_x.F90:
	  Bugs fixed.
	  Some more problems related to uninitialized variables, that
	  cause trouble or not depending on the compiler, etc.
	* [r2069] trunk/src/h_inc.F90:
	  Bug fixed.
	  One intent(out) which should be intent(inout), or else
	  it causes troubles sometimes.

2006-05-13  athimm

	* [r2068] trunk/build/var2xml.py.in:
	  Also set svn:keywords for $ to work ... >:(
	* [r2067] trunk/build/var2xml.py.in:
	  Typo in : $ tag
	* [r2066] trunk/build/var2xml.py.in:
	  Add documentation/licensing/versioning

2006-05-12  athimm

	* [r2065] trunk/Makefile.am:
	  Use $(MAKE) instead of make for recursive calls.
	* [r2064] trunk/share/Makefile.am:
	  Generate the XML file directly from the sources and only recrete it
	  when the sources change.
	  
	  Previously it would depend on varinfo. But varinfo is already
	  processed and not a pristine copy of the embedded variable
	  definitions. Furthermore varinfo is rebuilt unconditionally while we
	  now only rebuild when some *.F90 file has changed.
	* [r2063] trunk, trunk/.cvsignore, trunk/debian, trunk/doc, trunk/doc/.cvsignore,
	  trunk/doc/html, trunk/doc/html/.cvsignore, trunk/doc/html/icons, trunk/doc/html/js,
	  trunk/doc/img, trunk/doc/pdf, trunk/external_libs, trunk/external_libs/expokit,
	  trunk/external_libs/expokit/.cvsignore, trunk/external_libs/metis-4.0,
	  trunk/external_libs/qshep, trunk/external_libs/qshep/.cvsignore, trunk/liboct,
	  trunk/liboct/.cvsignore, trunk/liboct_parser, trunk/liboct_parser/.cvsignore, trunk/libxc,
	  trunk/libxc/.cvsignore, trunk/share, trunk/share/.cvsignore, trunk/share/PP,
	  trunk/share/PP/HGH, trunk/share/PP/TM2, trunk/share/recipes, trunk/share/recipes/en,
	  trunk/share/recipes/es, trunk/share/recipes/it, trunk/share/samples, trunk/share/util,
	  trunk/src, trunk/src/.cvsignore, trunk/testsuite, trunk/testsuite/finite_systems_1d,
	  trunk/testsuite/finite_systems_2d, trunk/testsuite/finite_systems_3d,
	  trunk/testsuite/periodic_systems_1d, trunk/testsuite/rc_bugs:
	  Sanitize .cvsignore and recursively feed svn:ignore with them.
	  
	  The entries mirror the school of not committing generated files into
	  the repository. Whether this is good or bad needs to be decided, and
	  I'm probably in favour of adding them (as well as maintainer-mode
	  protection), but until this is agreed upon the current curse is
	  `minimal'.
	* [r2062] trunk/build, trunk/build/var2xml.py, trunk/build/var2xml.py.in:
	  Completely rewrote the XML creator.
	  
	  o description of variables and of options are now untangled into XML elements
	  otherwise the XML document may end up being broken
	  o all spurious < > & tags are converted to entities
	  o pretty-printing output
	  
	  The output is now (hopefully) always XML compliant.
	* [r2061] trunk/src/specie.F90:
	  Found a couple of tag mismatches while working on the xml converter.

2006-05-12  xavier

	* [r2060] trunk/liboct/varinfo.c:
	  Corrected a function name that was not consistent between upper and lower
	  case. This was revealed by the Absoft OS X/PPC compiler. It seems that
	  normally we don't use any fortran compiler that produces upper case symbols.
	  
	  This should be backported to 2.0.x.
	* [r2059] trunk/liboct/oct_f.c:
	  Now gettimeofday is called if it's found by the configure script. This should be
	  backported to 2.0.x.

2006-05-11  acastro

	* [r2058] trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/static_pol.F90:
	  The calculation of the ELF was not working with states
	  parallellization. Also, I separated the ELF in real space
	  from the ELF in Fourier domain, which is also not working
	  (but I did not repair this one, probably the most obscure
	  object in the code).
	* [r2057] trunk/build/latest_cvs_commit.sh, trunk/build/svn_release_number.sh,
	  trunk/src/Makefile.am, trunk/src/global.F90, trunk/src/main.F90:
	  The printout of the "latest cvs date" was no longer working
	  due to the cvs => svn transition. Now it prints the svn release
	  number, which univoquely determines a snapshot of the code. It
	  also prints out the last file changed (or at least one of them,
	  and the date of the change).
	  
	  [Any of the shell scripting experts could maybe take a look at
	  svn_release_nubmer.sh, since it is maybe not good. It seems to
	  be working, though].

2006-05-11  xavier

	* [r2056] trunk/src/scf.F90, trunk/src/static_pol.F90:
	  * Now the first order perturbation of the ELF function can be calculated
	  using finite differences with the pol mode. This allows us to compare with
	  results from DFPT.
	  
	  * To avoid overwriting static and tmp/restart_gs when running in pol mode, the scf_run
	  function now receives an optional argument to control if it's a gs
	  calculation or not. Probably the best thing to do will be to take out the
	  output part from scf and to keep the restart info in tmp/restart_scf or
	  something like that.

2006-05-10  athimm

	* [r2055] trunk/build/var2xml.py.in, trunk/configure.ac, trunk/share/Makefile.am:
	  First stab to a conversion of varinfo to xml format.
	  
	  The xml format will be easier to deal with in the GUI (tree
	  generation). But it may also prove valuable for other tasks varinfo
	  is used.
	  
	  If the team decides to go xml as a master format, then we need to
	  
	  o settle on an xml dtd
	  o convert tools to use variables.xml instead of varinfo
	  o if no tool uses varinfo, convert the embedded varinfos directly in
	  xml, so the converter is not needed anymore

2006-05-10  micael

	* [r2054] trunk/src/curvlinear.F90, trunk/src/grid.F90:
	  Octopus now writes some information about the curvilinear coordinates parameters to the
	  "info" file and to standart output.

2006-05-09  appel

	* [r2053] trunk/src/pes_rc.F90:
	  There was a closing tag missing. The variables.texi file was
	  not processed properly because of this.

2006-05-09  acastro

	* [r2052] trunk/src/xyzanim.F90:
	  Bug fixed.
	  
	  Added the recl parameter to the open call because the NAG
	  compiler does not accept reading too long lines. This error
	  showed up only in the oct-xyz-anim utility.

2006-05-08  athimm

	* [r2051] trunk/src, trunk/src/mix.F90, trunk/src/pes.F90, trunk/src/pes_rc.F90,
	  trunk/src/unocc.F90:
	  Fix some variable definition typos.

2006-05-08  acastro

	* [r2050] trunk/src/states_inc.F90:
	  The ELF was printed always, no matter if it was
	  asked or not.

2006-05-08  appel

	* [r2049] trunk/src/io.F90, trunk/src/liboct.F90, trunk/src/main.F90,
	  trunk/src/messages.F90:
	  Octopus is now communicating its current internal state
	  by creating/deleting the following files
	  
	  oct-status-running
	  oct-status-finished
	  oct-status-aborted
	  
	  In multi-dataset mode the current user-defined label is
	  prepended.
	  
	  These files will be useful for the asynchronous file
	  communication with GUI. One could also think of writing
	  a current percentage to oct-status-running, which could
	  be used for a progress bar in the GUI. However, each
	  run mode would need to take care of that separately.
	  Time propagations will be easy because the code could
	  output simply x/y (i.e. finished x out of y time steps).
	  Anything that involves convergence would require some
	  kind of extrapolation of the convergence criteria to
	  emulate a progress bar.

2006-05-07  appel

	* [r2048] trunk/src/linalg_adv.F90, trunk/src/linalg_adv_lapack.F90:
	  Adding a routine to compute the singular value decomposition
	  of a complex nxn matrix and another one to calculate the inverse
	  of the matrix using the SVD.
	* [r2047] trunk/testsuite/Makefile.am:
	  The clean-local target should actually do rm -rf /tmp/octopus.*
	  since we pass already /tmp/octopus.XXXXXX to mktemp.
	* [r2046] trunk/testsuite/finite_systems_3d/09-spinors.test:
	  Adapting the pre-command for the total energy to the
	  new output format of static/info.

2006-05-05  athimm

	* [r2044] trunk/configure.ac:
	  Check for gui subdir at configure time.
	* [r2043] trunk/configure.ac:
	  autoconf requires more quoting.
	* [r2042] trunk/testsuite/Makefile.am:
	  Fix warning about stealing automake's clean target:
	  
	  > testsuite/Makefile.am:46: user target `clean' defined here...
	  > automake: ... overrides Automake target `clean' defined here
	  > testsuite/Makefile.am:46: consider using clean-local instead of clean
	* [r2041] trunk, trunk/.cvsignore, trunk/INSTALL, trunk/configure:
	  Regenerate autotools bits against autoconf-2.59/automake-1.9.6.
	* [r2040] trunk/.cvsignore:
	  Allow configure to be versioned.

2006-05-04  athimm

	* [r2039] trunk/configure.ac:
	  Missed that one in [2037].
	* [r2038] trunk/build/acx_arpack.m4, trunk/build/acx_blas.m4, trunk/build/acx_fft.m4,
	  trunk/build/acx_jdqz.m4, trunk/build/acx_lapack.m4, trunk/build/acx_metis.m4,
	  trunk/build/acx_netcdf.m4, trunk/build/acx_sparskit.m4, trunk/build/acx_trlan.m4,
	  trunk/configure.ac:
	  AC_HELP_STRING is deprecated, replace with AS_HELP_STRING.
	* [r2037] trunk/AUTHORS, trunk/ChangeLog, trunk/doc/authors.texi, trunk/doc/octopus.info,
	  trunk/src/eigen_arpack.F90, trunk/src/eigen_trlan.F90, trunk/src/multicomm.F90,
	  trunk/src/xc_OEP_x.F90:
	  Fix some spelling.

2006-05-01  acastro

	* [r2033] trunk/testsuite/finite_systems_3d/03-functionals.test:
	  Since now the info file contains more lines, these tests failed.
	* [r2032] trunk/src/h.F90:
	  Bug fixed. Used an integer for a logical, which is valid for Intel.

2006-04-30  acastro

	* [r2031] trunk/src/geom_opt.F90, trunk/src/gs.F90, trunk/src/h.F90, trunk/src/h_inc.F90,
	  trunk/src/lcao.F90, trunk/src/phonons.F90, trunk/src/scf.F90, trunk/src/systm.F90,
	  trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_write.F90, trunk/src/unocc.F90:
	  A little more analysis of the energy, when it is written to the
	  static/info file: now the "electronic kinetic energy" (kinetic energy
	  of the KS system) and the "external" or ion-electron energy is also
	  printed out. The calculation is only done after the SCF cycle is completed,
	  since it requires non-negligible computations.
	* [r2030] trunk/src/h.F90, trunk/src/v_ks_inc.F90:
	  Bug fixed.
	  The exact-OEP EXX test was failing because of the way I had rearranged
	  the energies recently. I think it is OK now.

2006-04-28  xavier

	* [r2029] trunk/src/states.F90, trunk/src/states_inc.F90:
	  Converted the elf function in the public function states_calc_elf, and now
	  it only calculates the elf, it doesn't write it to a file.
	* [r2028] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90, trunk/src/linear_response.F90,
	  trunk/src/linear_response_inc.F90:
	  * Before the code stoped when convergency failed for linear response, this
	  was ok for one frequency but for many frequencies is a problem, so now it
	  gives a warning and continues with next frequency.
	  * I started to implement the delta current term.

2006-04-27  acastro

	* [r2027] trunk/testsuite/finite_systems_1d/01-hydrogen.test,
	  trunk/testsuite/finite_systems_1d/02-neon_mpi.test,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.test,
	  trunk/testsuite/finite_systems_2d/03-helium_atom.test,
	  trunk/testsuite/finite_systems_3d/01-carbon_atom.test,
	  trunk/testsuite/finite_systems_3d/02-curvlinear_coordinates.test,
	  trunk/testsuite/finite_systems_3d/03-functionals.test,
	  trunk/testsuite/finite_systems_3d/04-jellium.test,
	  trunk/testsuite/finite_systems_3d/05-multigrid_solver.test,
	  trunk/testsuite/finite_systems_3d/08-sodium_dimer.test,
	  trunk/testsuite/finite_systems_3d/09-spinors.test,
	  trunk/testsuite/finite_systems_3d/10-casida.test,
	  trunk/testsuite/finite_systems_3d/12-forces.test:
	  Changes in the testsuites to make them compatible with previous commit.
	* [r2026] trunk/src/h.F90, trunk/src/td_write.F90, trunk/src/v_ks_inc.F90:
	  Changed a bit the way in which energies are calculated, I think it is
	  more reasonable now. It involved changing the test files; the numbers
	  that are obtained now are exactly the same as before, but the command
	  that extracted the numbers from the info file had to be changed. Now
	  it prints the Hartree energy, and not the "Potentials" energy, a rather
	  unclear term.
	  
	  [Unfortunately this work did not lead to the goal I had: the use of the
	  LDA+SIC in td runs leads to a small change of the energy... don't know
	  if it is a bug or not, be aware of it]

2006-04-26  acastro

	* [r2025] trunk/src/epot_inc.F90:
	  The computation of the non-local component of the forces was very slow,
	  because it did not take full advantage of the small range of the non-local
	  projectors. I added a procedure X(psiprojectorpsi) that calculates the
	  expectacion value of the pseudopotentical non-local projectors with that
	  in mind.

2006-04-26  xavier

	* [r2024] trunk/src/em_resp.F90:
	  * Now PolAddFXC and PolAddHartree work for static polarizability as well.
	  * A space was missing in output.

2006-04-26  acastro

	* [r2023] trunk/src/out_inc.F90:
	  The matlab mode does no longer print "imaginary part" and "absolute value"
	  when printing real functions.

2006-04-25  xavier

	* [r2022] trunk/src/td.F90:
	  Added a ModifyOccupations block, that allows to change the occupations of
	  the orbitals with respect to the ground state, when starting a TD run.
	* [r2021] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90:
	  * A bit of code cleaning.
	  * Units are considered in I/O.
	  * Input variables to remove the fxc and hartree terms from response.

2006-04-25  acastro

	* [r2020] trunk/src/scf.F90:
	  Bug fixed.
	  Corrected the bug of last night. No problem with out bands when running
	  in parallel in states, there, btw: the code currently never runs parallel
	  in state the ground-state, so scf_write_static would never be called.

2006-04-24  appel

	* [r2019] trunk/src/casida.F90, trunk/src/eigen_cg.F90, trunk/src/em_resp.F90,
	  trunk/src/epot.F90, trunk/src/f_inc.F90, trunk/src/linear_response_out.F90,
	  trunk/src/messages.F90, trunk/src/scf.F90, trunk/src/specie.F90,
	  trunk/src/specie_grid.F90, trunk/src/td.F90:
	  Mostly janitory work:
	  
	  o Some newly introduced direct I/O was not MPI clean
	  o Removed unused variables
	  o Fixed two out of bounds in write_angular_momentum
	  
	  Currently write_angular_momentum also _computes_ angular momenta. Wouldn't it
	  be better to have a separate routine for that job so that write_angular_momentum
	  does what its name is suggesting (similar to magnetic moments)? I didn't test
	  that, but looking at the loop in scf.F90:613 I would expect further out of bounds
	  for ang(j, ), ang2(j, ) when running parallel in states.

2006-04-24  xavier

	* [r2018] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90, trunk/src/linear_response.F90,
	  trunk/src/linear_response_inc.F90:
	  Updated the calculation of dynamic polarizabilities in linear response:
	  
	  * Improved convergency: sometimes it's possible to calculate response for resonant
	  frequencies.
	  * New input scheme, allows to calculate polarizabilities for a range of
	  frequencies.
	  * Several new input variables, I still have to document them.
	  * I have done some testing and i get consistent result with respect to
	  polarizability from time evolution.

2006-04-24  acastro

	* [r2017] trunk/src/scf.F90:
	  Pretty print of the angular momentum of the KS eigenfunctions,
	  in order to make it alike to the printing of the eigenvalues.
	* [r2016] trunk/src/f_inc.F90, trunk/src/scf.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/td_write.F90, trunk/src/unocc.F90:
	  * Bug fixed in unocc.F90. It didn't show in most cases, however.
	  * Bug fixed in X(f_angular_momentum)
	  * Removed states_calc_angular. Its functionality is now covered by
	  X(states_angular_momentum) and states_eigenvalues_sum, which may now
	  not only sum weighted eigenvalues, but also weighted whatevers, such
	  as angular momenta.
	* [r2015] trunk/src/h.F90, trunk/src/states.F90:
	  Now states_eigenvalue_sum takes care of the summing over processes,
	  instead of having to do it afterwards. Also, it can do any kind of
	  sum over states, weighted over occupation numbers and k-points weight.
	  I will use this feature later.

2006-04-23  acastro

	* [r2014] trunk/src/f_inc.F90:
	  Bug fixed.
	  The angular momentum calculations were not working in the 2D case.

2006-04-21  acastro

	* [r2013] trunk/src/f_inc.F90, trunk/src/scf.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90:
	  Now the info file prints the expectation of the angular momentum operator
	  of each KS state individually. Before it only printed the sum. Now there
	  is quite a lot of redundancy, I will remove that.

2006-04-21  xavier

	* [r2012] trunk/src/Makefile.am, trunk/src/h.F90:
	  Only two small changes:
	  * Public declaration of _diag functions in the hamiltonian_m.
	  * I put back the line that removes the _oct.f90 file in the Makefile.

2006-04-20  acastro

	* [r2011] trunk/src/casida.F90:
	  Corrected a mismatch between a variable name and its name in the
	  documentation definition.

2006-04-20  micael

	* [r2010] trunk/src/geom_opt.F90, trunk/src/scf.F90, trunk/src/states.F90,
	  trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_rti.F90, trunk/src/td_write.F90,
	  trunk/src/unocc.F90:
	  *) I belive the correct way of dealing with the NP/NP_PART issues is to
	  make the routines aware of the difference instead of passing a sub-array
	  to them.
	  According to this I made changes to some routines that had the density
	  has an input argument. Also, it seems that the states_calc_density
	  routine does not have any NP/NP_PART problem, so some of the changes made
	  to the SCF routines some time ago were not necessary and some changes I made
	  yesterday neither.

2006-04-20  acastro

	* [r2009] trunk/testsuite/finite_systems_3d/04-jellium.test:
	  Small change in one test result value, for the same reason as the
	  previous commit.
	* [r2008] trunk/testsuite/finite_systems_1d/02-neon_mpi.test,
	  trunk/testsuite/finite_systems_3d/03-functionals.test:
	  Following the changes in the way the initial guesses for the LCAO cycles
	  are done, some of the tests were failing due to the initial guess
	  dependence of the final result for not-so-well-converged calculations.
	  
	  I changed the values of the tests, I hope the nightly robot stops
	  complaining...

2006-04-19  micael

	* [r2007] trunk/src/geom_opt.F90, trunk/src/systm.F90, trunk/src/td.F90,
	  trunk/src/td_rti.F90, trunk/src/td_write.F90, trunk/src/unocc.F90:
	  A couple of bug fixes.
	  *) The local magnetic moments and the expectation value of the
	  spin have to be computed by all the nodes when using the parallelization
	  in domains.
	  *) There were some NP/NP_PART issues left, mainly concerning the density,
	  which was often passed as st%rho, instead of st%rho(1:NP,:).
	  I changed that in several places (probably I missed some), but I am not
	  completely sure if this is always necessary. Anyway, it should not hurt.

2006-04-18  acastro

	* [r2006] trunk/src/epot.F90:
	  Bug fixed.
	  There was a memory leak when regenerating the external potential at each
	  time step -- when this is needed because the ions move. It was due to a
	  bad handling of the pointers, a nightmare in Fortran. I got rid of the
	  use of those pointers, which may lead to a small loss in performance.

2006-04-18  micael

	* [r2005] trunk/testsuite/finite_systems_2d/01-quadratic_box.01-ground_state.inp,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.02-hartree.inp,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.03-hartree+xc.inp,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.04-spin_polarized.inp,
	  trunk/testsuite/finite_systems_2d/02-fock-darwin.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/03-functionals.01-jellium-lsda.inp,
	  trunk/testsuite/finite_systems_3d/03-functionals.02-jellium-exx_kli.inp,
	  trunk/testsuite/finite_systems_3d/03-functionals.03-jellium-full_exx.inp,
	  trunk/testsuite/finite_systems_3d/04-jellium.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/10-casida.01-N2.inp,
	  trunk/testsuite/finite_systems_3d/12-forces.01-N2_gs.inp:
	  *) Updated the tests to take into account the new LCAOStart options.

2006-04-17  micael

	* [r2004] trunk/src/gs.F90:
	  These changes are related to the LCAO start and gs initialization issue.
	  
	  After a long discussion with Alberto, we where not able to agree about the
	  initialization of the density and the states when one does a LCAO calculation
	  before the main SCF cycle. So we decided to give the user the choice about how
	  things should be done. This means there are now two ways the LCAO start can be
	  used.
	  In both schemes the guess density is constructed and the corresponding KS
	  potential is computed. An LCAO calculation is done so that a new set of states,
	  eigenvalues and occupations are computed. We then have two options:
	  
	  1) A new density and the corresponding KS potential are computed from the LCAO
	  states. Afterwards a new set of eigenvalues and occupations are computed by
	  taking the expectation value of the Hamiltonian which is computed with the
	  new KS potential. All these quantities are passed to the SCF cycle.
	  
	  2) The guess density and the corresponding KS potential are left unchanged and
	  only the LCAO states are passed to the SCF cycle. The LCAO states are just
	  used as good starting points for our iterative eigensolvers.
	  
	  Option 1) is the one currently implemented and option 2) was the one
	  implemented up to 19 months ago. This was changed when Miguel cleaned the run
	  module. I do not know if it was an intentional change.
	  
	  Now, I do believe option 2) is the correct one. In all the tests I made, option
	  2) made the SCF cycle faster or as fast as option 1). I also noticed that option 1)
	  many times destroyed the spin configuration of the guess density, yielding wrong
	  results for certain spin polarized systems. Alberto said he tried option 2) with
	  benzene and it was slower than option 1). Unfortunately, benzene does not run in
	  my machine because of some problem with the LCAO, so I was not able to reproduce
	  those results.
	  The reason why I think option 2) is better is simple. In option 1) the LCAO
	  start is nothing but as SCF iteration done with the LCAO eigensolver. So, when
	  passing the LCAO density to the SCF cycle one is using the output density of an
	  SCF iteration as the input density of the next iteration *without* mixing it.
	  That is usually a very bad idea...
	  
	  I think we should test both options carefully and choose one of them before the
	  next release.

2006-04-17  xavier

	* [r2003] trunk/src/derivatives.F90, trunk/src/derivatives_inc.F90, trunk/src/f.F90,
	  trunk/src/f_inc.F90, trunk/src/h_inc.F90, trunk/src/nl_operator.F90,
	  trunk/src/poisson_multigrid.F90:
	  I added a _diag version of some operators (laplacian and h) that returns
	  the diagonal (local) part of this operators. This is useful to implement
	  some solvers like Gauss-Jacobi (i am trying it for the Sternheimer
	  equation). Also I added an alternative implementation of Gauss-Jacobi in the
	  multigrid Poisson solver.

2006-04-13  xavier

	* [r2002] trunk/src/Makefile.am, trunk/src/epot.F90, trunk/src/specie.F90,
	  trunk/src/specie_grid.F90:
	  Added a new module, specie_grid_m, that contains functions related to species
	  that depend of the definition of grid_m or other modules.
	* [r2001] trunk/src/Makefile.am, trunk/src/linear_response_out.F90:
	  Added a lr_output function that prints the perturbation of the density, wave
	  functions and for the ELF. Currently the ELF is only for the static case
	  with real wavefunctions.

2006-04-12  acastro

	* [r2000] trunk/src/epot_inc.F90:
	  A performance hack for the calculation of the forces, which were terribly
	  slow if the system contained lots of non-local operators.
	* [r1999] trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/profiling.F90:
	  Added two more profiling tags: for the forces, and for the generation
	  of the external potential.
	* [r1998] trunk/src/states_inc.F90:
	  Reduced the threshold to consider two states "orthogonal". Otherwise there
	  were some problems with the NAG compiler (this is the reason of the test
	  failure last night).

2006-04-11  acastro

	* [r1997] trunk/src/xc_KLI.F90:
	  Changed the way in which the KLI terms are calculated. This new way it
	  is way faster, especially in parallel and for large systems, for which
	  the KLI part of the calculation dominates all the others. So it is crucial
	  in those cases.
	  
	  *However*: the new scheme requires much more memory (essentially one full
	  new array of KS states). This may be a problem. So maybe we could think
	  of putting back the other scheme and leaving the option for the user. This
	  choice may show up in more places (memory vs. CPU, I can think of a couple
	  of other places), so we could think of a general input variable
	  (MinimizeMemory, or something like that) which may be switched on if not
	  enough memory is available, but at the cost of potentially more CPU time.
	* [r1996] trunk/src/gs.F90, trunk/testsuite/finite_systems_3d/04-jellium.test,
	  trunk/testsuite/finite_systems_3d/11-sic.test:
	  I put back essentially the same changes in gs.F90 that Micael put
	  yesterday and later removed. I just added a call to X(system_h_setup), that
	  should be there. But the rest of the changes were actually good, this way
	  it is better looking.
	  
	  I also had to change the last figures of the numbers of a couple of tests.

2006-04-10  micael

	* [r1995] trunk/src/gs.F90, trunk/testsuite/finite_systems_3d/06-restart.test,
	  trunk/testsuite/finite_systems_3d/07-spin_orbit_coupling.test,
	  trunk/testsuite/finite_systems_3d/08-sodium_dimer.test,
	  trunk/testsuite/finite_systems_3d/09-spinors.test,
	  trunk/testsuite/finite_systems_3d/12-forces.test:
	  *) It seems my bug with the eigenvalues resulting from the initialization
	  and LCAO steps is more complex that I tought, so I'm reverting all my
	  previous changes.
	  This will teach me to be very carefull when debugging the parallel executable.
	  
	  Nevertheless, I do believe there is a problem with the gs_init routine:
	  the guess density seems to be overwriten if there is no LCAO start.
	  Alberto, could you check that?
	* [r1994] trunk/src/gs.F90, trunk/testsuite/finite_systems_3d/06-restart.test,
	  trunk/testsuite/finite_systems_3d/07-spin_orbit_coupling.test,
	  trunk/testsuite/finite_systems_3d/08-sodium_dimer.test,
	  trunk/testsuite/finite_systems_3d/09-spinors.test,
	  trunk/testsuite/finite_systems_3d/12-forces.test:
	  *) Bug fixed. After more than a year, it seems there are still some bugs
	  left from the changes in the "run" module...
	  
	  The hamiltonian_setup routine was called *after* the LCAO start, so the
	  LCAO eigenvalues and occupations were overwriten with some much worse values.
	  This made the SCF cycle for big systems much slower. The final results
	  were nevertheless OK, with the possible exception of the non-collinear spin,
	  because in that case, the final result may be strongly dependent of the
	  initial density.
	  
	  I had to update some tests, since in most of then we only do very few
	  SCF iterations. Unfornately, some of the tests were not working in my
	  machine (the CVS version was not passing all the tests), so I did not
	  update those ones.

2006-04-10  acastro

	* [r1993] trunk/testsuite/finite_systems_3d/10-casida.01-N2.inp:
	  This test failed because of the new default basis for the LCAO calculation.
	  I changed it in order to ensure that the test is done exactly in the
	  same way than before.

2006-04-08  acastro

	* [r1992] trunk/libxc/gga_pbe.c, trunk/libxc/lda.c, trunk/libxc/test.c, trunk/libxc/xc_f.c,
	  trunk/src/gs.F90, trunk/src/lcao.F90, trunk/src/out.F90, trunk/src/out_inc.F90,
	  trunk/src/profiling.F90:
	  Some more profiling tags, and some unimportant changes. For example, now
	  the wavefunctions are not randomly generated if then a LCAO calculation
	  is going to be performed.
	* [r1991] trunk/testsuite/periodic_systems_1d/03-sodium_chain.01-ground_state.inp:
	  This test was failing because of the new default for the LCAODimension.
	  Now I made sure that the calculation is exactly the same as before.

2006-04-07  acastro

	* [r1990] trunk/src/td.F90, trunk/src/td_init.F90:
	  Yet a new variable: RecalculateGSDuringEvolution. If it is set to "yes",
	  every OutputEvery time steps the ground state is recalculated. This may
	  be required if the ions move and one wants to calculate projections
	  onto the ground state.

2006-04-07  xavier

	* [r1989] trunk/src/systm.F90:
	  Atomic density was not calculated for all electron specie. Now is a constant
	  (same case for usdef).

2006-04-07  acastro

	* [r1988] trunk/src/td.F90:
	  Just some reordering.
	* [r1987] trunk/src/lcao.F90, trunk/src/ps.F90,
	  trunk/testsuite/finite_systems_3d/06-restart.test,
	  trunk/testsuite/finite_systems_3d/12-forces.test:
	  For TM pseudopotentials, now the code obtains all the atomic
	  orbitals up to l = 3. This way there are more atomic orbitals available
	  to do LCAO calculations. This is important in order to do quickly
	  calculation of unoccupied KS states.
	  The new default LCAO basis dimensions leads to small differences in the
	  results of a couple of tests, so I changed them.

2006-04-06  acastro

	* [r1986] trunk/src/gs.F90:
	  No idea of why we were writing the wavefunctions after the ground state
	  initialization.
	* [r1985] trunk/src/lcao.F90:
	  (*) The reading of atomic orbitals is now done in a different ordering,
	  to avoid that some atoms are more represented than others.
	  
	  (*) The dimension of the LCAO basis set, which sometimes may be too large,
	  can be reduced by making use of the LCAODimension variable (unfortunately,
	  specially for LR-TDDFT calculations, the usual problem is the opposite --
	  one would need a larger basis. I will try to address that problem later).

2006-04-06  xavier

	* [r1984] trunk/src/specie.F90:
	  Improved output for all electron specie.

2006-04-05  acastro

	* [r1983] trunk/src/eigen_cg.F90:
	  One more refinement in cg_new the conjugate-gradient routine.
	* [r1982] trunk/libxc/lda.c, trunk/libxc/lda_x.c, trunk/libxc/xc.h, trunk/libxc/xc_f.c,
	  trunk/src/libxc.F90, trunk/src/xc.F90:
	  The option to interpolated the LDA functionals instead of recalculating
	  them every time is now compiled always, although it is only used
	  if the InterpolateLDA is set to yes.
	  I will experiment with it for a few months to see if it is worthed to
	  keep it as an option.

2006-04-04  acastro

	* [r1981] trunk/src/poisson.F90, trunk/src/v_ks.F90:
	  A little problem with the output.
	* [r1980] trunk/libxc/lda.c:
	  Still one bug.
	* [r1979] trunk/libxc/gga_lb.c, trunk/libxc/gga_pbe.c, trunk/libxc/lda_funcs.c,
	  trunk/libxc/lda_x.c, trunk/libxc/mgga_x_tpss.c, trunk/libxc/test.c, trunk/libxc/xc.h,
	  trunk/libxc/xc_f.c:
	  The XAlpha correlation functional was badly calculated when code was
	  compiled with the "LDA_SPEEDUP" preprocessor flag. This option is still
	  way too experimental to be compiled by default. If you want to try it,
	  you have to define LDA_SPEEDUP (for example, setting
	  CPPFLAGS="-DLDA_SPEEDUP" when configuring).

2006-04-04  micael

	* [r1978] trunk/doc/Makefile.am, trunk/src/Makefile.am, trunk/testsuite/Makefile.am:
	  *) Some files were missing from the distribution.

2006-04-03  acastro

	* [r1977] trunk/src/profiling.F90, trunk/src/scf.F90, trunk/src/xc.F90,
	  trunk/src/xc_KLI.F90, trunk/src/xc_OEP.F90, trunk/src/xc_OEP_SIC.F90,
	  trunk/src/xc_OEP_inc.F90, trunk/src/xc_OEP_x.F90, trunk/src/xc_vxc.F90:
	  Added more profiling tags, for the OEP xc functionals.
	* [r1976] trunk/src/h_inc.F90:
	  One of the magnetic terms was missing for the spinors case. The code
	  did not stop there, it just silently ignored that term...
	* [r1975] trunk/src/spectrum.F90, trunk/src/xyzanim.F90:
	  oct-xyz-anim was broken because of changes in the header.
	* [r1974] trunk/src/main.F90, trunk/src/restart.F90, trunk/src/restart_inc.F90:
	  A little problem with the input/output that showed up when using
	  the multiple data sets feature.

2006-04-02  acastro

	* [r1973] trunk/src/io.F90, trunk/src/out.F90, trunk/src/restart.F90,
	  trunk/src/restart_inc.F90:
	  The iopar_open, etc., subroutines move from the output_m to io_m, where
	  they are more logically installed. Also, iopar_open and iopar_close
	  are gone, now one can only use io_open and io_close, possibly passing
	  a mpi_grp optional argument.
	* [r1972] trunk/src/eigen_cg.F90:
	  For some reason, this did not work for the calculation of unoccupied
	  states -- the reason for the failure of the LR-TDDFT test.

2006-03-31  xavier

	* [r1971] trunk/src/epot.F90, trunk/src/geom_opt.F90, trunk/src/phonons.F90,
	  trunk/src/run.F90, trunk/src/specie.F90, trunk/src/systm.F90, trunk/src/td.F90,
	  trunk/src/v_ks.F90:
	  New specie: All Electron Atoms
	  
	  The potential for the atom is obtained solving a poisson equation, the
	  atomic density is represented as 1/Vcell in one point and zero in the
	  others. This gives a finite value for the potential in the point. The
	  problem is that works only if atoms are over a grid point, so when this
	  doesn't happen, the atom is simply considered to be in the closest grid
	  point. So this is not practical for complex geometries (more than 2 atoms
	  ;-).
	  
	  This species can be defined as:
	  
	  %Species
	  'H' | 1.0079400 | spec_all_e | 1
	  %
	  
	  where the second number is atomic mass and the fourth is Z.

2006-03-30  acastro

	* [r1970] trunk/src/poisson.F90:
	  Bug fixed. The fft_corrected Poisson solver was still not working
	  perfectly in parallel in domains. The constant that one has to
	  add was not well calculated.
	* [r1969] trunk/src/eigen.F90, trunk/src/eigen_cg.F90, trunk/src/profiling.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90:
	  Some changes that affect the performance:
	  * When diagonalizing through any of the cg methods for systems with many
	  orbitals, the bulk of the time is spent orthonormalizing orbitals (far
	  more than applying the Hamiltonian). I introduced a hack in the
	  orthonormalization procedure in the cg_new method that "locks" down
	  orbitals, avoiding many of the steps. I did not prove mathematically yet
	  that this locking is justified, it is only justified by my numerical
	  results.
	  * The reordering of orbitals was done way too many times, I think. For
	  small systems, this is irrelevant, but for big systems this mattered.
	  Now, with the cg_new method the reordering is only done once if time
	  the eigen_solver is called.
	  
	  Both changes speed up the ground-state calculation of a fullerene molecule
	  by more than a factor of two. I only put the changes in cg_new since
	  the default is cg, and I will experiment with it a bit before putting
	  the changes also in cg. In fact, we can eventually get rid of the old
	  cg.

2006-03-29  acastro

	* [r1968] trunk/src/profiling.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/td.F90:
	  Added a profiling flag for the Gram-Schmidt procedure, which seems
	  to be stalling my jobs.
	  Also, some small cosmetic issues.
	* [r1967] trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/td.F90:
	  Moved the application of the mask function out of the td_run.
	* [r1966] trunk/liboct/oct_f.c:
	  My loct_getenv function was not proper C, as usual.

2006-03-28  acastro

	* [r1965] trunk/src/global.F90, trunk/src/liboct.F90:
	  Changed OCTOPUS_INSTALL_DIR to OCTOPUS_ROOT, as recommended by Xavier.
	  And fixed a bug, I shouldn't have put a fixed length in the interface
	  definition to loct_getenv in liboct.F90.
	* [r1964] trunk/liboct/oct_f.c, trunk/src/global.F90, trunk/src/liboct.F90:
	  Added a loct_getenv subroutine that permits to obtain the value of a
	  variable in the environment.
	  
	  This can be used to override the default location of the share/octopus
	  directory. Now one can put in the environment a OCTOPUS_INSTALL_DIR
	  variable, such that if it is non-null, the code will look for data
	  in the OCTOPUS_INSTALL_DIR/share/octopus directory (otherwise the data
	  is searched in PREFIX/share/octopus, where PREFIX is the argument passed
	  to --with-prefix when running configure, default $HOME, I think).
	* [r1963] trunk/src/casida.F90:
	  Removed some totally unnecessary code from casida.F90.

2006-03-27  micael

	* [r1962] trunk/src/scf.F90:
	  *) Small bug fixed: writing of the local magnetic moments to the info file was
	  not working in parallel.

2006-03-26  xavier

	* [r1961] trunk/liboct/oct_f.c, trunk/liboct/varinfo.c:
	  * Some fixes for compatilibity with IRIX libc.
	  * Some semicolons were missing (in code only used by non-linux
	  system)

2006-03-26  acastro

	* [r1960] trunk/src/casida.F90, trunk/src/out.F90:
	  Added the possibility of printing out the transition densities.
	  One has to add the flag "transition_density" to the Output variable,
	  and then decide which densities are to be printed by defining the
	  "LinearResponseTransitionDensity" variable, which has the list form
	  (e.g. "1,3-5"). The format is decided by the OutputHow variable, as usual.
	* [r1959] trunk/src/casida.F90, trunk/src/states.F90:
	  Defined a states_pair_t data type (a KS electron-hole pair) to simplify
	  the development of the Casida module.

2006-03-23  micael

	* [r1958] trunk/src/scf.F90:
	  *) Total and local magnetic moments are now printed during the SCF cycle
	  also for spin-polarized calculations.
	* [r1957] trunk/testsuite/finite_systems_3d/07-spin_orbit_coupling.test:
	  *) Increased the precision and the number of iterations in the spin-orbit
	  test.
	* [r1956] trunk/testsuite/finite_systems_3d/07-spin_orbit_coupling.01-ground_state.inp:
	  *) Increased the precision and the number of iterations in the spin-orbit
	  test.
	* [r1955] trunk/src/spectrum.F90:
	  *) Bug fixed: there was a problem with the output units of the complex rotatory
	  strength function. Now Octopus reproduces correctly the results of the paper by
	  Yabana & Bertstch on circular dichroism.
	  *) Included information about the units in the rotatory_strength output file.
	  *) Changed the functions included in the rotatory_strength file: it now includes
	  the rotatory strength function and the real part of beta (before it included the
	  real and imaginary parts of the complex rotatory strength function).
	* [r1951] trunk/src/states.F90:
	  *) Small bug fixed in the local magnetic moments calculation.

2006-03-22  appel

	* [r1948] trunk/src/epot_inc.F90:
	  With this modification the input file of Micael seems to run on my
	  machine.
	  
	  Micael can you check if that's also the case for you?

2006-03-22  micael

	* [r1947] trunk/src/scf.F90:
	  *) Bug fixed: part of the information about the local magnetic moments was
	  printed by all the nodes.
	* [r1946] trunk/testsuite/finite_systems_3d/07-spin_orbit_coupling.test:
	  *) I changed the way the matches were done in the spin-orbit coupling test.
	  Let's see if it works now.

2006-03-22  acastro

	* [r1945] trunk/src/casida.F90, trunk/src/geom_opt.F90, trunk/src/gs.F90,
	  trunk/src/lcao.F90, trunk/src/opt_control.F90, trunk/src/phonons.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/static_pol.F90,
	  trunk/src/td_write.F90, trunk/src/unocc.F90:
	  The allocation of the KS states within the states_t structure may be
	  done now by calling some X(states_allocate_wfns) subroutine. This way it
	  looks nicer and I hope that we will avoid some np/np_part or
	  st%nst/st%st_start errors.

2006-03-22  appel

	* [r1944] trunk/src/states.F90:
	  The calculation of the local magnetic moments was wrong, when running
	  parallel in domains. Basically an integration over the whole mesh
	  was done directly, instead of using dmf_integrate.
	  
	  Most probably Florian and I forgot to look into this when we implemented
	  the domain parallelization. I also noticed that there are a few more
	  places in the code that still don't use dmf_integrate. I try to look into
	  this.
	  
	  For the future, if you write new code, that is also supposed to run in
	  parallel, make sure that you don't use vol_pp directly. Instead use always
	  the wrapper functions from mf_inc.F90 (mf_dotp, mf_integrate, mf_moment, ...).
	  Only they are aware of the domain parallelization.

2006-03-22  acastro

	* [r1942] trunk/src/derivatives_inc.F90, trunk/src/mesh.F90, trunk/testsuite/Makefile.am:
	  Substituted some "calc_dim" by "m%sb%dim" in some places. This way we
	  will be able to define derivatives on a plane, or on a line, when working
	  in 3D, or in a plane.
	  
	  Also, I put back the summarizing messages about the success/failure of
	  the tests that were output after running "make check". I do not know why
	  I deleted them.

2006-03-21  acastro

	* [r1941] trunk/src/systm.F90:
	  Bug fixed.
	  Again, one NP/NP_PART related problem. Fortunately, in this case it did
	  not affect the final results, it only made the initialization poorer
	  in the spin-polarized case.
	* [r1940] trunk/testsuite/finite_systems_3d/12-forces.01-N2_gs.inp,
	  trunk/testsuite/finite_systems_3d/12-forces.test:
	  The calculation of the forces had not a test. I did not use Na2 because
	  it is important to test that the non-local pseudopotential contribution
	  is properly done.

2006-03-21  micael

	* [r1939] trunk/libxc/gga_lb.c, trunk/libxc/gga_pbe.c, trunk/libxc/lda.c,
	  trunk/libxc/lda_funcs.c, trunk/libxc/lda_x.c, trunk/libxc/mgga_x_tpss.c,
	  trunk/libxc/util.h, trunk/libxc/xc.h, trunk/libxc/xc_f.c, trunk/src/atomic.F90,
	  trunk/src/libxc.F90, trunk/src/xc_functl.F90:
	  *) Syncing the libxc in APE with the one in Octopus.
	  This new version includes the relativistic correction to the LDA exchange functional.
	  This is not really important for Octopus (at least for the time being) but it is
	  necessary for APE.

2006-03-21  acastro

	* [r1937] trunk/src/xc_KLI.F90, trunk/src/xc_OEP_inc.F90:
	  Bug fixed.
	  One conjugation was missing in the OEP stuff, which was only relevant
	  if using complex wavefunctions.

2006-03-20  appel

	* [r1936] trunk/liboct/ylm.c:
	  Adding a small number (DBL_MIN) to rz to avoid floating invalids.
	* [r1935] trunk/liboct/oct_gsl_f.c:
	  Adding explicitely asymptotic limits for the error function and the
	  complementary error function to avoid floating invalids.
	* [r1934] trunk/build/latest_cvs_commit.sh:
	  This did not work anymore, since oct-run_regression_test.pl has Id: twice.
	  I'm now excluding the second case explicitely.

2006-03-19  appel

	* [r1927] trunk/src/casida.F90:
	  Bug fixed. Another one revealed by gfortran, this time in the Casida module.
	  
	  The testsuite is now almost running properly with the gfortran octopus executable.
	  The only exception is the multigrid test which runs, but gives wrong numbers.
	  I compiled octopus with -ffpe-trap=invalid,zero,overflow,underflow and for
	  this test it raises a floating point exception in poisson_multigrid_solver/residue.
	  
	  Floating point exceptions also appear in the calculation of the error function
	  the YLM's, or in mf_random.
	  
	  When compiling with -fbounds-check, a out-of-bounds is revealed in
	  atomhxc/vhrtre.
	  
	  I stop for today, but I guess for the bugfix release there's some work left.
	* [r1926] trunk/src/xc_KLI.F90:
	  Bugfix. Another np/np_part issue. The KLI code was crashing whith gfortran.
	  Interestingly, none of the commercial compilers was revealing this bug.

2006-03-18  appel

	* [r1925] trunk/src/em_resp.F90:
	  Forgot this.
	* [r1924] trunk/src/Makefile.am, trunk/src/atomic.F90, trunk/src/broad.F90,
	  trunk/src/casida.F90, trunk/src/cf.F90, trunk/src/cf_inc.F90, trunk/src/curv_briggs.F90,
	  trunk/src/curv_gygi.F90, trunk/src/curv_modine.F90, trunk/src/curvlinear.F90,
	  trunk/src/derivatives.F90, trunk/src/derivatives_inc.F90, trunk/src/eigen.F90,
	  trunk/src/eigen_arpack.F90, trunk/src/eigen_cg.F90, trunk/src/eigen_evolution.F90,
	  trunk/src/eigen_plan.F90, trunk/src/eigen_trlan.F90, trunk/src/em_resp.F90,
	  trunk/src/em_resp_inc.F90, trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/f.F90,
	  trunk/src/f_inc.F90, trunk/src/fftw2.F90, trunk/src/fftw3.F90, trunk/src/geometry.F90,
	  trunk/src/global.h, trunk/src/grid.F90, trunk/src/gs.F90, trunk/src/h.F90,
	  trunk/src/h_inc.F90, trunk/src/hgh.F90, trunk/src/hs.F90, trunk/src/io.F90,
	  trunk/src/lasers.F90, trunk/src/lcao.F90, trunk/src/libxc.F90,
	  trunk/src/linalg_basic_int.F90, trunk/src/linear_response.F90,
	  trunk/src/linear_response_inc.F90, trunk/src/logrid.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_init.F90, trunk/src/mesh_lib.F90, trunk/src/mf_inc.F90, trunk/src/mix.F90,
	  trunk/src/mpi.F90, trunk/src/multicomm.F90, trunk/src/multigrid.F90,
	  trunk/src/nl_operator.F90, trunk/src/opt_control.F90, trunk/src/out.F90,
	  trunk/src/out_inc.F90, trunk/src/par_vec.F90, trunk/src/par_vec_inc.F90,
	  trunk/src/pes.F90, trunk/src/pes_mask.F90, trunk/src/pes_rc.F90, trunk/src/poisson.F90,
	  trunk/src/poisson2D.F90, trunk/src/poisson3D.F90, trunk/src/poisson_cg.F90,
	  trunk/src/poisson_corrections.F90, trunk/src/poisson_multigrid.F90, trunk/src/ps.F90,
	  trunk/src/restart.F90, trunk/src/restart_inc.F90, trunk/src/scf.F90,
	  trunk/src/simul_box.F90, trunk/src/specie.F90, trunk/src/spectrum.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/states_kpoints.F90,
	  trunk/src/static_pol.F90, trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_calc.F90,
	  trunk/src/td_exp.F90, trunk/src/td_exp_split.F90, trunk/src/td_init.F90,
	  trunk/src/td_rti.F90, trunk/src/td_write.F90, trunk/src/tm.F90, trunk/src/unocc.F90,
	  trunk/src/v_ks.F90, trunk/src/v_ks_inc.F90, trunk/src/xc.F90, trunk/src/xc_KLI.F90,
	  trunk/src/xc_OEP.F90, trunk/src/xc_OEP_SIC.F90, trunk/src/xc_OEP_inc.F90,
	  trunk/src/xc_OEP_x.F90, trunk/src/xc_axc.F90, trunk/src/xc_functl.F90,
	  trunk/src/xc_fxc.F90, trunk/src/xc_kxc.F90, trunk/src/xc_vxc.F90,
	  trunk/src/xyz_adjust.F90, trunk/src/xyz_file.F90:
	  I found a few more cases where the size of static local arrays was
	  determined by variables that are only known at runtime. In most cases
	  this occured with sb%dim or st%d%dim. As we discussed yesterday in the
	  IRC I introduced a macro MAX_DIM and modified the arrays such that their
	  size is known at compile time. Please ensure that this is also the case
	  when you commit new code.
	  The rest was mainly janitory work: when I recently replaced the naming
	  of types from _type to _t the formatting got shifted in many placed, also
	  my Perl script missed the cf types which I now converted also to cf_t.
	* [r1923] trunk/src/linalg_adv_lapack.F90:
	  There was an deallocate missing in zgeneigensolve.

2006-03-17  appel

	* [r1922] trunk/external_libs/qshep/qshep2d.f90, trunk/external_libs/qshep/qshep3d.f90,
	  trunk/src/math.F90, trunk/src/mf_inc.F90, trunk/src/restart_inc.F90:
	  Removing unused variables.
	* [r1920] trunk/src/epot.F90:
	  Adding Albertos bugfix also to HEAD.
	* [r1918] trunk/src/multigrid.F90:
	  Just adding a few push_sub/pop_sub.
	  
	  Micael: The failure of the multigrid test that you were seeing is a
	  compiler bug of the Pathscale compiler. Xaviers code is perfectly valid.
	  In fact, if you reduce the optimization from -O3 to -O2 the code runs
	  properly.
	* [r1917] trunk/src/xc_vxc.F90:
	  Bugfix: Another out of bounds.
	  
	  Somebody tends to declare static arrays with a size which is not known
	  at compile time (I wonder how this could work at all). In Xaviers commit
	  it was
	  
	  FLOAT :: x(calc_dim)
	  
	  and here it was
	  
	  FLOAT :: d(spin_channels)
	  
	  The final values for the variables calc_dim and spin_channels are however
	  only known at runtime.
	  
	  So be careful what limits you use for _static_ arrays.

2006-03-17  xavier

	* [r1916] trunk/src/lcao.F90:
	  Fixed an out of bounds shown by the pathscale compiler.

2006-03-17  micael

	* [r1915] trunk/src/scf.F90:
	  *) Bug ficed: just a small NP/NP_PART issue.

2006-03-16  acastro

	* [r1914] trunk/src/linear_response.F90:
	  Bug fixed.
	  Once again the use of intent(in) instead of intent(out) causes problems
	  *sometimes*.

2006-03-16  appel

	* [r1913] trunk/src/eigen.F90:
	  This was faster than I expected initially: it is now possible to compile
	  octopus with gfortran (v4.1 + advance patch from Tuesday).
	  
	  The declaration of the function argument mv was missing. I added it
	  as private.
	  
	  This is the first time where we are able to compile the code with the GNU
	  compiler collection only (i.e. without using a commercial Fortran compiler).
	  This will make packaging of the code a lot easier and also people who don't
	  have licenses of commercial Fortran compilers can now compile and run the
	  code. Another step in increasing the accessibility of octopus!
	  
	  About 60% of the testsuite is running properly with the gfortran executables.
	  In the other cases the code crashes at deallocates. Here an example:
	  
	  ...
	  
	  * O 27.329966 0.000000 141792 | ..|..|..|..|..|..|..|mf_inc.Xmf_dotp
	  * I 27.358488 26.290000 146832 | ..|..|..|..|..|..|..|mf_inc.Xmf_dotp
	  * O 27.361888 0.000000 146832 | ..|..|..|..|..|..|..|mf_inc.Xmf_dotp
	  *** glibc detected *** /root/octopus/octopus-cvs/src/octopus: free(): invalid pointer:
	  0x00002b27c90c0010 ***
	  ======= Backtrace: =========
	  /lib64/libc.so.6[0x3ea586d7a3]
	  /lib64/libc.so.6(__libc_free+0x84)[0x3ea586d924]
	  /usr/lib64/libgfortran.so.1(_gfortran_deallocate+0x26)[0x2b27c17ed926]
	  /root/octopus/octopus-cvs/src/octopus[0x4ebf92]
	  /root/octopus/octopus-cvs/src/octopus[0x4ef93f]
	  /root/octopus/octopus-cvs/src/octopus[0x4f5f86]
	  /root/octopus/octopus-cvs/src/octopus[0x4fbab2]
	  /root/octopus/octopus-cvs/src/octopus[0x51a274]
	  /root/octopus/octopus-cvs/src/octopus[0x55076f]
	  /root/octopus/octopus-cvs/src/octopus[0x5510dc]
	  /root/octopus/octopus-cvs/src/octopus[0x55bbce]
	  /lib64/libc.so.6(__libc_start_main+0xf4)[0x3ea581d084]
	  /root/octopus/octopus-cvs/src/octopus(gsl_complex_arccos+0x359)[0x405829]
	  ======= Memory map: ========
	  00400000-00588000 r-xp 00000000 fd:00 3279177 /root/octopus/octopus-cvs/src/octopus
	  00688000-0068b000 rw-p 00188000 fd:00 3279177 /root/octopus/octopus-cvs/src/octopus
	  0068b000-006f1000 rw-p 0068b000 00:00 0 [heap]
	  3ea5600000-3ea5619000 r-xp 00000000 fd:00 12386312 /lib64/ld-2.4.so
	  3ea5719000-3ea571a000 r--p 00019000 fd:00 12386312 /lib64/ld-2.4.so
	  
	  ...
	  
	  Note the nice backtrace that gfortran produces. :)
	  
	  I'm currently checking if this is a problem of our code, since this did
	  not show up with any of the commercial compilers (but the missing declaration
	  from above did not disturb them either).

2006-03-16  acastro

	* [r1912] trunk/src/xc_OEP.F90, trunk/src/xc_OEP_SIC.F90:
	  Bug fixed.
	  The x energy was not properly calculated for the SIC functional when
	  using parallelization in domains.
	* [r1911] trunk/testsuite/finite_systems_3d/11-sic.01-gs.inp,
	  trunk/testsuite/finite_systems_3d/11-sic.test:
	  Added one test for the LDA+SIC/KLI functional (one Ar atom, ground state).
	* [r1910] trunk/src/eigen_cg.F90:
	  Bug fixed.
	  This rarely showed up, I think, but it kept me wondering for two days
	  why one calculation did not converge.

2006-03-15  acastro

	* [r1909] trunk/src/scf.F90:
	  For debugging, if OutputDuringSCF is switched on, the states and the
	  Hamiltonian is plot and put under a directory called scf.xxxx, where
	  xxxx is the iteration numbers. This way there will be information about
	  each iteration (before the plots were put in static, and overwritten
	  every time).

2006-03-15  xavier

	* [r1908] trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90:
	  Fixed compilation issues in complex version and removed some warnings.

2006-03-14  xavier

	* [r1907] trunk/src/Makefile.am:
	  In my previous commit I accidentaly used an old version of Makefile.am.
	* [r1906] trunk/src/em_resp.F90:
	  * Corrected call to X(restart_read)()
	  * Corrected filename in push_sub()
	* [r1905] trunk/src/Makefile.am, trunk/src/em_resp.F90, trunk/src/em_resp_inc.F90,
	  trunk/src/linear_response.F90, trunk/src/linear_response_inc.F90,
	  trunk/src/static_pol_lr.F90:
	  New version of the code that calculate polarizabilities:
	  * Dynamic polarizabilities can be calculated, altough there are
	  convergency problems.
	  * Moved static_pol_lr.F90 to em_resp.F90.
	  * Added em_resp_inc.F90 for "templates".
	  
	  I hope this time is the right server ;-)

2006-03-14  acastro

	* [r1904] trunk/src/h.F90:
	  Now the xc potential and the Hartree potential are printed
	  separately.

2006-03-13  acastro

	* [r1903] trunk/src/casida.F90:
	  Bug fixed.
	  Surprisingly, the Intel compiler did not complain about this, but
	  the NAG f95 stopped.
	  (This bug did not affect the numbers that were written with the
	  intel compiler).

2006-03-13  appel

	* [r1902] trunk/testsuite/finite_systems_3d/10-casida.01-N2.inp,
	  trunk/testsuite/finite_systems_3d/10-casida.test,
	  trunk/testsuite/oct-run_regression_test.pl:
	  o Forgot to remove the deprecated RUN keyword from create_template
	  
	  o Added "# $Id$" and DebugLevel = 0 to the .inp file

2006-03-13  acastro

	* [r1901] trunk/testsuite/finite_systems_3d/10-casida.01-N2.inp,
	  trunk/testsuite/finite_systems_3d/10-casida.test:
	  Added a test for the linear-response TDDFT calculations (casida module).
	  It is a calculation for the N2 molecule. Of course it has to be classified
	  as "long" since it takes about 10 minutes to complete.
	  
	  Maybe it is worthed to put a short-run also to check this module. Probably
	  one can set up a 2d calculation (a quantum dot) so that it can be done
	  in less than one minute.
	* [r1900] trunk/src/poisson.F90, trunk/src/poisson_corrections.F90:
	  Bug fixed.
	  There was not a proper cleanup done for the fft_corrected and cg_corrected
	  PoissonSolver, and this made a multi-datasets run crash when attempting
	  to allocated a previously allocated array.

2006-03-13  appel

	* [r1899] trunk/testsuite/oct-run_regression_test.pl:
	  It is a bit annoying to analyze a regression test that has many stages which
	  depend on each other. If the error appears only in stage 04 then one has to
	  run the code 3 times to get to a point where the failure can be reproduced.
	  
	  These changes in the regression test script aim at facilitating the debugging
	  in this scenario:
	  
	  While running the testsuite, each stage of a particular test is preserved in
	  a separate directory. Consider as example the restart test:
	  
	  /tmp/octopus.FYF2zL> ls -1F
	  06-restart.01-ground_state.inp/
	  06-restart.02-restart_ground_state.inp/
	  06-restart.03-td_calc.inp/
	  06-restart.04-restart_td_calc.inp/
	  clean.sh*
	  inp
	  out
	  out.oct
	  static/
	  td.general/
	  tmp/
	  
	  The directories 06-restart.{01-..,02-..,03-..,04-..} contain the completed
	  runs up to this stage.
	  
	  Next, consider stage 02:
	  
	  /tmp/octopus.FYF2zL> cd 06-restart.02-restart_ground_state.inp
	  /tmp/octopus.FYF2zL/06-restart.02-restart_ground_state.inp> ls -1F
	  clean.sh*
	  inp
	  matches.sh*
	  out
	  out.oct
	  static/
	  tmp/
	  
	  Note the two shell scripts, that have been generated by the Perl script in
	  this particular stage:
	  
	  - matches.sh contains all matches that the testsuite would perform in this
	  stage. By running it, you execute the pre-command of the matches. It also
	  displays the regular expression of the match
	  
	  /tmp/octopus.FYF2zL/06-restart.02-restart_ground_state.inp> ./matches.sh
	  ============================================================[ Ground state restart - pre
	  command ]
	  1 up -0.014072 0.000000
	  ------------------------------------------------------------[ Ground state restart -
	  regular expression ]
	  s*1s*ups*-0.01407d*s*0.0000d*
	  
	  
	  ============================================================[ Ground state restart - pre
	  command ]
	  1 dn -0.085343 1.000000
	  ------------------------------------------------------------[ Ground state restart -
	  regular expression ]
	  s*1s*dns*-0.08534d*s*1.0000d*
	  
	  
	  -> Advantage:
	  
	  You don't have to run the previous stages manually, changing the input
	  file each time. Also you don't have to digg out which are the right numbers
	  that we compare to in this stage. The script shows them. You only have to
	  compare the target output (below -----) to the actual output (above -----).
	  
	  - clean.sh on the other hand is just a simple script to cleanup the run directory.
	  You can then start the code for this stage from scratch. Of course in a multi-stage
	  test you'll loose in this way the history of the previous stages.

2006-03-13  acastro

	* [r1898] trunk/src/scf.F90, trunk/src/v_ks_inc.F90:
	  Bug fixed.
	  
	  The spin-polarized calculations still had some problems, related, as
	  usual, to the NP/NP_PART problem.
	* [r1897] trunk/testsuite/oct-run_regression_test.pl:
	  Just one character. If the executable ends in mpi, it is considered a
	  parallel executable. Before, if the executable full path contained "mpi",
	  it was considered parallel. But mine was called "/../compilation/../octopus",
	  and compilation contains "mpi".

2006-03-13  appel

	* [r1896] trunk/src/scf.F90:
	  Spin polarized calculations were failing on 64Bit with NAG. I introduced this
	  bug with my commits from yesterday. Interestingly, the problem did not show up
	  on 32/64 Bit with Intel.

2006-03-13  acastro

	* [r1895] trunk/src/par_vec_inc.F90, trunk/src/xc_KLI.F90, trunk/src/xc_OEP_inc.F90,
	  trunk/src/xc_OEP_x.F90, trunk/testsuite/finite_systems_1d/02-neon_mpi.test:
	  Bug fixed.
	  The OEP functional were not working properly when the calculation was
	  in parallel in real-space domains. The reason is that some integrations
	  were still done summing directly over the points, instead of calling
	  mf_dotp or equivalent.

2006-03-12  appel

	* [r1894] trunk/src/out.F90:
	  Package build failed because I used curly brackets in the option description.
	  This collides with texinfo.
	* [r1893] trunk/src/scalar_mesh.F90:
	  Updating the module to make the meshes more user friendly.
	* [r1892] trunk/src/out.F90, trunk/src/out_inc.F90, trunk/src/profiling.F90,
	  trunk/src/scf.F90, trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/td_write.F90:
	  Octopus can now output the paramagnetic current density (I was surprised
	  that this was not there before). Similar to density or ELF, one has to
	  specify Output = current + ... in the input file. By chance, this could
	  be interesting for a transport calculation ... :)
	  
	  By writing OutputHow = boundary_points + ... it is now also possible to
	  include the boundary points in the output (I found this useful for
	  debugging, since I'm dealing with the boundary conditions for transport
	  calculations at the moment).
	  
	  Finally, with OutputHow = meshgrid + matlab + plane_z + ... it is possible
	  to output the octopus mesh in Matlab meshgrid format, i.e. for the specified
	  plane something like
	  
	  >> [x,y] = meshgrid(-2:.2:2,-1:.15:1)
	  
	  in Matlab language.

2006-03-11  appel

	* [r1891] trunk/testsuite/finite_systems_1d/02-neon_mpi.01-ground_state-kli_par_domains.inp,
	  trunk/testsuite/finite_systems_1d/02-neon_mpi.02-td_calc-kli_par_states.inp,
	  trunk/testsuite/finite_systems_1d/02-neon_mpi.test:
	  This is an example for a parallel test:
	  
	  1) The ground state of a 1D soft-coulomb neon atom in KLI x-only approximation
	  computed parallel in domains.
	  
	  2) The time propagation of the same system on a different number of processors,
	  but parallel in states.
	  
	  While I was testing this, I noticed that the results for the ground state
	  depend on the number of processors, e.g. when running with np=2 the eigenvalues
	  differ significantly to np=3, which is closer to the serial case. Also the
	  exchange part of the energy is wrong.
	  
	  So take this just as an example how a parallel test could look like. I guess,
	  before we can trust matches in this test we have to do some MPI debugging ... :)
	  
	  While I was reorganizing the testsuite I noticed that about 90% of the
	  current tests are ground state calculations. Since we can now classsify the
	  runtime of a test we should definitely add more td-calculations. After all
	  that's what the code is supposed to be good at :).
	* [r1890] trunk/configure.ac, trunk/debian/rules, trunk/testsuite/Makefile.am,
	  trunk/testsuite/finite_systems_1d/01-hydrogen.01-ground_state.inp,
	  trunk/testsuite/finite_systems_1d/01-hydrogen.test,
	  trunk/testsuite/finite_systems_1d/Hydrogen.test,
	  trunk/testsuite/finite_systems_1d/Makefile.am,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.01-ground_state.inp,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.02-hartree.inp,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.03-hartree+xc.inp,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.04-spin_polarized.inp,
	  trunk/testsuite/finite_systems_2d/01-quadratic_box.test,
	  trunk/testsuite/finite_systems_2d/02-fock-darwin.01-ground_state.inp,
	  trunk/testsuite/finite_systems_2d/02-fock-darwin.test,
	  trunk/testsuite/finite_systems_2d/03-helium_atom.01-ground_state.inp,
	  trunk/testsuite/finite_systems_2d/03-helium_atom.02-ground_state.inp,
	  trunk/testsuite/finite_systems_2d/03-helium_atom.test,
	  trunk/testsuite/finite_systems_2d/2dbox.test,
	  trunk/testsuite/finite_systems_2d/Makefile.am,
	  trunk/testsuite/finite_systems_2d/fock_darwin.test,
	  trunk/testsuite/finite_systems_2d/helium.test,
	  trunk/testsuite/finite_systems_3d/01-carbon_atom.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/01-carbon_atom.test,
	  trunk/testsuite/finite_systems_3d/02-curvlinear_coordinates.01-gygi.inp,
	  trunk/testsuite/finite_systems_3d/02-curvlinear_coordinates.test,
	  trunk/testsuite/finite_systems_3d/03-functionals.01-jellium-lsda.inp,
	  trunk/testsuite/finite_systems_3d/03-functionals.02-jellium-exx_kli.inp,
	  trunk/testsuite/finite_systems_3d/03-functionals.03-jellium-full_exx.inp,
	  trunk/testsuite/finite_systems_3d/03-functionals.test,
	  trunk/testsuite/finite_systems_3d/04-jellium.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/04-jellium.test,
	  trunk/testsuite/finite_systems_3d/05-multigrid_solver.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/05-multigrid_solver.test,
	  trunk/testsuite/finite_systems_3d/06-restart.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/06-restart.02-restart_ground_state.inp,
	  trunk/testsuite/finite_systems_3d/06-restart.03-td_calc.inp,
	  trunk/testsuite/finite_systems_3d/06-restart.04-restart_td_calc.inp,
	  trunk/testsuite/finite_systems_3d/06-restart.test,
	  trunk/testsuite/finite_systems_3d/07-spin_orbit_coupling.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/07-spin_orbit_coupling.test,
	  trunk/testsuite/finite_systems_3d/08-sodium_dimer.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/08-sodium_dimer.test,
	  trunk/testsuite/finite_systems_3d/09-spinors.01-ground_state.inp,
	  trunk/testsuite/finite_systems_3d/09-spinors.test,
	  trunk/testsuite/finite_systems_3d/Makefile.am,
	  trunk/testsuite/finite_systems_3d/carbon.test,
	  trunk/testsuite/finite_systems_3d/curvilinear.test,
	  trunk/testsuite/finite_systems_3d/functionals.test,
	  trunk/testsuite/finite_systems_3d/jellium.test,
	  trunk/testsuite/finite_systems_3d/multigrid.test,
	  trunk/testsuite/finite_systems_3d/restart.test, trunk/testsuite/finite_systems_3d/so.test,
	  trunk/testsuite/finite_systems_3d/sodium.test,
	  trunk/testsuite/finite_systems_3d/spinors.test,
	  trunk/testsuite/oct-run_regression_test.pl, trunk/testsuite/oct-run_testsuite,
	  trunk/testsuite/periodic_systems_1d/01-free_electrons.01-ground_state.inp,
	  trunk/testsuite/periodic_systems_1d/01-free_electrons.test,
	  trunk/testsuite/periodic_systems_1d/02-cosine_potential.01-ground_state.inp,
	  trunk/testsuite/periodic_systems_1d/02-cosine_potential.test,
	  trunk/testsuite/periodic_systems_1d/03-sodium_chain.01-ground_state.inp,
	  trunk/testsuite/periodic_systems_1d/03-sodium_chain.test,
	  trunk/testsuite/periodic_systems_1d/Makefile.am,
	  trunk/testsuite/periodic_systems_1d/cosine_potential.test,
	  trunk/testsuite/periodic_systems_1d/free_electrons.test,
	  trunk/testsuite/periodic_systems_1d/sodium_chain.test:
	  The testsuite has now a new file naming scheme. Input files are
	  stored in separate files and are not contained in the .test files
	  anymore. Also the RUN keyword disappeared. Instead a line like
	  
	  Input: 01-carbon_atom.01-ground_state.inp
	  
	  specifies the input file and implies a run at the same time. I also
	  added DebugLevel = 0 to all input files for ease of typing while
	  debugging a test.
	  
	  It is now also possible to commit tests for parallel runs. This
	  is indicated by the executable for which a test is valid (e.g.
	  octopus_cmplx_mpi). With the keyword 'Processors' one can determine
	  how many processors a given 'Input' line requires. The 'Processors'
	  keyword has to be given always before 'Input'. If none is specified
	  the value of the last appearance or if not available a default of
	  2 processors is taken. As example:
	  
	  # specify on how many processors we should run this test
	  Processors : 3
	  Input : 02-neon_mpi.01-ground_state-kli_par_domains.inp
	  
	  Match ; TotalEnergy ; grep -A 6 '^Energy:' static/info ; \s*Total\s*=\s*-28.1938
	  
	  
	  # now we start a td calculation parallel in states on 5 processors
	  Processors : 5
	  Input : 02-neon_mpi.02-td_calc-kli_par_states.inp
	  
	  # another run, also with 5 processors (note we don't override the
	  # previous value of 'Processors')
	  Input : 02-neon_mpi.03-td_calc .....
	  
	  ...
	  
	  This allows e.g. to test restarts with a different number of processors.

2006-03-11  acastro

	* [r1889] trunk/src/restart_inc.F90:
	  Bug fixed.
	  I introduced this one yesterday, when fixing other one.

2006-03-10  appel

	* [r1888] trunk/src/io.F90, trunk/src/out_inc.F90:
	  Added recl (record length) as optional argument to the open calls in io_open.
	  Some compiler (like NAG) seem to have a very small default for this value.
	  This caused I/O errors in Matlab output mode when the output file had several
	  hundred columns. Now the number of columns is computed and passed to recl.

2006-03-10  acastro

	* [r1887] trunk/src/systm.F90, trunk/src/v_ks.F90:
	  The variable SICorrection should be called SICCorrection.
	  
	  Also, I reduced the minimum ranges to describe the parallelization
	  strategies. I think we were being over-conservative there.
	* [r1885] trunk/src/restart_inc.F90, trunk/src/states.F90, trunk/src/xc_KLI.F90,
	  trunk/src/xc_OEP_x.F90:
	  Bugs fixed.
	  These only showed up sometimes when running the code in parallel.

2006-03-09  acastro

	* [r1884] trunk/src/restart_inc.F90:
	  The code was crasing with the Intel 7 compiler in the opterons/32 bits
	  because of a compiler error. But this compiler error can be avoided easily
	  by getting rid of the "open_files" internal subroutine in X(restart_read).
	  So I remove it and this way I hope that the testsuite will be passed and
	  we won't get those daily annoying emails...
	* [r1883] trunk/src/mf_inc.F90:
	  Bug fixed.
	  The conversion of functions to larger simulation boxes was failing
	  sometimes because lxyz_inv could be called out of bounds. Maybe it
	  would be nice to have a function that does the job of lxyz_inv and
	  accepts any threesome of integers.

2006-03-08  acastro

	* [r1882] trunk/src/math.F90, trunk/src/poisson.F90, trunk/src/poisson2D.F90:
	  The calculation of the cutoff-Coulomb in 2D was done in a very slow
	  way. Although this is only done in the initialization stage, it was
	  annoying for moderately large quantum dots, and it would grow very
	  badly for large quantum dots. Now it is much faster.

2006-03-07  acastro

	* [r1881] trunk/libxc/lda_c_vwn.c:
	  Bug fixed.
	  The Vosko/Wilk/Nusair xc potential had a bug related to units.
	  
	  Every time the initialization function was called, some "constant" was
	  divided by two, in order to go from rydbergs to atomic units. But the
	  inialization function is called twice by octopus, so the result was
	  a factor of four.

2006-03-06  acastro

	* [r1880] trunk/src/poisson.F90:
	  The code did not compile now in serial because there was some preprocessor
	  directives missing.
	* [r1879] trunk/src/par_vec_inc.F90, trunk/src/poisson.F90:
	  I added the FFT methods for the PoissonSolver also when running
	  in parallel in real space domains, by popular demand.
	  
	  Of course this part of the calculation will then be done in serial
	  (wherease the cg methods are done in parallel), but since it seems
	  that sometimes the use of the minimum box shape *and* the cg methods
	  was causing trouble, it will be good to have the FFTs as backup
	  reliable methods, and to compare.
	* [r1878] trunk/src/out_inc.F90, trunk/src/par_vec_inc.F90:
	  Bug fixed.
	  
	  Some un-allocated arrays were passed as arguments to some routines,
	  when running in parallel.
	  
	  This was not causing errors but when compiling with compiler checks
	  with the NAG compiler, it was signaled as an error. I think it is
	  illegal Fortran 90, and so I correct it because it is bound to create
	  problems in the future.
	* [r1877] trunk/src/f_inc.F90:
	  Bug fixed.
	  
	  The functions X(mf2cf) and X(cf2mf), etc... should operator for
	  functions defined globally, that is, to receive as arguments the full
	  function on the whole mesh, not just the function on the corresponding
	  partition when running in parallel.
	  
	  This was showing as a bug when one tried to output a function in
	  netcdf or in dx format, and running in parallel in domains. Only one
	  part of the function was output. Same for input.
	* [r1876] trunk/src/geometry.F90:
	  The NAG compiler with the -C=pointer check option did not like that
	  geo%catom was not nullified (calling associate with an uninitialized
	  pointer is an error in Fortran 90).
	* [r1875] trunk/src/mf_inc.F90, trunk/src/restart.F90:
	  Bug fixed.
	  Introduced by my last commit and detected by our night robot.

2006-03-05  acastro

	* [r1874] trunk/src/mf_inc.F90, trunk/src/restart_inc.F90:
	  subroutine X(mf_interpolate) now also handles complex functions.
	* [r1873] trunk/src/curvlinear.F90, trunk/src/gs.F90, trunk/src/math.F90,
	  trunk/src/math_inc.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90, trunk/src/restart.F90,
	  trunk/src/restart_inc.F90, trunk/src/simul_box.F90:
	  Now octopus reads the wavefunctions obtained in previous runs, even if
	  they were obtained with a different grid. In that case, it
	  interpolates them to the new grid by making use of the qshep
	  library (except in the case that we are using regular coordinates and
	  we only changed the simulation box, not the spacings. In this case, it
	  just put zeroes where needed).
	  
	  This feature, I hope, should be useful to easily study the convergence
	  with respect to spacing and box sizes.
	  
	  The code is still rather ugly, but it is a start.
	  
	  It does not do the job in case of parallel runs and/or using
	  octopus_cmplx. I will generalize to these cases later.
	  
	  The use of qshep is only a first attempt, maybe it is not the proper
	  choice because it is too slow. We will have to study this carefully.
	* [r1872] trunk/src/casida.F90, trunk/src/curvlinear.F90, trunk/src/geom_opt.F90,
	  trunk/src/grid.F90, trunk/src/gs.F90, trunk/src/multigrid.F90, trunk/src/opt_control.F90,
	  trunk/src/phonons.F90, trunk/src/restart_inc.F90, trunk/src/static_pol.F90,
	  trunk/src/static_pol_lr.F90, trunk/src/td.F90, trunk/src/td_write.F90,
	  trunk/src/unocc.F90:
	  restart_read now needs the grid as input variable, not only the mesh.
	  This will be needed later to build the interpolation scheme for the
	  restart.
	  Also, I declared curvlinear as private (it was still public).

2006-03-05  appel

	* [r1871] trunk/external_libs/qshep/qshep2d.f90, trunk/external_libs/qshep/qshep3d.f90:
	  The code did not link anymore:
	  
	  ../external_libs/qshep/libqshep.a(qshep2d.o): In function `givens_':
	  qshep2d.f90:(.text+0x3d2): multiple definition of `givens_'
	  /home/appel/opt/intel/lib/libskit.a(iters.o):iters.f:(.text+0xecd0): first defined here
	  
	  I renamed the givens routine in the qshep library to qshep_givens, since
	  from the user point of view we have to assume the Sparskit library as
	  given, i.e. not 'in-tree'.

2006-03-04  acastro

	* [r1870] trunk/COPYING, trunk/configure.ac, trunk/external_libs/Makefile.am,
	  trunk/external_libs/qshep, trunk/external_libs/qshep/COPYING,
	  trunk/external_libs/qshep/Makefile.am, trunk/external_libs/qshep/qshep2d.f90,
	  trunk/external_libs/qshep/qshep3d.f90, trunk/src/Makefile.am, trunk/src/mf_inc.F90:
	  A new external contribution: the qshep library, by Robert Renka. It
	  implements something called the "Quadratic Shepard method for
	  trivariate interpolation of scattered data". Basically what it does
	  is interpolation to any arbitrary 2D or 3D grid.
	  
	  I am not sure wether or not this is the best possible software out
	  there to do this, but since I do not know of any other that is free
	  software, for the moment it is what we have. At least it is worthed
	  to give it a try.
	  
	  The purpose of this library is to enhance the restart -- which for the
	  moment does not happen, I just commit the library --. If the grid is
	  modified in some way for restart, the code should interpolate the
	  previous result. This is crucial to do convergence studies (with the
	  simulation box size, with the grid spacing, with the parameters
	  that define the curvilinear coordinates...).

2006-03-04  appel

	* [r1869] trunk/testsuite/oct-run_regression_test.pl:
	  The first thing I do when I investigate a failed test, is to increase
	  the DebugLevel. Currently this amounts to adding a new line with DebugLevel
	  to the respective input file.
	  
	  I added DebugLevel = 0 to the generator of the test templates (-c option).
	  Next week, when we rearrange the testsuite, I'll also add DebugLevel = 0 to
	  all existing tests. This should save some typing for a repetitive and boring
	  task, as one only has to turn 0 into a larger number like 100 ...
	* [r1868] trunk/src/td_write.F90:
	  Changing td_geometry back to geometry.
	  
	  I guess next time I add new options I have to check if they are
	  already used in other parts of the code, especially which values
	  they already have ... :)
	* [r1867] trunk/src/systm.F90:
	  The spinors test was failing because of this.
	  
	  Actually with 'user_defined' we have another name clash in the options.
	  Which help text should e.g. the GUI print for the option 'user_defined':
	  
	  > grep -A3 "Option user_defined" *.F90
	  simul_box.F90: !%Option user_defined 123
	  simul_box.F90- !% The shape of the simulation box will be read from the variable
	  <tt>BoxShapeUsDef</tt>
	  simul_box.F90- !%End
	  simul_box.F90- call loct_parse_int(check_inp('BoxShape'), MINIMUM, sb%box_shape)
	  --
	  specie.F90: !%Option user_defined 123
	  specie.F90- !% Specie with user defined potential. In this case, the fourth
	  specie.F90- !% field is the valence charge and the fifth
	  specie.F90- !% field is a string with a mathematical expresion that defines the
	  --
	  systm.F90: !%Option user_defined 123
	  systm.F90- !% The atomic magnetization densities are rotated so that the magnetization
	  systm.F90- !% vector has the same direction as a vector provided by the user. In this
	  case,
	  systm.F90- !% the <tt>AtomsMagnetDirection</tt> block has to be set.
	* [r1866] trunk/testsuite/finite_systems_2d/fock_darwin.test,
	  trunk/testsuite/periodic_systems_1d/cosine_potential.test,
	  trunk/testsuite/periodic_systems_1d/free_electrons.test, trunk/testsuite/rc_bugs/11-2dbox:
	  The tests were failing because 'user_defined' was not used.
	* [r1865] trunk/src/td_write.F90:
	  Bugfix: The option 'geometry' was defined twice: for the variable Output
	  and for TDOutput. The name clash did not show up so far, since in both
	  cases the variable had the same value by coincidence.

2006-03-03  marques

	* [r1864] trunk/src/simul_box.F90, trunk/src/specie.F90:
	  Some rearrangements in simul_box. Now, several variables can be read as either
	  blocks, or simple floats. This is the case of spacing, lsize, boxoffset. This
	  allows to simplify a little bit the input files (I will arrange the tests when I
	  have time).

2006-03-03  acastro

	* [r1863] trunk/liboct_parser/grammar.c:
	  The code now did not compile, since grammar.c does not have the new
	  definitions. The reason is that the file "grammar.c" is not built by
	  bison from grammar.y automatically -- this way the user does not have
	  to have bison.
	  
	  I regenerated grammar.c and commit it. Please check that everything is
	  fine...

2006-03-03  marques

	* [r1862] trunk/liboct_parser/grammar.y, trunk/liboct_parser/parse.c,
	  trunk/liboct_parser/parse_exp.c, trunk/src/h_inc.F90, trunk/src/mesh.F90,
	  trunk/src/simul_box.F90, trunk/src/specie.F90, trunk/src/systm.F90,
	  trunk/src/td_exp_split.F90, trunk/testsuite/finite_systems_1d/Hydrogen.test,
	  trunk/testsuite/finite_systems_2d/2dbox.test,
	  trunk/testsuite/finite_systems_2d/helium.test:
	  *) Added boolean operators to liboct_parser. Things like "<", ">", etc. now work.
	  *) Added the possibility to have a user defined box shape. This is controlled
	  by the variable BoxShapeUsDef. This is useful, e.g. when running funny
	  potentials with infinite walls (like corrals).
	  *) I had to change spec_usdef, etc. from 1 to 123. I changed the tests accordingly.

2006-03-03  appel

	* [r1860] trunk/src/out_inc.F90:
	  Some compiler don't support large format constants:
	  
	  Format error 106: Format integer constants > 32767 are not supported
	* [r1859] trunk/src/out.F90:
	  The variables.texi target in doc/Makefile.am was failing because I used { }
	  in the description of the variables (in plane_{x,y,z}).
	* [r1858] trunk/src/out.F90:
	  The Intel v7 compiler didn't like this parameter definition.
	* [r1857] trunk/src/out.F90, trunk/src/out_inc.F90:
	  o Removed the axis_{x,y,z} and plane_{x,y,z} functions. This was only
	  code repetition. The old functions have been replaced by out_axis
	  and out_plane.
	  
	  o Octopus has now a Matlab output mode. This was a feature request by
	  Esa Rasanen. The mode is suitable for 2D Matlab functions like mesh()
	  surf() or waterfall() and can therefore only be enabled in combination
	  with the output of planes, e.g.
	  
	  OutputHow = plane_x + matlab
	  
	  At the Matlab prompt the output files can be loaded and plotted via
	  
	  >> density = load('static/density-1.x=0.matlab.abs');
	  >> mesh(density)
	* [r1856] trunk/debian/control:
	  Updating build dependencies.

2006-03-02  acastro

	* [r1855] trunk/testsuite/finite_systems_3d/carbon.test:
	  Added one more test: the carbon atom, in spin-polarized form.
	  
	  There was no test that probled the spin-polarized form *with* non-local
	  pseudopotentials.
	* [r1854] trunk/Makefile.am, trunk/testsuite/Makefile.am:
	  Added a new makefile dependency:
	  "make check-full" runs the full suite of tests, both long and short runs.
	  
	  ("make check" only runs the tests tagged as short)
	* [r1853] trunk/src/ps.F90:
	  This commit addresses the problem of the different results between
	  spin-restricted and spin-unrestricted calculations.
	  
	  The problem goes back to some 15 months ago. At that point, the KB
	  projectors stopped being calculated by making use of atomic
	  wavefunctions obtained from atomic spin-restricted calculations, to
	  being calculated from the spin-up atomic wavefunctions obtained in
	  atomic spin-unrestricted calculations. This is the reason of the
	  difference.
	  
	  By looking at how I changed the code at that time, I think that it was
	  an undesired side-effect, and not a conscious change. The change was
	  inocuous for sodium (of course), and not too significant in many other
	  cases, but dramatic for Cobalt, for example.
	  
	  Now I have put back the old scheme.
	  
	  What do you think: should it be backported to 2.0?
	* [r1852] trunk/testsuite/Makefile.am:
	  "make check" runs now only the "short" tests. It makes use of
	  oct-run_testsuite -- don't know why I set it to use directly
	  oct-run_regression_test.pl before.
	* [r1851] trunk/src/linear_response.F90, trunk/src/xc_OEP.F90:
	  Bug fixed.
	  full EXX/OEP was failing with the NAG compiler on the opterons, due to
	  the typical intent(out)/intent(inout) error.
	* [r1850] trunk/testsuite/finite_systems_3d/jellium.test:
	  This test failed because the total energy number was wrong, not
	  because of the code.

2006-03-01  acastro

	* [r1849] trunk/testsuite/finite_systems_3d/jellium.test:
	  Sorry, stupid mistake in the previous commit.
	* [r1848] trunk/testsuite/finite_systems_3d/functionals.test,
	  trunk/testsuite/finite_systems_3d/jellium.test:
	  I changed the tags of the functionasl and jellium tests. Now they are
	  enabled, but tagged as "long-run", since they both take a few minutes.
	* [r1847] trunk/src/simul_box.F90:
	  OK, I think that now the radius thing is solved.
	  When using the "minimum" box_shape:
	  o If radius is given in input, it is used as the radius for all atoms.
	  o If radius is not given in input, then the default radius for each species
	  is used.
	  Now the tests seem to run again...
	* [r1846] trunk/testsuite/finite_systems_3d/functionals.test:
	  Added a test for some of the xc functionasl (EXX/OEP-KLI and EXX/OEP-full).
	  It calculates energies of some jellium clusters, and compares the numbers
	  with the results of some paper.
	  
	  Since it is rather slow, I tagged it as long-run, using the new feature
	  that Heiko just added.
	* [r1845] trunk/src/linear_response_inc.F90, trunk/src/xc_OEP_inc.F90:
	  Bug fixed.
	  Some NP problem did not permit to do full OEP calculations.
	* [r1844] trunk/src/geometry.F90:
	  Bug fixed.
	  The total energy of a jellium system was not properly calculated,
	  because it did not consider the electrostatic energy of the ionic
	  constant background. Now it does, although we still ignore the possible
	  interaction energy between two jellium spheres.
	* [r1843] trunk/src/simul_box.F90:
	  Bug fixed.
	  Some species may have a negative def_rsize, so that in that case it has to
	  use the default rsize.
	  helium.test was failing because of this. But there is still a bug in
	  restart.test, related also to this part of the code. I think it has to
	  do with the units.

2006-02-28  appel

	* [r1842] trunk/src/simul_box.F90:
	  Adding the "different spheres (when boxshape=minimum) for different types
	  of atoms" suggestion of Francesco and Angel, cf.
	  
	  http://tddft.org/pipermail/octopus-users/2006-February/000527.html
	* [r1841] trunk/src/mix.F90:
	  Bugfix: Deallocation was attempted for arrays that were not used in
	  the case of linear mixing. The excited state run of the Hydrogen test
	  was failing because of this. It seems that some compilers (e.g. NAG)
	  cannot cope with associated(...).
	* [r1840] trunk/src/string.F90:
	  Bugfix: s_out in str_center got out of bounds for long FCFLAGS.
	* [r1839] trunk/testsuite/finite_systems_1d/Hydrogen.test,
	  trunk/testsuite/finite_systems_2d/2dbox.test,
	  trunk/testsuite/finite_systems_2d/fock_darwin.test,
	  trunk/testsuite/finite_systems_2d/helium.test,
	  trunk/testsuite/finite_systems_3d/curvilinear.test,
	  trunk/testsuite/finite_systems_3d/jellium.test,
	  trunk/testsuite/finite_systems_3d/multigrid.test,
	  trunk/testsuite/finite_systems_3d/restart.test, trunk/testsuite/finite_systems_3d/so.test,
	  trunk/testsuite/finite_systems_3d/sodium.test,
	  trunk/testsuite/finite_systems_3d/spinors.test,
	  trunk/testsuite/periodic_systems_1d/cosine_potential.test,
	  trunk/testsuite/periodic_systems_1d/free_electrons.test,
	  trunk/testsuite/periodic_systems_1d/sodium_chain.test:
	  o tagging all tests as 'short-run'.
	  o switched from v1.99devel to v2.0.1devel.
	* [r1838] trunk/testsuite/oct-run_regression_test.pl, trunk/testsuite/oct-run_testsuite:
	  This implements basically the recent suggestion of Alberto:
	  
	  The testsuite is now aware of a new field called 'Runtime'.
	  For now I added the possibility to classify the tests as
	  'short-run' or 'long-run'. We can get it more granular if
	  required.
	  
	  You can run the short version via
	  
	  oct-run_testsuite -s
	  
	  and the full testsuite as usual with -f. The nightly testsuite
	  will of course run -f to capture all tests.
	  
	  Here the current timings[1] of the tests on one of our machines[2]
	  
	  0:08.92 2dbox.test
	  0:07.39 sodium.test
	  0:00.05 Hydrogen.test
	  0:05.88 restart.test
	  0:02.96 helium.test
	  0:12.87 curvilinear.test
	  0:13.70 multigrid.test
	  0:13.61 fock_darwin.test
	  0:00.01 so.test <- disabled
	  0:00.22 free_electrons.test
	  0:31.09 sodium_chain.test
	  0:09.66 spinors.test
	  0:00.13 cosine_potential.test
	  
	  Total:
	  
	  real 1m46.646s
	  user 1m44.818s
	  sys 0m1.310s
	  
	  [1] obtained via (sorry the command got a bit long):
	  
	  time for y in octopus octopus_cmplx; do for x in $(find /usr/share/octopus/testsuite -name
	  *.test | xargs grep ${y}$ | awk -F: '{print $1}'); do /usr/bin/time -f "%E - $(basename
	  $x)" oct-run_regression_test.pl -e /usr/bin/$y -f $x >/dev/null; done; done
	  
	  [2] Opteron 275, 2.2 GHz, NAG Compiler. Interestingly, a P4 with
	  3.2GHz using the Intel Compiler takes about 3min to complete
	  the testsuite!
	  
	  Alberto: It would be interesting to see the output of the above
	  line on the Power processors of MareNostrum :). Perhaps we could
	  use the Wiki to collect the output of [1] for different platforms.
	  
	  Should we add this as a profiling script to bin_SCRIPTS?
	  
	  
	  Personally I think, short tests should take below 30 sec (even on a
	  Laptop). Also long tests shouldn't overdo it just because they are
	  called long :). They should focus on what's really necceseary to
	  sample the code.
	  
	  I'm now collecting the data above on a daily basis with a cron job.
	  On a longer time scale this could serve as poor mans profiling of
	  the code, since we can see whether we improve the runtime in certain
	  parts of the code, or whether we screw it up.

2006-02-22  acastro

	* [r1837] trunk/src/specie.F90:
	  The code did not inform of the existence of any species that was not a
	  pseudopotential. Now it prints out a little information.
	* [r1836] trunk/testsuite/finite_systems_3d/jellium.test:
	  New test based on an external published results -- I think that we
	  should put quite a lot of these examples, this adds a feeling of
	  reliability ;)
	  
	  In this case I have put a jellium model of Na8. I will complete this
	  test with more results later (polarizability), and also with more
	  exchange and correlation functionals.
	  
	  However, the test is disconnected. The reason is that it takes a few
	  minutes to calculate. Maybe we should classify the tests, so that we
	  have a "fast" testsuite and a "complete" one.

2006-02-20  acastro

	* [r1835] trunk/src/mesh.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90:
	  I added a partial integration routine. That is, it integrates over N-1
	  coordinates in an N-dimensional problem. It can be used to see for example
	  how the density distributes along a given axis, or to extract the density
	  from the many-body wavefunction in the one-dimensional model of Helium.

2006-02-19  acastro

	* [r1834] trunk/testsuite/finite_systems_1d/helium.test,
	  trunk/testsuite/finite_systems_2d/helium.test:
	  I changed the Helium test slightly; I put two tests instead of one and
	  added some comments and references so that we can rely on "external
	  sources". Also, I put it under the 2d directory, since I think that
	  the important fact is that it is run in 2d mode, not that it describes
	  a 1d model.
	* [r1833] trunk/testsuite/finite_systems_1d/Hydrogen.test:
	  Added a real one-dimensional test (there were none, the helium.test
	  actually is run in the 2d mode).
	* [r1832] trunk/testsuite/oct-run_regression_test.pl.pod:
	  Forgot to remove this file.
	* [r1831] trunk/doc/Makefile.am, trunk/doc/oct-atomic_occupations.pod,
	  trunk/doc/oct-broad.pod, trunk/doc/oct-center-geom.pod, trunk/doc/oct-cross-section.pod,
	  trunk/doc/oct-display_partitions.pod, trunk/doc/oct-harmonic-spectrum.pod,
	  trunk/doc/oct-ph.pod, trunk/doc/oct-rsf.pod, trunk/doc/oct-run_periodic_table.pod,
	  trunk/doc/oct-run_regression_test.pl.pod, trunk/doc/oct-run_testsuite.pod,
	  trunk/doc/oct-xyz-anim.pod, trunk/doc/octopus.pod, trunk/testsuite/Makefile.am:
	  Added manual pages for all the executables that are installed along with
	  octopus. The idea is that "man x" should respond something for any x that
	  is installed.
	  Not that they have much information, nor are intended to provide a full
	  manual, but at least they should describe briefly what the program does,
	  and point to a better source of information.

2006-02-18  appel

	* [r1830] trunk/configure.ac, trunk/debian/changelog, trunk/doc/octopus.texi:
	  Development of octopus 2.1 begins. Switching to version 2.0.1devel and
	  tagging the package as unstable (used for the nightly builds).

2006-02-17  marques

	* [r1827] trunk/doc/authors.texi:
	  Authors were still not OK
	* [r1825] trunk/doc/octopus.texi:
	  Forgot this version number

2006-02-16  appel

	* [r1823] trunk/ChangeLog:
	  Updating the ChangeLog file to reflect all changes up to the release
	  of octopus 2.0.
	* [r1822] trunk/AUTHORS:
	  Adding current e-mail addresses.

2006-02-16  marques

	* [r1821] trunk/AUTHORS:
	  updated list
	* [r1820] trunk/external_libs/expokit/COPYING, trunk/external_libs/expokit/Copyright,
	  trunk/external_libs/metis-4.0/COPYING, trunk/external_libs/metis-4.0/Copyright:
	  Changed filenames from Copyright COPYING
	* [r1819] trunk/build/acx_metis.m4, trunk/configure.ac,
	  trunk/external_libs/metis-4.0/Makefile.am, trunk/liboct/Makefile.am, trunk/liboct/oct_f.c,
	  trunk/src/Makefile.am:
	  *) Metis is now only compiled when needed
	  *) changed version number to 2.0
	  *) octopus fails a couple of tests in my machine. I will take a look
	  before committing

2006-02-16  appel

	* [r1818] trunk/liboct/Makefile.am, trunk/liboct/oct_f.c:
	  The header file metis.h was still included as <metis/metis.h>. Now
	  we use the one that we ship in external_libs.
	* [r1817] trunk/debian/changelog:
	  Switching from 1.99devel to 2.0 for the upcoming release.
	* [r1816] trunk/build/acx_metis.m4, trunk/configure.ac:
	  I forgot to treat the HAVE_METIS properly, when I added the library to
	  external_libs. Now HAVE_METIS is enabled by default, but can be disabled
	  with --disable-metis at configure time.

2006-02-13  acastro

	* [r1815] trunk/src/spectrum.F90:
	  Bug fixed.
	  The units were not properly handled in the cross_section_tensor
	  subroutine.

2006-02-12  acastro

	* [r1814] trunk/testsuite/rc_bugs/12-spin:
	  Bug added.
	  Sorry, but I had to add another bug, I think that it is important.
	  See the explanation in the file. I will try to think about it the
	  next days, to solve it asap.

2006-02-09  appel

	* [r1813] trunk/src/liboct_parser.F90:
	  o Adding the full filename to the variables error message.
	  o Removing stdin stuff completely.
	* [r1812] trunk/Makefile.am:
	  There was a line continuation \ missing. During make install the share
	  and testsuite directories have not been taken into account.
	* [r1811] trunk/src/out.F90:
	  The compilation failed when using --with-netcdf. The netcdf module doesn't
	  have _m. Too much Perl :) ...
	* [r1810] trunk/COPYING:
	  Updating the top-level license file to account for Expokit and
	  Metis as 'external libraries'. I explicitely state in the text, that
	  both are _not_ GPL.
	  
	  Please have a look if you agree with the style.
	* [r1809] trunk/Makefile.am, trunk/configure.ac, trunk/expokit, trunk/external_libs,
	  trunk/external_libs/Makefile.am, trunk/external_libs/expokit,
	  trunk/external_libs/expokit/Copyright, trunk/external_libs/expokit/Makefile.am,
	  trunk/external_libs/expokit/expokit.f90, trunk/external_libs/metis-4.0,
	  trunk/external_libs/metis-4.0/Copyright, trunk/external_libs/metis-4.0/Makefile.am,
	  trunk/external_libs/metis-4.0/balance.c, trunk/external_libs/metis-4.0/bucketsort.c,
	  trunk/external_libs/metis-4.0/ccgraph.c, trunk/external_libs/metis-4.0/coarsen.c,
	  trunk/external_libs/metis-4.0/compress.c, trunk/external_libs/metis-4.0/debug.c,
	  trunk/external_libs/metis-4.0/defs.h, trunk/external_libs/metis-4.0/estmem.c,
	  trunk/external_libs/metis-4.0/fm.c, trunk/external_libs/metis-4.0/fortran.c,
	  trunk/external_libs/metis-4.0/frename.c, trunk/external_libs/metis-4.0/graph.c,
	  trunk/external_libs/metis-4.0/initpart.c, trunk/external_libs/metis-4.0/kmetis.c,
	  trunk/external_libs/metis-4.0/kvmetis.c, trunk/external_libs/metis-4.0/kwayfm.c,
	  trunk/external_libs/metis-4.0/kwayrefine.c, trunk/external_libs/metis-4.0/kwayvolfm.c,
	  trunk/external_libs/metis-4.0/kwayvolrefine.c, trunk/external_libs/metis-4.0/macros.h,
	  trunk/external_libs/metis-4.0/match.c, trunk/external_libs/metis-4.0/mbalance.c,
	  trunk/external_libs/metis-4.0/mbalance2.c, trunk/external_libs/metis-4.0/mcoarsen.c,
	  trunk/external_libs/metis-4.0/memory.c, trunk/external_libs/metis-4.0/mesh.c,
	  trunk/external_libs/metis-4.0/meshpart.c, trunk/external_libs/metis-4.0/metis.h,
	  trunk/external_libs/metis-4.0/mfm.c, trunk/external_libs/metis-4.0/mfm2.c,
	  trunk/external_libs/metis-4.0/mincover.c, trunk/external_libs/metis-4.0/minitpart.c,
	  trunk/external_libs/metis-4.0/minitpart2.c, trunk/external_libs/metis-4.0/mkmetis.c,
	  trunk/external_libs/metis-4.0/mkwayfmh.c, trunk/external_libs/metis-4.0/mkwayrefine.c,
	  trunk/external_libs/metis-4.0/mmatch.c, trunk/external_libs/metis-4.0/mmd.c,
	  trunk/external_libs/metis-4.0/mpmetis.c, trunk/external_libs/metis-4.0/mrefine.c,
	  trunk/external_libs/metis-4.0/mrefine2.c, trunk/external_libs/metis-4.0/mutil.c,
	  trunk/external_libs/metis-4.0/myqsort.c, trunk/external_libs/metis-4.0/ometis.c,
	  trunk/external_libs/metis-4.0/parmetis.c, trunk/external_libs/metis-4.0/pmetis.c,
	  trunk/external_libs/metis-4.0/pqueue.c, trunk/external_libs/metis-4.0/proto.h,
	  trunk/external_libs/metis-4.0/refine.c, trunk/external_libs/metis-4.0/rename.h,
	  trunk/external_libs/metis-4.0/separator.c, trunk/external_libs/metis-4.0/sfm.c,
	  trunk/external_libs/metis-4.0/srefine.c, trunk/external_libs/metis-4.0/stat.c,
	  trunk/external_libs/metis-4.0/struct.h, trunk/external_libs/metis-4.0/subdomains.c,
	  trunk/external_libs/metis-4.0/timing.c, trunk/external_libs/metis-4.0/util.c,
	  trunk/src/Makefile.am:
	  Both, Expokit and the Metis library are now declared as external
	  libraries. The build system has been adapted accordingly to
	  reflect this change.
	  
	  The inclusion of Metis should now finally solve the build problems,
	  that people were encountering frequently with the MPI executable.

2006-02-09  acastro

	* [r1808] trunk/src/par_vec.F90, trunk/src/simul_box.F90:
	  Bug fixed.
	  Just an absolute value, but it created some awful problems.
	  I also put an ASSERT in par_vec at a point where, if it had been before,
	  it would have saved me quite a few hours to debug. Maybe it is useful
	  in the future.
	  This bug was pointed out by some Carlo Camilloni.

2006-02-09  appel

	* [r1807] trunk/src/atomic.F90, trunk/src/blas.F90, trunk/src/broad.F90,
	  trunk/src/casida.F90, trunk/src/centergeom.F90, trunk/src/cf.F90, trunk/src/cf_inc.F90,
	  trunk/src/cross_section.F90, trunk/src/crystal.F90, trunk/src/curv_briggs.F90,
	  trunk/src/curv_gygi.F90, trunk/src/curv_modine.F90, trunk/src/curvlinear.F90,
	  trunk/src/datasets.F90, trunk/src/derivatives.F90, trunk/src/derivatives_inc.F90,
	  trunk/src/eigen.F90, trunk/src/eigen_arpack.F90, trunk/src/eigen_cg.F90,
	  trunk/src/eigen_evolution.F90, trunk/src/eigen_plan.F90, trunk/src/eigen_trlan.F90,
	  trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/f.F90, trunk/src/f_inc.F90,
	  trunk/src/fftw2.F90, trunk/src/fftw3.F90, trunk/src/geom_opt.F90, trunk/src/geometry.F90,
	  trunk/src/global.F90, trunk/src/grid.F90, trunk/src/gs.F90, trunk/src/h.F90,
	  trunk/src/h_inc.F90, trunk/src/h_so.F90, trunk/src/hgh.F90, trunk/src/hs.F90,
	  trunk/src/io.F90, trunk/src/lasers.F90, trunk/src/lcao.F90, trunk/src/liboct.F90,
	  trunk/src/liboct_parser.F90, trunk/src/libxc.F90, trunk/src/linalg_adv.F90,
	  trunk/src/linalg_basic.F90, trunk/src/linear_response.F90,
	  trunk/src/linear_response_inc.F90, trunk/src/logrid.F90, trunk/src/main.F90,
	  trunk/src/math.F90, trunk/src/mesh.F90, trunk/src/mesh_init.F90, trunk/src/mesh_lib.F90,
	  trunk/src/messages.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90, trunk/src/mix.F90,
	  trunk/src/mpi.F90, trunk/src/mpi_debug.F90, trunk/src/multicomm.F90,
	  trunk/src/multigrid.F90, trunk/src/nl_operator.F90, trunk/src/ode_solver.F90,
	  trunk/src/ode_solver_inc.F90, trunk/src/opt_control.F90, trunk/src/out.F90,
	  trunk/src/out_inc.F90, trunk/src/par_vec.F90, trunk/src/par_vec_inc.F90,
	  trunk/src/pes.F90, trunk/src/pes_mask.F90, trunk/src/pes_rc.F90,
	  trunk/src/phonon_spectrum.F90, trunk/src/phonons.F90, trunk/src/poisson.F90,
	  trunk/src/poisson1D.F90, trunk/src/poisson2D.F90, trunk/src/poisson3D.F90,
	  trunk/src/poisson_cg.F90, trunk/src/poisson_corrections.F90,
	  trunk/src/poisson_multigrid.F90, trunk/src/profiling.F90, trunk/src/ps.F90,
	  trunk/src/pulpo.F90, trunk/src/restart.F90, trunk/src/restart_inc.F90,
	  trunk/src/root_solver.F90, trunk/src/root_solver_inc.F90,
	  trunk/src/rotational_strength.F90, trunk/src/run.F90, trunk/src/scalar_mesh.F90,
	  trunk/src/scf.F90, trunk/src/simul_box.F90, trunk/src/sparskit.F90,
	  trunk/src/sparskit_driver.F90, trunk/src/sparskit_inc.F90, trunk/src/specie.F90,
	  trunk/src/spectrum.F90, trunk/src/spline.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/states_kpoints.F90, trunk/src/static_pol.F90,
	  trunk/src/static_pol_lr.F90, trunk/src/stencil_cube.F90, trunk/src/stencil_star.F90,
	  trunk/src/stencil_starplus.F90, trunk/src/stencil_variational.F90, trunk/src/string.F90,
	  trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_exp.F90,
	  trunk/src/td_exp_split.F90, trunk/src/td_init.F90, trunk/src/td_rti.F90,
	  trunk/src/td_write.F90, trunk/src/tm.F90, trunk/src/units.F90, trunk/src/unocc.F90,
	  trunk/src/v_ks.F90, trunk/src/v_ks_inc.F90, trunk/src/varinfo.F90,
	  trunk/src/wave_matching.F90, trunk/src/xc.F90, trunk/src/xc_KLI.F90, trunk/src/xc_OEP.F90,
	  trunk/src/xc_OEP_SIC.F90, trunk/src/xc_OEP_inc.F90, trunk/src/xc_OEP_x.F90,
	  trunk/src/xc_axc.F90, trunk/src/xc_functl.F90, trunk/src/xc_fxc.F90, trunk/src/xc_kxc.F90,
	  trunk/src/xc_vxc.F90, trunk/src/xyz_adjust.F90, trunk/src/xyz_file.F90,
	  trunk/src/xyzanim.F90:
	  The MVAPICH implementation has serious I/O problems when one of the
	  modules in the code is called 'system'. Besides the problem with reading
	  from stdin, this was the main issue in Sahu's problem report. I spent
	  more than a day to figure this out. Also thanks again to Sahu for his
	  patience, while we were debugging this issue.
	  
	  As there were some thoughts on this previously, I take the opportunity
	  to rename all modules according to
	  
	  sample/sample_mod -> sample_m
	  
	  Similarly all types have been converted according to
	  
	  sample_type -> sample_t
	  
	  This is actually Linux kernel convention :).
	* [r1806] trunk/src/liboct_parser.F90:
	  Some MPI implementations, e.g. the MVAPICH implementation for infiniband
	  interconnects, do not forward stdin to all compute nodes. This problem was
	  initially reported by Sahu on the octopus-users mailing list and recently
	  showed up in a second posting.
	  
	  Reading the input file from stdin via e.g.
	  
	  octopus < Na2
	  
	  is now disabled. This caused too many confusions, even in the serial case.
	  Often people already had a file with name 'inp' in the working directory
	  while trying to read the input via '<'. In that case they got tricked by
	  the precedence.
	  
	  Octopus is now printing an error message, mentioning that reading input
	  from stdin is deprecated.

2006-02-06  acastro

	* [r1805] trunk/src/messages.F90:
	  The write_warning and write_fatal were writing an awkard
	  "WARNING: From Node x", with no information afterwards, from all the nodes.
	  Only node zero was really printing the information.
	  
	  Maybe in the future we should allow for a way for all non-head nodes to
	  write warning and fatal errors.

2006-02-05  acastro

	* [r1804] trunk/src/atomic.F90, trunk/src/hgh.F90, trunk/src/tm.F90:
	  Not really a bug fix.
	  The problem with the Gadolinium bug report ("rc_bugs/07-Atomic_Gd") is
	  deep in the "egofv" routine, and I don't quite understand it. What I have
	  done is:
	  - for HGH pseudopotentials, the atomic wavefunctions are not strictly
	  neccesary, so if they are not found, they are just not used. "egofv" does
	  no longer kill the program, but passes back an error flag and the program
	  emits a warning. The program can no longer do LCAO, but hopefully it could
	  converge. I could not try it in the case of Gadolinium, because in any
	  case the memory needed to get all the projectors is so large that it does
	  not fit in my laptop.
	  - for TM pseudopotentials, the wavefunctions are needed to build the
	  projectors. So if the error is produced, the program stops. But the error
	  message emitted now is more friendly than before.
	  
	  In any case, the proper solution to these issues will have to be done for
	  next release.

2006-02-04  acastro

	* [r1803] trunk/src/mesh_init.F90, trunk/testsuite/rc_bugs/08-TDELF_C2H4:
	  Bug fixed.
	  
	  This bug was the one reported in 08-TDELF_C2H4, which I remove. The input
	  of the file was not consistent any more, in any case.
	  
	  The bug showed up when trying to write a dx file. There was a seg-fault
	  whent trying to pass the mesh to a cube, and I traced it back to be some
	  kind of round-off error in the point that I changed in mesh_init. Probably
	  it is a quick and dirty trick, but we should leave a deeper clarification
	  of the mesh module for after the release.
	* [r1802] trunk/src/poisson.F90:
	  Bug fixed.
	  Some compilers (intel) seem to have problems manipulating big 3D arrays.
	* [r1801] trunk/src/out_inc.F90:
	  Bug fixed.
	  Under some circumstances, this bug stopped some parallel runs in
	  marenostrum. I don't know why it did not show up always.

2006-02-03  acastro

	* [r1800] trunk/src/systm.F90:
	  The argument parallel_mask of system_init was flagged as optional.
	  Then the internal argument parallel_mask_ was set to be equal to
	  parallel_mask when it was present, as usual... except that then it was
	  not used.
	  Instead of fixing this, I noticed that system_init is only called once,
	  and parallel_mask was passed. So no need for an optional argument there.
	* [r1799] trunk/src/run.F90:
	  (Possible) bug fixed:
	  The variable mode (now parallel_mask), used in the routine
	  get_mode_parallelized (now renamed to get_parallel_mask), was not
	  initialized to 0. Some compilers do not initialize variables to 0, so
	  this could cause trouble.

2006-02-02  acastro

	* [r1798] trunk/liboct_parser/parse.c, trunk/liboct_parser/parser_f.c:
	  Bug fixed.
	  * parse_block_string function (file parse.c): I think that it should
	  return an error code whatever is read is not a string. For other case
	  it is OK to convert, but not in this case.
	  * parse_block_error (file parser_f.c): I am not sure about this one.
	  I uncommented the exit function. I believe that the code should stop
	  if an error is encountered. But whoever commented that code probably had
	  reasons for it, so take a look, maybe I am wrong.
	  
	  Now the code seg-faulted if a non-string was found where a string should
	  be found.
	  
	  For next release we have to improve the input error handling.

2006-01-31  acastro

	* [r1797] trunk/libxc/gga_lb.c, trunk/testsuite/rc_bugs/05-Na2_LB94_Casida:
	  Bug fixed.
	  Removed the 05-Na2_LB94_Casida bug.
	  The LB94 is still rather under suspiscion, in any case.
	  
	  I don't know why the bug was there, in fact, it looked that the code
	  that I removed was there for a reason, but I could not trace it down
	  because it was there since the first revision...

2006-01-30  acastro

	* [r1796] trunk/doc/Makefile.am:
	  Bug fixed.
	  The compilation of octopus depended on the existence of emacs. I think
	  this should not be the case, so I changed the Makefile.am in order
	  that if emacs is not found, octopus.info is not attempted to be rebuilt.
	  This way the compilation proceeds.

2006-01-26  appel

	* [r1795] trunk/liboct_parser/parser_f.c:
	  Correcting cut'n paste error that was found by Francesco Sottile.

2006-01-22  appel

	* [r1794] trunk/src/casida.F90, trunk/src/run.F90:
	  Removing unused variables.
	* [r1793] trunk/share/util/Makefile.am, trunk/share/util/display_partitions.sh,
	  trunk/share/util/oct-display_partitions:
	  Renaming display_partitions.sh to oct-display_partitions and adding
	  it to bin_SCRIPTS.

2006-01-14  acastro

	* [r1792] trunk/src/epot.F90:
	  The code should stop if a magnetic field is required, but the executable
	  is the one that only has real wavefunctions.

2006-01-13  xavier

	* [r1791] trunk/src/static_pol_lr.F90:
	  Only a small modification, I was multiplying and the diving by the same number.

2006-01-12  acastro

	* [r1790] trunk/src/epot.F90, trunk/src/global.F90, trunk/src/h_inc.F90:
	  Bug fixed.
	  
	  There was no definition of the gyromagnetic ratio; now it is input by
	  variable "GyromagneticRatio". Of course it is, in principle, a physical
	  constant, but this led to an error when calculating the Zeeman term of
	  quantum dots, which should use an "effective" gyromagnetic ratio.
	  
	  I still have some doubts about factors and signs in the Zeeman term.

2006-01-12  xavier

	* [r1789] trunk/src/static_pol_lr.F90:
	  * The hyperpolarizability tensor now is symmetrized by taking the average of
	  all the corresponding components.
	  
	  * Now the output file only contains the components that are different.

2006-01-12  micael

	* [r1788] trunk/configure.ac, trunk/src/Makefile.am:
	  *) Bug fix: disable-debug mode was not working.
	* [r1787] trunk/src/v_ks_inc.F90, trunk/testsuite/finite_systems_3d/spinors.test:
	  *) There was a bug in the calculation of the expectation value of the
	  exchange-correlation potential.

2006-01-11  micael

	* [r1786] trunk/src/epot_inc.F90, trunk/src/h_so.F90, trunk/testsuite/rc_bugs/12-spin_orbit:
	  *) Spin-orbit bug fixed.

2006-01-11  appel

	* [r1785] trunk/src/simul_box.F90:
	  Bug fixed: The array lsize in simul_box_in_box had a wrong index. When
	  running with BoxShape = parallelepiped the mesh was not symmetric around
	  the origin (in z-direction) and had the wrong size.

2006-01-04  acastro

	* [r1784] trunk/src/td_rti.F90, trunk/testsuite/finite_systems_3d/restart.test,
	  trunk/testsuite/rc_bugs/10-Restart:
	  Bug fixed.
	  Another one of the NP/NP_PART that so much fun we are having with.
	  It affected the "etrs" evolution method.
	  
	  Now the restart.test is finally fully passed, so I enabled it back, and
	  removed the rc_bugs/10-Restart file.
	* [r1783] trunk/src/xc_vxc.F90, trunk/testsuite/finite_systems_2d/2dbox.test,
	  trunk/testsuite/rc_bugs/11-2dbox:
	  Bug fixed.
	  
	  This one was pretty serious, since it affected all the spin-polarized
	  calculations, at least in some computers, such as in the Berlin
	  opteron cluster. It was the reason that some of the tests were
	  disabled.
	  
	  Now the 2dbox.test and the first two matches of the restart.test are
	  passed OK in the opteron. However, the last two matches of the
	  restart.test are not passed in the opteron, due to some other
	  different bug (so I did not enable it again), and the 2dbox.test fails
	  in my PC. This is why although I enabled again 2dbox.test, I do not
	  remove its file in the rc_bugs directory.

2005-12-28  acastro

	* [r1782] trunk/src/poisson.F90:
	  Just one warning.
	  
	  It has to do with the bug reported by Francesco Sottile, about divergent
	  results with some 1.99 version and the rc1. In fact, there is no such
	  difference, but the fact that the cg_corrected Poisson solver gives
	  wrong results when using the "minimum" box shape. The two runs reported
	  by Francesco were done with different solvers: fft and cg_corrected.
	  
	  I have been trying to figure out if it is a bug, but I am starting to think
	  it is a fact: the method gives poor results with odd box geometries. This
	  is why I thought about putting a warning/disclaimer, so that users don't
	  get too mad, or screw them if they do.
	  
	  I always thought that cg and cg_corrected were essentialy equivalent in the
	  error that they provided, the difference being that the latter is faster.
	  But it seems not to be true; the cg method seems to behave better with
	  odd geometries. That is why in the warning I recommend using cg.
	  
	  In any case I will try to investigate why and how this happens.

2005-12-20  acastro

	* [r1781] trunk/src/scf.F90:
	  The clean_stop was not working during the SCF procedure since it actually
	  was called twice -- one for checking and then to really exit the SCF loop.
	  Since now the function erases the "stop" file, the second call found no
	  file at all.

2005-12-20  xavier

	* [r1780] trunk/src/static_pol_lr.F90:
	  Correction of an error message.

2005-12-19  marques

	* [r1779] trunk/src/Makefile.am:
	  Added integer.F90 to the Makefile so that it is included in the .tar.gz

2005-12-19  acastro

	* [r1778] trunk/src/geometry.F90, trunk/src/xyz_file.F90:
	  Corrected the bugs pointed out by Carlo Camilloni.
	  I just had to apply the patches that he had suggested, I think that they
	  were just what was needed.

2005-12-17  marques

	* [r1777] trunk/doc/img/elf.eps, trunk/doc/img/laser.eps, trunk/doc/img/pi02.eps,
	  trunk/doc/img/pi03.eps, trunk/doc/img/pi04.eps, trunk/doc/img/spacing.eps,
	  trunk/doc/img/spacing.ps, trunk/doc/pdf/Makefile.am, trunk/doc/pdf/tutorial.pdf,
	  trunk/doc/tutorial.tex:
	  The tutorial was moved to the wiki. Therefore, I delete the corersponding files from the
	  distribution.

2005-12-16  marques

	* [r1776] trunk/doc/pdf/Makefile.am:
	  References to octopus-devel removed
	* [r1775] trunk/doc/Makefile.am:
	  References to octopus-devel removed.
	* [r1774] trunk/doc/octopus-devel.info, trunk/doc/octopus-devel.texi,
	  trunk/doc/octopus.info, trunk/doc/octopus.texi, trunk/doc/pdf/octopus-devel.pdf:
	  The information contained in the -devel.texi file was passed to the wiki. Therefore I am
	  deleting these files.

2005-12-12  appel

	* [r1773] trunk/doc/html/Makefile.am:
	  make was aborting, probably just a typo:
	  make[3]: *** No rule to make target `vars/*', needed by `all-am'. Stop.
	  
	  I replaced vars/* by vars*

2005-12-12  marques

	* [r1772] trunk/doc/pdf/octopus-devel.pdf, trunk/doc/pdf/octopus.pdf,
	  trunk/doc/pdf/tutorial.pdf:
	  The pdfs are now updated
	* [r1771] trunk/build/octopus.spec.in, trunk/doc/Makefile.am, trunk/doc/html/Makefile.am,
	  trunk/share/util/Makefile.am, trunk/src/Makefile.am, trunk/testsuite/Makefile.am:
	  There were several "bugs" in the Makefiles that made "make rpm" not work.
	* [r1770] trunk/configure.ac:
	  Added one Makefile.am
	* [r1769] trunk/configure.ac, trunk/doc/octopus.texi:
	  As Heiko suggested, I removed the "_" from the version number
	* [r1768] trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/h_inc.F90,
	  trunk/src/states_inc.F90, trunk/src/v_ks_inc.F90, trunk/src/xc_functl.F90:
	  some cleaning... nothing really important, except that I changed index->iatom in the
	  projector_type.
	* [r1767] trunk/configure.ac, trunk/doc/octopus.texi:
	  Retagged 1.88->2.0_rc1

2005-12-11  marques

	* [r1766] trunk/src/spectrum.F90:
	  Bug fixed. BTW, the _info routines in this file are all terribly similar. Can we somehow
	  merge them into one?

2005-12-08  micael

	* [r1765] trunk/testsuite/rc_bugs/12-spin_orbit:
	  *) Adding a bug file: spin-orbit is sometimes causing a segfault.

2005-12-08  marques

	* [r1764] trunk/src/mix.F90, trunk/src/td_write.F90:
	  These continuation lines were skrewing my octopus analyzer tool. Please try
	  not tu use "&" inside a type definition.

2005-12-07  appel

	* [r1763] trunk/testsuite/oct-run_regression_test.pl:
	  Forgot $ in front of opt_m.
	* [r1762] trunk/testsuite/rc_bugs/02-Na_Chain:
	  This input file is by now running properly and can be removed.
	* [r1761] trunk/testsuite/oct-run_regression_test.pl:
	  Added option -m which allows to perform only the matches of
	  a given test without running the code. This turned out to be
	  useful for checking the numbers in an existing working
	  directory.
	* [r1760] trunk/src/gs.F90, trunk/src/lcao.F90, trunk/src/scf.F90, trunk/src/unocc.F90:
	  In my opinion this is definitely a compiler bug of the NAG
	  compiler. If the arguments of the routine lcao_wf are not
	  sorted according to their intent flavour, the compiler creates
	  an executable that produces non-deterministic! output, i.e.
	  you can run the very same executable with the very same input
	  several times from scratch and you get different numbers
	  (probably some garbage numbers from memory were collected).
	  This was very akward to debug. Especially since I had to run
	  the code xillion times, as not every run was giving the wrong
	  numbers ...
	  Finally I wasted a full day on this :(, but at least the
	  3D/1D periodic stuff is now running properly on 64Bit and
	  one of the tests in rc_bugs can be removed.
	  
	  Probably it is a good idea to sort all other arguments that
	  are passed to the routines in the code in a similar fashion.
	* [r1759] trunk/testsuite/periodic_systems_1d/sodium_chain.test:
	  Adding a test for a chain of sodium atoms. Finally we have
	  the first realistic test for 3D/1D periodic systems. To speed
	  up the runtime of the test I had to stop the SCF cycle after
	  one step, i.e. be careful, the results are not converged.

2005-12-07  marques

	* [r1758] trunk/src/multicomm.F90:
	  Thre was a bug in the distribution of the nodes that made the code crash with
	  some combination of number of nodes.

2005-12-07  appel

	* [r1757] trunk/debian/info:
	  Remove octopus-faq.info from the build system.

2005-12-06  acastro

	* [r1756] trunk/src/casida.F90:
	  Bug fixed.
	  The casida module was breaking when using non-interacting electrons.
	  It is a bit absurd to run the casida module with non-interacting electrons,
	  but it is nice for testing, and the program should not break like that
	  in any case.
	* [r1755] trunk/src/scf.F90:
	  I guess that line was there just for debugging...

2005-12-06  marques

	* [r1754] trunk/doc/Makefile.am, trunk/doc/installation.texi, trunk/doc/octopus-faq.info,
	  trunk/doc/octopus-faq.texi, trunk/doc/octopus.info, trunk/doc/octopus.texi:
	  Removed octopus-faq and some info from octopus.texi that are now in the wiki.

2005-12-04  marques

	* [r1753] trunk/src/datasets.F90, trunk/src/syslabels.F90:
	  This file was rename from src/syslabels.F90 to src/datasets.F90 as explained
	  in the previous commit.
	* [r1752] trunk/src/Makefile.am, trunk/src/broad.F90, trunk/src/casida.F90,
	  trunk/src/centergeom.F90, trunk/src/cross_section.F90, trunk/src/curv_briggs.F90,
	  trunk/src/curv_gygi.F90, trunk/src/curv_modine.F90, trunk/src/curvlinear.F90,
	  trunk/src/derivatives.F90, trunk/src/eigen.F90, trunk/src/fftw2.F90, trunk/src/fftw3.F90,
	  trunk/src/geom_opt.F90, trunk/src/geometry.F90, trunk/src/gs.F90, trunk/src/h.F90,
	  trunk/src/hs.F90, trunk/src/io.F90, trunk/src/lasers.F90, trunk/src/linear_response.F90,
	  trunk/src/main.F90, trunk/src/math.F90, trunk/src/messages.F90, trunk/src/mix.F90,
	  trunk/src/mpi_debug.F90, trunk/src/multicomm.F90, trunk/src/ode_solver.F90,
	  trunk/src/opt_control.F90, trunk/src/out.F90, trunk/src/out_inc.F90,
	  trunk/src/phonon_spectrum.F90, trunk/src/phonons.F90, trunk/src/poisson_multigrid.F90,
	  trunk/src/profiling.F90, trunk/src/restart.F90, trunk/src/restart_inc.F90,
	  trunk/src/root_solver.F90, trunk/src/rotational_strength.F90, trunk/src/run.F90,
	  trunk/src/scalar_mesh.F90, trunk/src/scf.F90, trunk/src/simul_box.F90,
	  trunk/src/sparskit.F90, trunk/src/specie.F90, trunk/src/spectrum.F90,
	  trunk/src/states.F90, trunk/src/static_pol.F90, trunk/src/static_pol_lr.F90,
	  trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_write.F90, trunk/src/units.F90,
	  trunk/src/unocc.F90, trunk/src/v_ks.F90, trunk/src/wave_matching.F90, trunk/src/xc.F90,
	  trunk/src/xc_functl.F90, trunk/src/xyz_adjust.F90, trunk/src/xyz_file.F90,
	  trunk/src/xyzanim.F90, trunk/testsuite/periodic_systems_1d/cosine_potential.test,
	  trunk/testsuite/periodic_systems_1d/free_electrons.test:
	  *) I finally cleaned the run.F90 file. The reason is that, with the new changes
	  allowing for multi-parallelization, the ability to, e.g., run the gs if the
	  td calculation did not find the restart wave-functions had to be removed,
	  as there could be inconsistencies in the paralellization method. Now, if you
	  want to run both the gs and td in the same file, use the %CalculationMode
	  block.
	  *) I changed slightly the initialization of the old syslabels stuff, allowing
	  for sensible defaults for the variables. Now the only thing you really have
	  to say are the CalculationModes for each run. This implied changing the order
	  of the lines in the block (now modes, labels, and the order). You may have
	  to change you input files to reflect this change.
	  *) To make this multilpe runs useful, they had (sometimes) to share the same
	  tmp directory (otehrwise, one couldn't start a td calculation after a gs).
	  Until now they all had different tmps. Now by default they have all the same
	  "tmp", but this can be changed by the variable TmpDir.
	  *) I rename "syslabels" to "datasets". The reason is that ABINIT has this
	  multiple datasets for years, and they work more our less like ours. So I
	  thought it was a good idea to make the names more compatible.

2005-12-01  xavier

	* [r1751] trunk/src/static_pol_lr.F90:
	  Fixes in dynamic polarizability, now it gives the correct result for w = 0.

2005-11-30  micael

	* [r1750] trunk/share/util/vf.cfg, trunk/share/util/vf.net:
	  *) This is a DX program I wrote some time ago to plot vector fields (very usefull to
	  plot currents ;) Probably it could be greatly improved, or even merged into the
	  existing mf.net program, but for now I'm just commiting what I have.
	* [r1749] trunk/src/spectrum.F90:
	  *) Added the pre-factors that were missing from the complex rotatory strength function.
	  I also added two sum rules.

2005-11-30  marques

	* [r1748] trunk/src/epot.F90, trunk/src/epot_inc.F90:
	  I believe that this solves the problem of Carlo (please check). There was a
	  R_CONJ missing in the non-local part of the pseudopotential.

2005-11-30  rozzi

	* [r1747] trunk/src/static_pol_lr.F90:
	  Intel compiler was confused by unmatched single quote

2005-11-30  xavier

	* [r1746] trunk/src/static_pol_lr.F90:
	  * Dynamic polarizability is implemented but not tested yet.
	  * Now an array of lr objects is used instead of only one, indexes are
	  direction, sign and frequency.

2005-11-30  micael

	* [r1745] trunk/src/scf.F90:
	  *) Only the root node should output the local magnetic moments.

2005-11-30  marques

	* [r1744] trunk/src/cross_section.F90, trunk/src/hs.F90, trunk/src/spectrum.F90,
	  trunk/src/td_exp.F90, trunk/src/td_init.F90, trunk/src/td_rti.F90:
	  Rearranged a little the sections to which the variables belong to.
	* [r1743] trunk/liboct_parser/parser_f.c, trunk/share/variables.local, trunk/src/epot.F90,
	  trunk/src/xc.F90, trunk/src/xc_OEP.F90, trunk/src/xyz_adjust.F90:
	  *) Documented a couple more variables, and made the corresponding changes in
	  variables.local
	  *) Fixed a bug in parse_expression. There is a variable in symrec name def, that
	  defines if a variable has been defined, and that we should not forget to set.
	* [r1742] trunk/testsuite/finite_systems_1d/helium.test:
	  I don't see any reason why the helium test should not be done with th real
	  executable.
	* [r1741] trunk/testsuite/periodic_systems_1d/cosine_potential.test,
	  trunk/testsuite/periodic_systems_1d/free_electrons.test:
	  The Units should be "a.u" and not a.u. As this is the default value, I took
	  away those lines.

2005-11-29  appel

	* [r1740] trunk/src/Makefile.am:
	  Forgot oct-make-st in EXTRA_PROGRAMS.
	* [r1739] trunk/src/Makefile.am:
	  make_st can also be removed from Makefile.am.
	* [r1738] trunk/liboct_parser/parser_f.c, trunk/liboct_parser/symbols.c,
	  trunk/src/liboct_parser.F90, trunk/src/make_st.F90, trunk/src/specie.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/td.F90:
	  I know that we are actually in feature freeze. But I believe
	  that this is a must have feature for every td code: there is
	  now the possibility to specify arbitrary user defined orbitals
	  as initial states for the time propagation.
	  
	  Similar to user defined species this is done with formula
	  strings in the input file:
	  
	  %UserDefinedStates
	  1 | 1 | 1 | "exp(-r^2)*exp(-i*0.2*x)"
	  %
	  
	  The first three columns specify dim, nst and nik value of the
	  respective orbital. The last column specifies the formula for
	  the orbital. Normalization constants are not required as the
	  code takes care of that after reading the formula. Also note,
	  that the parser now accepts "i" for the imaginary unit.
	  
	  Currently octopus reads all orbitals from the restart_gs
	  directory and only the ones specified in the above block will
	  be replaced in the restart_gs determinant. Combined with
	  ExtraStates this can be used e.g. to setup scattering states.
	  The modifications also obsolete the make_st program.
	* [r1737] trunk/src/restart.F90:
	  Only the root node should delete the stop file.
	* [r1736] trunk/src/out.F90, trunk/src/out_inc.F90:
	  Using 'e' in the default Fortran output format causes for very
	  small numbers output like 9.43732460066152-133 instead of
	  9.43732460066152E-133. Gnuplot cannot cope with the missing E.
	  Therefore I switched to 'f' in gnuplot_mode.
	* [r1735] trunk/src/messages.F90:
	  The debug mode was extremely slow for the MPI executable. Now
	  the debug_trace files in the debug directory are written only
	  if DebugLevel >= 100. For smaller values only the root node
	  writes to stderr.
	* [r1734] trunk/src/string.F90:
	  Added routine to convert Fortran strings to C strings.
	* [r1733] trunk/src/lcao.F90:
	  To deallocate only X(psi) a full fledged states_end() was called
	  in lcao_end. However, since there is no states_init() in lcao_init()
	  there were some arrays not available. I got segfaults due to
	  this (although this shouldn't happen since states_end() checks
	  if the pointers are associated. Perhaps a compiler bug?).
	* [r1732] trunk/src/io.F90:
	  Now also flush_messages can be enabled/disabled on the fly. Simply
	  touch the files enable_flush_messages/disable_flush_messages.

2005-11-29  marques

	* [r1731] trunk/src/epot.F90, trunk/src/fftw3.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_init.F90:
	  A phase was wrong in the code. The most important thing was a minus sign
	  missing. I believe that the potential is OK now.

2005-11-28  xavier

	* [r1730] trunk/src/spectrum.F90:
	  There was a problem reading the multipoles file in spectrum_hs_from_mult.

2005-11-28  marques

	* [r1729] trunk/src/spectrum.F90:
	  There were a couple of '#' missing, which made oct-cross-section crash while
	  readin the _vector files. I also took the opportunity of removing several
	  lines that gave warning with ifc7.
	* [r1728] trunk/src/td_rti.F90:
	  removed some unused lines of code.
	* [r1727] trunk/liboct_parser/grammar.y, trunk/liboct_parser/parse.c,
	  trunk/liboct_parser/parse_exp.c, trunk/liboct_parser/symbols.c,
	  trunk/liboct_parser/symbols.h, trunk/src/poisson_multigrid.F90, trunk/src/td_exp.F90,
	  trunk/src/td_rti.F90:
	  *) Added a very tiny feature to the parser. Now it will stop with a input
	  error if one attempts to use a variable that has not been defined. This
	  avoids misspells in the input file to be acepted as valid inputs.
	  (most of the diff is whitespace, as the files were indented with tabs,
	  when they should be indent with spaces)
	  *) This allowed to find a couple of variables that were using "-". This is
	  forbidden, as he "-" is going to be confused with the minus sign. For
	  example, suzuki-troter is read as "suzuki" - "troter", and as these two
	  variables have not been defined (i.e. are 0), the result will be 0, and
	  not the expected value.
	* [r1726] trunk/libxc/lda.c, trunk/libxc/lda_c_vwn.c, trunk/libxc/lda_x.c,
	  trunk/libxc/test.c:
	  *) very tiny bug corrected in VWN (one of the constants was wrong in the 5th digit)
	  *) fxc is now calculated numerically a bit better in case of the ferromagnetic gas.
	  Actually I don't really know how to handle this case properly, as fxc should diverge (at
	  least fx).

2005-11-27  appel

	* [r1725] trunk/testsuite/oct-run_regression_test.pl:
	  There was a \ missing. Without the \ the -c option was creating buggy
	  testfiles.
	* [r1724] trunk/testsuite/finite_systems_2d/2dbox.test,
	  trunk/testsuite/finite_systems_3d/restart.test, trunk/testsuite/rc_bugs/10-Restart,
	  trunk/testsuite/rc_bugs/11-2dbox:
	  There's something fishy with the precision on 64Bit. The last input in the
	  2dbox test takes currently 114 scf cycles to converge on x86_64 but requires
	  only 14 on i386. Also the eigenvalues and total energy come out differently.
	  Similar things apply to the last input file in restart.test.
	  
	  To avoid spamming of octopus-devel I've disabled both tests (Enabled: No)
	  and have copied them to the rc_bugs directory. Before we release this eventually
	  has to be sorted.

2005-11-26  acastro

	* [r1723] trunk/src/states.F90:
	  The output of the information of which node manages which KS states
	  was not good for the case where there is a combined parallelization
	  scheme. I have redone it; now it is also better since only root node
	  is doing the output, as it should be.
	  [I noticed this when doing a run with 128 processors: 32 domains and
	  four states groups. OK, I could only do a 10 minutes run in the debug
	  queue, but still, I think it is a record. The speedup, by the way,
	  was of about 80]
	* [r1722] trunk/src/profiling.F90, trunk/src/restart.F90, trunk/src/td.F90:
	  (*) Added the TIME_STEP tag to the profiling module.
	  (*) A little bug fixed also in that module.
	  (*) The clean_stop routine deletes the stop file, as Heiko suggested. I
	  also found it annoying, never remembered to delete it.

2005-11-25  appel

	* [r1721] trunk/src/io.F90, trunk/src/out_inc.F90, trunk/src/scf.F90, trunk/src/td.F90:
	  I found this quite useful for chasing bugs which were not showing
	  up immediately: There is now the possibility to enable/disable the
	  debug mode on the fly. Imagine a bug that shows up after 100 SCF
	  cycles. One definitely does not want to run the code all the way in
	  debug mode. The present modifications allow to run the first 99 cycles
	  in normal mode and to switch only then to debug mode.
	  
	  To enable the debug mode on the fly you have to touch a file with name
	  enable_debug_mode in the working directory, similarly to disable the
	  debug mode simply touch disable_debug_mode. Contrary to the stop file
	  the code takes care of the cleanup of the touched files in this case.
	  (should the code also take care of the cleanup of the stop file?)
	  What a pity that Fortran does not support signal handling ...
	  
	  If the code runs inside some queueing system which buffers output this
	  could also be used to quickly check if octopus is still doing reasonable
	  things or got e.g. stuck in an MPI deadlock.
	* [r1720] trunk/src/states.F90, trunk/testsuite/finite_systems_2d/fock_darwin.test,
	  trunk/testsuite/finite_systems_3d/restart.test:
	  Adjusting the failing tests to the new format.

2005-11-24  appel

	* [r1719] trunk/src/states.F90:
	  I just noticed that I unintentionally modified the format for the output of
	  the eigenvalues in my last commit. The altered format causes some tests to
	  fail (the matches don't work as intended).
	  I've now again changed the output of the eigenvalues, since in the spin-polarized
	  case more than 80 columns were used. Please have a look if you agree with the
	  new format (basically I use "up", "dn", "--" for spin up, spin down and spin
	  unpolarized respectively).
	  If you agree with the modification I volunteer to update the test files
	  accordingly.
	* [r1718] trunk/src/par_vec.F90:
	  Forgot to remove debug output.
	* [r1717] trunk/src/io.F90, trunk/src/mesh.F90, trunk/src/mesh_init.F90,
	  trunk/src/messages.F90, trunk/src/par_vec.F90, trunk/src/simul_box.F90,
	  trunk/src/states.F90, trunk/src/xc.F90, trunk/src/xc_functl.F90:
	  Support for FlushMessages was broken. When running in parallel filehandles
	  were not treated properly.
	  Instead of writing directly to some unit I've changed several places such
	  that they use the write_* functions.
	* [r1716] trunk/src/mesh_init.F90:
	  Array index was missing in the last commit.

2005-11-24  rozzi

	* [r1715] trunk/src/mesh.F90, trunk/src/mesh_init.F90:
	  Bug fixed in the building of the potential for periodic calculations: the box size was not
	  correct

2005-11-24  acastro

	* [r1714] trunk/src/mf_inc.F90:
	  Just some corrections of the push_sub argument, which seem to have
	  no relation to the actual subroutine name in many cases.

2005-11-24  marques

	* [r1713] trunk/src/td_rti.F90:
	  another NP NP_PART issue.
	* [r1712] trunk/src/nl_operator.F90:
	  Some cleaniong in nl_operator.F90. I think the routines _operate are more
	  readable now.
	* [r1711] trunk/src/derivatives.F90, trunk/src/eigen_trlan.F90, trunk/src/mesh_init.F90,
	  trunk/src/mf_inc.F90, trunk/src/multicomm.F90, trunk/src/nl_operator.F90,
	  trunk/src/out_inc.F90, trunk/src/poisson.F90, trunk/src/run.F90, trunk/src/systm.F90:
	  *) Cleaned the #if defined(HAVE_METIS) directives in the code. Now they only
	  appear in 2 or 3 places (where they are really needed)
	  *) The code now stops if you want to run in paralell in domains with a fft
	  poisson solver. This made me waste 30 minutes ;((
	  
	  Incidentally, I now get *exactly* the same result running in serial or in
	  parallel (and not only approximately like before). This means that it was
	  either a np<->np_part issue, or a problem with the HAVE_METIS (in fact there
	  were a couple of inconsistencies in the code)

2005-11-24  appel

	* [r1710] trunk/share/PP/defaults:
	  Updating the PP/defaults file for Cd since by now all elements
	  are included.

2005-11-24  marques

	* [r1709] trunk/share/PP/TM2/Cd.ascii:
	  Sorry, but this pseudo has problems, so I removed it.

2005-11-23  xavier

	* [r1708] trunk/src/linear_response_inc.F90, trunk/src/static_pol_lr.F90:
	  * Bugfix in linear response: Because density was put to zero before time,
	  the fxc term was not considered for the polarizability. This affected
	  calculations of polarizability and hyperopolarizability.
	  
	  * Added a check for DevelVersion to protect users from the dynamic
	  polarizability part which is not working.

2005-11-23  micael

	* [r1707] trunk/src/h_inc.F90:
	  *) Moved the Zeeman term from subroutine vlpsi to subroutine magnetic_terms
	  as it seems more apropriate.
	* [r1706] trunk/src/xc_axc.F90:
	  *) Some more np/np_part issues fixed.
	* [r1705] trunk/share/variables.local:
	  *) This two lines can now go away.
	* [r1704] trunk/src/xc_functl.F90:
	  *) Documented the current functionals.
	* [r1703] trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/scf.F90, trunk/src/v_ks_inc.F90:
	  *) Removed the current-current interaction from the CDFT hamiltonian, because it is
	  time-consuming and in practice it should be neglectable.

2005-11-23  appel

	* [r1702] trunk/src/states.F90:
	  Bug fixed. The bands were not written anymore.

2005-11-23  micael

	* [r1701] trunk/src/h_inc.F90:
	  *) Bug fixed: again a np/np_part issue. This time in the CDFT part.
	  *) Corrected another 1/2 factor that was wrong in the magnetic terms.

2005-11-22  appel

	* [r1700] trunk/src/Makefile.am, trunk/src/global.h, trunk/src/par_vec.F90,
	  trunk/src/poisson.F90, trunk/src/td_exp_split.F90:
	  These modifications of the build system allow for newline characters inside
	  CPP macros. This overcomes the problems with line truncation that we had with
	  some compilers.
	  I've chosen \newline as newline sequence as \n was colliding with things
	  like eg. \nabla inside comments.
	  The changes partially obsolete Alberto's m4 check for long lines. However,
	  I kept it since it is also used for conf%fcflags.
	* [r1699] trunk/src/v_ks_inc.F90:
	  Because of too long lines the code did not compile with the NAG compiler.

2005-11-21  acastro

	* [r1698] trunk/src/casida.F90:
	  Bug fixed.
	  The casida module was broken. Yet another np/np_part issue.

2005-11-21  marques

	* [r1697] trunk/src/eigen.F90, trunk/src/eigen_evolution.F90, trunk/src/eigen_plan.F90,
	  trunk/src/eigen_trlan.F90, trunk/src/epot.F90, trunk/src/epot_inc.F90,
	  trunk/src/f_inc.F90, trunk/src/fftw3.F90, trunk/src/geom_opt.F90, trunk/src/geometry.F90,
	  trunk/src/grid.F90, trunk/src/gs.F90, trunk/src/h.F90, trunk/src/h_inc.F90,
	  trunk/src/h_so.F90, trunk/src/hgh.F90, trunk/src/lasers.F90, trunk/src/lcao.F90,
	  trunk/src/linalg_adv_lapack.F90, trunk/src/linalg_basic_int.F90,
	  trunk/src/linear_response.F90, trunk/src/linear_response_inc.F90, trunk/src/logrid.F90,
	  trunk/src/make_st.F90, trunk/src/math.F90, trunk/src/math_cg_inc.F90,
	  trunk/src/math_inc.F90, trunk/src/mesh_init.F90, trunk/src/mf_inc.F90, trunk/src/mix.F90,
	  trunk/src/multicomm.F90, trunk/src/multigrid.F90, trunk/src/nl_operator.F90,
	  trunk/src/ode_solver_inc.F90, trunk/src/opt_control.F90, trunk/src/out_inc.F90,
	  trunk/src/par_vec.F90, trunk/src/par_vec_inc.F90, trunk/src/pes_mask.F90,
	  trunk/src/pes_rc.F90, trunk/src/phonons.F90, trunk/src/poisson.F90,
	  trunk/src/poisson1D.F90, trunk/src/poisson2D.F90, trunk/src/poisson3D.F90,
	  trunk/src/poisson_cg.F90, trunk/src/poisson_corrections.F90,
	  trunk/src/poisson_multigrid.F90, trunk/src/ps.F90, trunk/src/restart_inc.F90,
	  trunk/src/root_solver.F90, trunk/src/root_solver_inc.F90, trunk/src/scalar_mesh.F90,
	  trunk/src/scf.F90, trunk/src/sparskit_inc.F90, trunk/src/specie.F90,
	  trunk/src/spectrum.F90, trunk/src/spline.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/states_kpoints.F90, trunk/src/static_pol.F90,
	  trunk/src/static_pol_lr.F90, trunk/src/stencil_star.F90, trunk/src/systm.F90,
	  trunk/src/td_calc.F90, trunk/src/td_exp.F90, trunk/src/td_exp_split.F90,
	  trunk/src/td_rti.F90, trunk/src/td_write.F90, trunk/src/tm.F90, trunk/src/unocc.F90,
	  trunk/src/v_ks_inc.F90, trunk/src/xc_KLI.F90, trunk/src/xc_OEP.F90,
	  trunk/src/xc_OEP_SIC.F90, trunk/src/xc_OEP_inc.F90, trunk/src/xc_axc.F90,
	  trunk/src/xc_fxc.F90, trunk/src/xc_kxc.F90, trunk/src/xc_vxc.F90, trunk/src/xyz_file.F90:
	  I changed the rest of the allocate -> ALLOCATE. Now all the code has some
	  rudimentary memory allocation error checks. I am still not very happy about
	  this solution. I have plans to improve it (allowing also for statistics)
	  but this will have to wait for the next version.

2005-11-20  xavier

	* [r1696] trunk/testsuite/rc_bugs/09-H2O_POL:
	  Removed input file from bug that was fixed in the previous commit.
	* [r1695] trunk/doc/octopus-devel.info, trunk/doc/octopus.info, trunk/doc/octopus.texi,
	  trunk/src/eigen_evolution.F90, trunk/src/geom_opt.F90, trunk/src/h_inc.F90,
	  trunk/src/linear_response.F90, trunk/src/linear_response_inc.F90, trunk/src/make_st.F90,
	  trunk/src/phonons.F90, trunk/src/static_pol.F90, trunk/src/static_pol_lr.F90,
	  trunk/src/td_write.F90:
	  Bugfixes related to the np/np_part transition:
	  * Linear response.
	  * Other parts where st%X(psi) was initialized with np size.
	  * Added an assert to check input array size in h_inc.XHpsi.

2005-11-20  acastro

	* [r1694] trunk/src/profiling.F90, trunk/src/states.F90, trunk/src/xc_KLI.F90,
	  trunk/src/xc_OEP_inc.F90, trunk/src/xc_OEP_x.F90, trunk/testsuite/rc_bugs/04-Na2_Exx:
	  Bug fixed.
	  This time, 04-Na2_Exx. It had to do with the parallelization.
	  
	  I do not put it as a test because I am not fully certain of the validity
	  of the result. I will try to find exact known results for EXX and make
	  a test for it. Also for the rest of the orbital-dependent functionals.

2005-11-18  acastro

	* [r1693] trunk/src/poisson_corrections.F90:
	  When running in parallel in domains, I got a crash there due to the
	  np/np_part problem.
	* [r1692] trunk/src/h_inc.F90:
	  Bug fixed.
	  Forgot one pop_sub
	* [r1691] trunk/src/profiling.F90:
	  I don't think the profiling_in and profiling_out should be monitored
	  by the push_sub/pop_sub, the output gets rather ugly.
	* [r1690] trunk/src/out_inc.F90:
	  The ASSERT(0) led to an arithmetic if in Fortran that is not accepted by
	  modern compilers.
	* [r1689] trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/poisson.F90,
	  trunk/src/profiling.F90, trunk/src/v_ks.F90, trunk/src/v_ks_inc.F90:
	  Added some more profiling tags. I know that we should be in regression
	  mode, but maybe we should have some way to properly benchmark the 2.0
	  code against all future developments.
	* [r1688] trunk/src/nl_operator.F90, trunk/src/profiling.F90:
	  Bug fixed in the profiling.
	  The nl_operator tag had two entries and no exit.
	  
	  I improved a little bit the output in the profiling.xxx files, so that
	  it is more readable.
	* [r1687] trunk/src/mesh_init.F90:
	  The code was crashing in the marenostrum machine at unexpected points
	  near the call to mesh_partition, when attempting to run systems with
	  large meshes. The reason seemed to be a memory problem, probably the
	  code was legal but the memory managemente was badly done by the
	  compiler (mpxlf compiler from ibm). With the changes that I did, it
	  seems to work fine now. I don't know, maybe in the way that it was
	  done before, some odd copies were being made, filling the cache, or
	  the stack, or whatever, maybe the ventilators, god knows.
	  
	  In general, it is probably not a good practice to pass a structure and
	  components of that structure separately to a subroutine. Also, it is
	  probably better to use allocate than using automatic arrays.

2005-11-17  xavier

	* [r1686] trunk/src/static_pol_lr.F90:
	  The off-diagonal terms of the beta tensor were wrong.

2005-11-17  acastro

	* [r1685] trunk/testsuite/finite_systems_2d/fock_darwin.test:
	  Added a test for the magnetic field. For the moment, only in 2D, and
	  with a null Zeeman term. It is the spectrum of Fock-Darwin (one particle
	  in 2D confined by a Harmonic potential, and subject to a perpendicular
	  static constant magnetic field).
	* [r1684] trunk/src/unocc.F90:
	  The unocc mode was broken due to the usual np/np_part problem.

2005-11-17  xavier

	* [r1683] trunk/src/geometry.F90:
	  The atom_write_xyz function was printing the file in all nodes except root,
	  as a result oct-center-geom didn't write the adjusted.xyz file. So I added a
	  .not.

2005-11-17  acastro

	* [r1682] trunk/liboct_parser/parser_f.c:
	  Bug fixed.
	  In some cases, the code stopped in xyz_file_read when attempting to
	  see if the block was defined. This was due to the assert statement in
	  the loct_parse_block C function, which may detect non-null block_name.
	  
	  I am not too sure about why this was happening, but in any case I think
	  it is much more robust this way.

2005-11-17  xavier

	* [r1681] trunk/src/static_pol_lr.F90:
	  Fixed compilation issues with complex version.

2005-11-16  acastro

	* [r1680] trunk/src/epot.F90, trunk/src/h_inc.F90:
	  I tested the static external magnetic field. Apart from a 1/2 factor that
	  shouldn't be there, it was OK.
	  
	  I allowed for the possibility of having the external magnetic field and
	  *not* doing CDFT, they are independent things.
	  
	  The test that I did was to reproduce the Darwin-Fock spectrum in 2D:
	  eigenvalues of a 2D single-particle system, confined by a harmonic
	  potential, and subject to a perpendicular magnetic field. This spectrum
	  is analytical.
	  
	  However, I did not check the Zeeman term.

2005-11-16  xavier

	* [r1679] trunk/src/static_pol_lr.F90, trunk/testsuite/rc_bugs/09-H2O_POL:
	  Some corrections for first static hyperpolarizability, and now it seems to
	  work fine (the spin polarized case still needs some work).
	  
	  Unfortunately, the linear response code is broken after the np->np_part
	  transition, but I haven't been able to locate where the problem is. So I am
	  commiting a example input to the rc_bugs directory.

2005-11-15  xavier

	* [r1678] trunk/src/linalg_basic_blas.F90:
	  Removed spaces before the # in a couple of preprocessor directives, Compaq
	  cpp doesn't like them.

2005-11-15  marques

	* [r1677] trunk/src/global.h:
	  This should fix the compilation issues from yesterday.

2005-11-14  marques

	* [r1676] trunk/src/atomic.F90, trunk/src/broad.F90, trunk/src/casida.F90,
	  trunk/src/cf_inc.F90, trunk/src/cross_section.F90, trunk/src/crystal.F90,
	  trunk/src/curv_gygi.F90, trunk/src/derivatives.F90, trunk/src/derivatives_inc.F90,
	  trunk/src/eigen_arpack.F90, trunk/src/eigen_cg.F90, trunk/src/global.h,
	  trunk/src/messages.F90:
	  I spent more than half an hour searching for a bug that didn't exist - it had
	  been an allocate error (out of memory), but, as usual, it appeared as a
	  segmentation fault. Therefore, I decided to put a very simple check for
	  the allocation errors. It is basically a preprocessor macro, and changing
	  allocate -> ALLOCATE. I started changing all allocates in the code, but I
	  will finish when I come back from Louvain.

2005-11-14  micael

	* [r1675] trunk/src/v_ks_inc.F90:
	  *) Sorry, I forgot to remove those lines.

2005-11-14  appel

	* [r1674] trunk/src/broad.F90, trunk/src/out.F90:
	  Remove unused variables.
	* [r1673] trunk/src/sparskit_inc.F90:
	  Documented all Sparskit variables.
	* [r1672] trunk/src/v_ks_inc.F90:
	  The code did not compile. I commented some lines in v_hartree()
	  and added a FIXME at the corresponing position. Micael, can you
	  check if this part is still required?

2005-11-14  micael

	* [r1671] trunk/src/restart_inc.F90:
	  *) Increased the number of digits of the number of iterations in file "wfns".
	* [r1670] trunk/src/h.F90, trunk/src/h_inc.F90:
	  *) Removed the effective-mass model as there were some precision issues when using it.
	  Also, I realized there is a better way of including this model: I will make it a system
	  of units.

2005-11-14  marques

	* [r1669] trunk/src/eigen_arpack.F90:
	  Small bug corrected. h has to have intent inout now.
	* [r1668] trunk/share/variables.local:
	  Forgot to commit this file.

2005-11-14  micael

	* [r1667] trunk/testsuite/finite_systems_3d/spinors.test:
	  *) Changed the spinors test. Now it uses the Lanczos eigensolver.

2005-11-14  marques

	* [r1666] trunk/src/curvlinear.F90, trunk/src/global.F90, trunk/src/io.F90,
	  trunk/src/main.F90:
	  *) Moved reading of DebugLevel from io to main
	  *) Added variable DevelVersion. As discussed with Heiko, the objective is that
	  when conf%devel_version is .false. certain areas of the code are not
	  accessible. This allows to "disconnect" some options, and reconnect them
	  with DebugLevel, i.w., without having to comment the test in the source
	  file.
	  *) conf%devel_version is only used now in curvlinear.F90
	* [r1665] trunk/src/derivatives_inc.F90, trunk/src/eigen.F90, trunk/src/eigen_cg.F90,
	  trunk/src/eigen_evolution.F90, trunk/src/eigen_plan.F90, trunk/src/f_inc.F90,
	  trunk/src/geometry.F90, trunk/src/global.h, trunk/src/h_inc.F90, trunk/src/lcao.F90,
	  trunk/src/poisson_cg.F90, trunk/src/poisson_corrections.F90,
	  trunk/src/poisson_multigrid.F90, trunk/src/scf.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_exp.F90,
	  trunk/src/td_write.F90, trunk/src/xc_vxc.F90:
	  This change may cause some problems in some cases. The problem is that, with
	  the changes that Florian and Heiko did, the wave-functions (or better, any
	  function that we want to calculate the derivative of) must be defined from
	  (1:m%np_part). If I remember well, this had to do with the communication of
	  the ghost points. What happened is that in several places in the code, the
	  functions were defined from 1:m%np. An example, in gs.F90, st%psi is defined
	  from 1:m%np_part, while in td.F90 st%psi is defined from 1:m%np.
	  
	  This is therefore an attemp to to clarify this situation. All functions have
	  to be passed to derivatives defined from 1:m%np_part. All tests work at the
	  moment, but it is possible that some parts of the code will fail (for
	  example, I am not 100% sure of td_exp::lanczos)
	  
	  Furthermore, there was a problem and the ASSERT macro was never define. Now
	  it is OK. I also added some ASSERTs to the calculation of the derivatives.

2005-11-14  micael

	* [r1664] trunk/src/eigen_plan.F90:
	  *) Bug fixed: Lanczos eigensolver was not working as there were some
	  inconsistencies between the size of the arrays and the calls to the blas.

2005-11-14  marques

	* [r1663] trunk/testsuite/periodic_systems_1d/cosine_potential.test,
	  trunk/testsuite/periodic_systems_1d/free_electrons.test:
	  Following the recent changes of Alberto, the tests were no longer working.
	  Now they do.

2005-11-14  acastro

	* [r1662] trunk/src/geometry.F90, trunk/src/scf.F90, trunk/testsuite/rc_bugs/06-Spinors:
	  I did not know that geometry_min_distance existed. It can be used
	  in geometry_atoms_are_too_close, of course.
	  
	  Also, I made sure that a meaningful default lmm_r is set in scf when
	  there is only one atom. It was wrong before due to the huge value
	  returned by geometry_min_distance. This way the 06-Spinors bug file
	  can also go away.
	* [r1661] trunk/share/samples/Makefile.am, trunk/src/geometry.F90, trunk/src/messages.F90,
	  trunk/testsuite/rc_bugs/01-Hartree_1D:
	  Added a geometry_atoms_are_too_close check to make sure that there are
	  no atoms sitting on top of each other in the input file. This way
	  we can get rid of one of the bug files, 01-Hartree_1D.
	  
	  I forgot to change the Makefile.am when I changed the sample input files.
	  
	  Added a new line in write_fatal, otherwise the output looked ugly.
	* [r1660] trunk/share/samples/Na2td:
	  I added the Na2td sample input file, so that one time-dependent run is
	  also in the samples directory.
	* [r1659] trunk/share/samples/Na2, trunk/share/samples/bench-gs,
	  trunk/share/samples/benzene:
	  After so many changes in the input variables, the sample file had got
	  wildly inaccuarte. I removed most of the variables, leaving a more minimal
	  set, I think Miguel asked for that some time ago. I also renamed bench-gs
	  into benzene, and chaged it slightly. We can still use it for benchmarking,
	  anyways, but the name is more descriptive.
	  We should maybe add more examples before the commit, and describe them
	  better.

2005-11-14  marques

	* [r1658] trunk/src/h.F90, trunk/src/multicomm.F90, trunk/src/out.F90, trunk/src/scf.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/td_write.F90,
	  trunk/src/varinfo.F90:
	  A small change to make the code more usable. I transformed the OutputXXX and
	  TDOutputXXX variables into flags. In this way, the ~20 variables of this kind
	  are transformed in only 3: Output, TDOutput, and OutputHow
	* [r1657] trunk/testsuite/oct-run_regression_test.pl:
	  Small change to allow the use of ; (written as '\;') in the precommand part
	  of the match. This is useful if we want to use awk scripts in the match.

2005-11-14  acastro

	* [r1656] trunk/src/global.F90, trunk/src/hgh.F90:
	  This fixes, I think, the compilation errors of yesterday night.

2005-11-13  acastro

	* [r1655] trunk/src/mpi.F90:
	  I believe that the #else there should be an #endif. Otherwise some
	  problems could show up when running with one processor but with one
	  mpi executable.
	* [r1654] trunk/src/curv_gygi.F90, trunk/testsuite/finite_systems_3d/curvilinear.test:
	  Added one first test for the curvlinear coordinates stuff.
	  It is a bit slow, but the initialization time of the curvilinear runs
	  are that way.
	  
	  Also, corrected a small error in the documentation of the CurvGygiA
	  variable.
	* [r1653] trunk/src/ps.F90:
	  Bug fixed.
	  The code crashed when trying to run Helium with the HGH pseudopotential.
	* [r1652] trunk/src/Makefile.am, trunk/src/oct_test.F90:
	  Removed the oct-test program, which was there for internal use, and
	  should not be there in the release.

2005-11-12  acastro

	* [r1651] trunk/src/xc_functl.F90, trunk/testsuite/finite_systems_2d/2dbox.test:
	  The default correlation should not be the same in 3D and 2D.
	  
	  I added tests for the exchange and correlation potential in 2D
	  (the Attacalite one).
	* [r1650] trunk/libxc/lda_c_amgb.c:
	  Bug fixed.
	  One wrong character kept me busy the whole afternoon.

2005-11-12  appel

	* [r1649] trunk/src/messages.F90:
	  Adapting string lengths in messages_print_stress. Octopus was printing
	  on x86_64 garbage like this
	  
	  ^@^@^PS�^@^@^@^@^@���)^A^@^@^@~@S�^@^@^@^@^@PS�^@^@^@^@^@�Q�^@^@^@^@^@
	  
	  to static/info. This was causing grep to assume it is a binary file.
	  Therefore the matches of the testsuite were failing.

2005-11-11  marques

	* [r1648] trunk/src/Makefile.am, trunk/src/casida.F90, trunk/src/epot.F90,
	  trunk/src/epot_inc.F90, trunk/src/geometry.F90, trunk/src/global.F90, trunk/src/grid.F90,
	  trunk/src/gs.F90, trunk/src/h.F90, trunk/src/io.F90, trunk/src/liboct_parser.F90,
	  trunk/src/main.F90, trunk/src/mesh.F90, trunk/src/mesh_init.F90, trunk/src/messages.F90,
	  trunk/src/mf.F90, trunk/src/mpi.F90, trunk/src/mpi_debug.F90, trunk/src/mpi_debug_inc.F90,
	  trunk/src/multicomm.F90, trunk/src/out.F90, trunk/src/out_inc.F90, trunk/src/par_vec.F90,
	  trunk/src/profiling.F90, trunk/src/restart.F90, trunk/src/restart_inc.F90,
	  trunk/src/run.F90, trunk/src/scf.F90, trunk/src/specie.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_write.F90,
	  trunk/src/v_ks.F90, trunk/src/xc_KLI.F90, trunk/src/xc_OEP.F90, trunk/src/xc_OEP_SIC.F90,
	  trunk/src/xc_OEP_inc.F90, trunk/src/xc_OEP_x.F90:
	  Some rearrangements (cleaning) in the mpi stuff
	  *) The stuff that was in mpi.F90 is now in mpi_debug.F90
	  *) Now mpi_mod has low level MPI stuff
	  *) There is now a mpi_grp that handles MPI groups (including a mpi_grp_is_root
	  that, in my opinion, is much more readable than (rank == 0)
	  *) The rest of the code was changed to use this infrastructure

2005-11-11  acastro

	* [r1647] trunk/src/poisson.F90:
	  I commit a commented subroutine, poisson_test, in the poisson module.
	  It implements a check for the Hartree integrator, either in 2D or in 3D
	  (it calculates the Hartree potential of a Gaussian charge, and compares
	  it to the exact analytical result). This I didn't do it for 1D because
	  for the soft-Coulomb interaction actually I couldn't think about
	  an exact result.
	  
	  I am not sure about wether or not to put it commented out or not. After
	  all, we are in regression mode. But I wanted it to be in the code after
	  all. It would be nice to have this kind of x_test routines for some of
	  the modules, so that their particular tasks can be checked independently.

2005-11-10  acastro

	* [r1646] trunk/testsuite/finite_systems_2d/2dbox.test:
	  I checked the 2D Hartree solver, so I added a test to the 2D file:
	  a qd with 2 electrons interacting with only the Hartree term.

2005-11-09  acastro

	* [r1645] trunk/testsuite/finite_systems_2d, trunk/testsuite/finite_systems_2d/2dbox.test:
	  Added a first test for 2D calculations. This is just an infinite potential
	  box example. I will put more as a continue checking the 2D part of the
	  code.
	* [r1644] trunk/src/mesh.F90, trunk/src/specie.F90:
	  Just a couple of stupid bugs that showed up in my 2D calculations.

2005-11-09  marques

	* [r1643] trunk/src/eigen_cg.F90, trunk/src/geometry.F90, trunk/src/grid.F90,
	  trunk/src/hgh.F90, trunk/src/messages.F90, trunk/src/multicomm.F90, trunk/src/run.F90,
	  trunk/src/scf.F90, trunk/src/td.F90, trunk/src/tm.F90, trunk/src/v_ks.F90,
	  trunk/src/varinfo.F90, trunk/src/xc.F90:
	  Some more "cleaning" of the output of octopus. Now the variable "stars"
	  disapeared, replaced by the function messages_print_stress, that was
	  given some more options.
	* [r1642] trunk/libxc/lda.c, trunk/libxc/xc.h, trunk/libxc/xc_f.c:
	  *) Alberto, I think that the "break" in the fxc calculation should be a
	  "continue" (i.e., he should skip the rest of the current cycle, but
	  should get out of the cycle). Can you please check?
	  *) Xavier, I guess that the calculation of Kxc should have a similar to
	  the one Alberto put in for fxc. Can you please check?
	  *) I cleaned a little bit the includes, whitespaces, and changed "(*p)." to
	  "p->" as it is more C-like.

2005-11-08  acastro

	* [r1641] trunk/libxc/lda.c:
	  Bug fixed.
	  
	  The numerical functional derivation was not working properly in some
	  spin-polarized cases (Perdew-Zunger parameterization, Na4(+1), it was
	  just giving lots of NaN). Now, at least for those cases, it seems to
	  work. I still have to do some more testing on the Casida module,
	  though.
	  
	  In any case, the PZ kernel should be obtained analytically. Maybe in the
	  future.
	* [r1640] trunk/src/mix.F90:
	  Removed two FIXMEs.

2005-11-08  xavier

	* [r1639] trunk/src/multigrid.F90, trunk/src/poisson_multigrid.F90:
	  All multigrid variables are documented now.

2005-11-08  acastro

	* [r1638] trunk/src/broad.F90, trunk/src/casida.F90:
	  The LinCasida, LinEigenvalues and LinPetersilka variables are gone.
	  The oct-broad utility just broadens whatever spectrum it finds.

2005-11-08  appel

	* [r1637] trunk/src/eigen_arpack.F90:
	  Fix compilation issues from last night. The MPI version of the code
	  was not compiling.
	* [r1636] trunk/testsuite/rc_bugs/08-TDELF_C2H4:
	  This bug will probably a bit harder to trace, but I believe it's a real bug.
	  The code stops after 200 SCF cycles with an ** Address Error **.

2005-11-07  marques

	* [r1635] trunk/src/curvlinear.F90, trunk/src/derivatives.F90, trunk/src/eigen.F90,
	  trunk/src/eigen_arpack.F90, trunk/src/epot.F90, trunk/src/f.F90, trunk/src/geom_opt.F90,
	  trunk/src/h.F90, trunk/src/main.F90, trunk/src/mesh_init.F90, trunk/src/messages.F90,
	  trunk/src/mix.F90, trunk/src/multigrid.F90, trunk/src/pes_rc.F90, trunk/src/poisson.F90,
	  trunk/src/poisson_multigrid.F90, trunk/src/restart.F90, trunk/src/run.F90,
	  trunk/src/scf.F90, trunk/src/spectrum.F90, trunk/src/states.F90,
	  trunk/src/states_kpoints.F90, trunk/src/systm.F90, trunk/src/td_exp.F90,
	  trunk/src/td_init.F90, trunk/src/td_rti.F90, trunk/src/v_ks.F90, trunk/src/varinfo.F90:
	  I did some cleaning in the way of handling the input errors (making the
	  use of input_error more consistent), and in the output of the options
	  (using messages_print_var_option throughout the code).
	  
	  There is some need now of "beautifying" the output, by adding some spaces
	  and stars. In any case, from my experience with Silvana, I would be
	  happier if octopus would output more about what it is doing...

2005-11-07  xavier

	* [r1634] trunk/src/specie.F90:
	  Updated documentation for Species block.

2005-11-07  marques

	* [r1633] trunk/liboct/varinfo.c:
	  Small bug corrected regarding newlines in the varinfo file.

2005-11-07  appel

	* [r1632] trunk/src/gs.F90, trunk/src/lcao.F90, trunk/src/scf.F90, trunk/src/unocc.F90:
	  The 1D periodic tests were not passed anymore on x86_64. Fixing
	  pointer deallocation.
	* [r1631] trunk/src/epot_inc.F90:
	  Remove unused variables.
	* [r1630] trunk/src/global.F90:
	  The new compilerflag feature can produce rather long source lines (depending
	  on the amount of compiler options used).
	  
	  The code didn't compile with NAG, as this compiler doesn't like long
	  lines
	  
	  Error: global.F90, line 181: Line too long - truncated
	  Error: global.F90, line 181: Unterminated character literal

2005-11-07  acastro

	* [r1629] trunk/src/curvlinear.F90:
	  The code will now stop if the two non-working adaptive coordinate
	  schemes attempt to be used. They will not make it before the release.
	* [r1628] trunk/src/Makefile.am, trunk/src/global.F90, trunk/src/main.F90:
	  I thought that it would be cool if the code outputs what compiler and
	  what compiler flags were used to make the executable.

2005-11-07  appel

	* [r1627] trunk/testsuite/rc_bugs, trunk/testsuite/rc_bugs/01-Hartree_1D,
	  trunk/testsuite/rc_bugs/02-Na_Chain, trunk/testsuite/rc_bugs/03-Na2_MGGA,
	  trunk/testsuite/rc_bugs/04-Na2_Exx, trunk/testsuite/rc_bugs/05-Na2_LB94_Casida,
	  trunk/testsuite/rc_bugs/06-Spinors, trunk/testsuite/rc_bugs/07-Atomic_Gd:
	  This is a set of non-working input files. I've used the format of the
	  test files so that we can use them eventually for the testsuite if they
	  are working properly. The files contain a short bug description and
	  the output of octopus respectively.
	  
	  I decided to add them to the cvs (besides the copy I put in the wiki) so
	  that everybody has easy file access and we have a revision history on
	  the bug tracking process (poor mans bugzilla :).
	  
	  Perhaps some of the features used in these files should be simply disabled
	  for the release of 2.0. In that case view this list just as reminder that
	  we have to stop the code with an appropriate error message. Otherwise we
	  have to look into the bugs ...
	  
	  Some further things I noticed
	  
	  - According to a comment in xc_OEP.F90:57 full OEP seems to be only half
	  implemented. Is the comment outdated, or should we stop the code? The
	  same applies to the Amaldi correction term. In both cases the code seems
	  to run so that the user could assume by mistake that the output is correct.
	  
	  - There are 9 FIXME's in the sources:
	  
	  appel@miraculix:..octopus/src> grep -i fixme *.F90 | wc -l
	  9
	  
	  - ... and 31 warnings:
	  
	  appel@miraculix:..octopus/src> grep -i warning *.F90 | grep -v write | wc -l
	  31
	* [r1626] trunk/share/util/oct-atomic_occupations, trunk/share/util/oct-run_periodic_table:
	  Update the scripts. oct-run_periodic_table has now support for
	  ExtraStates and ElectronicTemperature and oct-atomic_occupations
	  has improved ordering for occupation numbers (4s states appear
	  before 3d states).
	* [r1625] trunk/testsuite/finite_systems_3d/multigrid.test,
	  trunk/testsuite/finite_systems_3d/restart.test, trunk/testsuite/finite_systems_3d/so.test,
	  trunk/testsuite/oct-run_regression_test.pl:
	  There was a / missing.
	* [r1624] trunk/src/io.F90, trunk/src/ode_solver_inc.F90, trunk/src/root_solver.F90,
	  trunk/src/root_solver_inc.F90:
	  Documented a bunch of variables.

2005-11-05  acastro

	* [r1623] trunk/src/derivatives.F90, trunk/src/f.F90:
	  The default stencil when using curvilinear coordinates should be
	  the "stencil_starplus" one, not just the star. In fact, the star should
	  *not* be used with curv coordinates, so I made the code stop in that case.

2005-11-04  acastro

	* [r1622] trunk/src/run.F90:
	  This is to make sure that the code does not crash if running in parallel
	  but without metis.

2005-11-04  marques

	* [r1621] trunk/src/poisson_cg.F90, trunk/src/scf.F90:
	  poisson_cg1 now works (also in parallel). This is the PoissonSolver = cg
	* [r1620] trunk/src/casida.F90, trunk/src/epot.F90, trunk/src/epot_inc.F90,
	  trunk/src/geometry.F90, trunk/src/global.F90, trunk/src/grid.F90, trunk/src/io.F90,
	  trunk/src/liboct_parser.F90, trunk/src/main.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_init.F90, trunk/src/messages.F90, trunk/src/multicomm.F90,
	  trunk/src/par_vec.F90, trunk/src/profiling.F90, trunk/src/restart_inc.F90,
	  trunk/src/scf.F90, trunk/src/specie.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/systm.F90, trunk/src/td_write.F90, trunk/src/v_ks.F90, trunk/src/xc.F90,
	  trunk/src/xc_KLI.F90, trunk/src/xc_vxc.F90:
	  *) Forces wre not working in parallel. Now they seem to work.
	  
	  *) Sorry, Alberto, I had also fixed the xc. I changed your solution, for the
	  following resaon: I think it is much more clear to use the mf_integrate
	  function than to call MPI directly. The disadvantage is that this is
	  (maybe) slower and more memory consuming (although temporarely). However,
	  I think it is worth it. The same applies to the forces.
	  
	  *) I rename the variables in mpiv in global. I think it is more clear now.
	  I will probably create a module called mpi_group, or something like that
	  to contain rank/size/comm to be used consistently in the code.

2005-11-04  acastro

	* [r1619] trunk/src/xc.F90, trunk/src/xc_vxc.F90:
	  The exchange and correlation energies were badly calculated when using
	  the parallelization in domains.
	* [r1618] trunk/src/states_inc.F90:
	  Sorry about the last commit, I just replicated Migues's bug fix.
	* [r1617] trunk/src/states_inc.F90:
	  Bug fixed.
	  When running in parallel in domains, the code crashed at that point
	  because the state communicator is null.

2005-11-04  rozzi

	* [r1616] trunk/src/epot.F90, trunk/src/out.F90, trunk/src/states.F90,
	  trunk/src/states_kpoints.F90:
	  A contribution to the documentation of the variables.

2005-11-04  marques

	* [r1615] trunk/src/states_inc.F90:
	  Small bug corrected in the parallel version.
	  
	  Alberto, the Na2 ground-states seems to work in my machine. You'll have to use
	  the cg_corrected Poisson solver (the cg crashes), and decrease the PoissonSolverThreshold
	  to 1e-7. Note that using the fft solver does not stop octopus with an error, but it gives
	  non-sense!!!

2005-11-04  appel

	* [r1614] trunk/src/td_rti.F90:
	  Fix compilation problems. Same story as yesterday: Don't put single
	  quotes ' in the documentation. This causes the compilation of the code
	  to fail ...

2005-11-03  marques

	* [r1613] trunk/build/var2html.pl, trunk/doc/octopus.info, trunk/doc/octopus.texi,
	  trunk/share/variables.local, trunk/src/curv_gygi.F90, trunk/src/geom_opt.F90,
	  trunk/src/h.F90, trunk/src/hs.F90, trunk/src/io.F90, trunk/src/out.F90, trunk/src/pes.F90,
	  trunk/src/pes_rc.F90, trunk/src/phonons.F90, trunk/src/poisson3D.F90, trunk/src/scf.F90,
	  trunk/src/spectrum.F90, trunk/src/static_pol.F90, trunk/src/systm.F90, trunk/src/td.F90,
	  trunk/src/td_exp.F90, trunk/src/td_init.F90, trunk/src/td_rti.F90, trunk/src/td_write.F90,
	  trunk/src/unocc.F90, trunk/src/v_ks.F90:
	  I finished putting the documentatio of the variables. I will now make a list
	  of undocummented variables.

2005-11-03  appel

	* [r1612] trunk/share/util/Makefile.am, trunk/share/util/oct-atomic_occupations,
	  trunk/share/util/oct-run_periodic_table:
	  There's now a utility to compute the atomic occupations and
	  ExtraStates for all Pseudopotentials that ship with octopus:
	  
	  appel@g35:..share/util> ./oct-atomic_occupations -s Ce_sc
	  # =============================================================
	  # configurations for specie: Ce_sc
	  # core orbitals : 1s^2 2s^2 2p^6 3s^2 3p^6 3d^10 4s^2 4p^6 4d^10
	  # valence orbitals : 5s^2 5p^6 4f^1 5d^1 6s^2
	  # core electrons : 46
	  # valence electrons : 12
	  %Occupations
	  2 | 6 | 1/7 | 1/7 | 1/7 | 1/7 | 1/7 | 1/7 | 1/7 | 1/5 | 1/5 | 1/5 | 1/5 | 1/5 | 2
	  %
	  ExtraStates = 10
	  
	  
	  I've updated my script from yesterday in order to append this
	  information to the input files. Also the script now permits
	  to run a single atom
	  
	  appel@g35:..share/util> ./oct-run_periodic_table -s Ce_sc
	* [r1611] trunk/share/PP/defaults:
	  Run M-x untabify on the file since octopus didn't like tabs in the
	  file.
	* [r1610] trunk/src/lcao.F90, trunk/src/unocc.F90, trunk/src/xc_functl.F90:
	  o Fixing compilation issues from yesterday.
	  o Removing unused variables.

2005-11-02  marques

	* [r1609] trunk/build/mk_varinfo.pl, trunk/build/var2html.pl, trunk/doc/Makefile.am,
	  trunk/doc/description.texi, trunk/doc/examples.texi, trunk/doc/external.texi,
	  trunk/doc/html, trunk/doc/html/icons, trunk/doc/html/icons/ftv2blank.gif,
	  trunk/doc/html/icons/ftv2doc.gif, trunk/doc/html/icons/ftv2folderclosed.gif,
	  trunk/doc/html/icons/ftv2folderopen.gif, trunk/doc/html/icons/ftv2lastnode.gif,
	  trunk/doc/html/icons/ftv2link.gif, trunk/doc/html/icons/ftv2mlastnode.gif,
	  trunk/doc/html/icons/ftv2mnode.gif, trunk/doc/html/icons/ftv2node.gif,
	  trunk/doc/html/icons/ftv2plastnode.gif, trunk/doc/html/icons/ftv2pnode.gif,
	  trunk/doc/html/icons/ftv2vertline.gif, trunk/doc/html/js, trunk/doc/html/js/ftiens4.js,
	  trunk/doc/html/js/ua.js, trunk/doc/html/vars.php, trunk/doc/html/varsLeftFrame.php,
	  trunk/doc/html/varsRightFrame.html, trunk/doc/octopus.info, trunk/doc/octopus.texi,
	  trunk/doc/parser.texi, trunk/doc/undocumented.texi, trunk/share/variables.local,
	  trunk/src/eigen.F90, trunk/src/epot.F90, trunk/src/f.F90, trunk/src/fftw3.F90,
	  trunk/src/geometry.F90, trunk/src/gs.F90, trunk/src/h.F90, trunk/src/lasers.F90,
	  trunk/src/scf.F90, trunk/src/simul_box.F90, trunk/src/specie.F90, trunk/src/states.F90,
	  trunk/src/systm.F90, trunk/src/td_exp.F90, trunk/src/td_init.F90, trunk/src/unocc.F90,
	  trunk/src/v_ks.F90, trunk/src/xc_functl.F90:
	  I continued my documentation efforts (but now I have to got o bed)
	  
	  *) I am putting the variables that were defined in the old octopus.texi
	  in the .F90 files. I stopped just before TDExpOrder. If someone wants
	  to continue this boring job, let me know (I'm away tomorrow).
	  
	  *) Now there is a varinfo (used to print errors in octopus) and a varinfo_orig
	  used to create the documentation.
	  
	  *) added two more files doc/description.texi doc/external.texi with things that
	  were in the old manual. The manual is a bit messy now... we have to put it
	  in shape for the release!!!
	  
	  *) I added the javacript/images for the trees. It is generated in doc/html

2005-11-02  acastro

	* [r1608] trunk/doc/Makefile.am, trunk/doc/octopus.info, trunk/doc/octopus.texi:
	  The problem with the @menu and @end menu that you were mentioning, seems
	  to be solved by putting the description of the items in the master menu.
	  I have no idea of why, but I could not finish the compilation otherwise.
	  
	  In my case, xemacs failed, emacs did not. I believe that more people will
	  have emacs than xemacs. So I changed that. But I guess this should be
	  treated in the configure.
	* [r1607] trunk/src/out_inc.F90:
	  The code did not compile in parallel without METIS. Now it compiles
	  but it does not run properly.

2005-11-02  marques

	* [r1606] trunk/build/mk_varinfo.pl, trunk/build/var2html.pl, trunk/doc/Makefile.am,
	  trunk/doc/authors.texi, trunk/doc/copying.texi, trunk/doc/examples.texi,
	  trunk/doc/index.texi, trunk/doc/installation.texi, trunk/doc/introduction.texi,
	  trunk/doc/octopus.info, trunk/doc/octopus.texi, trunk/doc/parser.texi,
	  trunk/doc/undocumented.texi, trunk/doc/update.el, trunk/share/Makefile.am,
	  trunk/src/geometry.F90, trunk/src/io.F90, trunk/src/simul_box.F90, trunk/src/specie.F90:
	  Now, also the list of variables in the texi manual is generated automatically
	  from the share/varinfo file. In order to do this, I have to use (x)emacs in
	  order to update the nodes and menus. Of course the code is *not* bulletproof.
	  
	  *) The automatical generation of nodes *requires* that the texi file is
	  broken into pieces (one per chapter). That is why you'll find so many
	  new files. It also has some bugs, e.g. sometimes you'll have to delete
	  in octopus.texi the lines between @menu and @end menu. Don't ask me why...
	  
	  *) If you do not have xemacs installed, the update of the nodes will fail. I
	  guess that emacs can do the trick also. I should add something to the
	  ./configuration script to find it.
	  
	  *) The comments in the Variable blocks contained ni the code should be written
	  in a striped down version of html. Only half a dozen commands are accepted,
	  like <i>, <b>, <tt>, <ul>, <li>, &nbsp; Please try to use the minimum
	  possible.
	  
	  *) When octopus outpus something from varinfo, it will look bad! I will have
	  to make a varinfo.orig and a varinfo, the latter *not* including any
	  formatting command. This will follow soon, I hope.

2005-11-02  acastro

	* [r1605] trunk/expokit/Makefile.am, trunk/expokit/expokit.f, trunk/expokit/expokit.f90:
	  Renamed expokit.f to expokit.f90, and coverted the fixed form to free
	  source f90 like syntax. Otherwise the compilation may be very difficult
	  (I get problems with the IBM xlf90 compiler on a PPC running Linux).

2005-11-02  appel

	* [r1604] trunk/share/PP/defaults, trunk/share/util/Makefile.am,
	  trunk/share/util/oct-run_periodic_table:
	  Some more work for the release:
	  
	  o I've updated the PP/defaults file. It contains now all
	  pseudopotentials that are included in the octopus package.
	  I've taken the nuclear masses from the NIST database
	  
	  http://physics.nist.gov/PhysRefData/Compositions/index.html
	  
	  To facilitate formatting I've padded the numbers for the
	  masses with zeros.
	  
	  The PP/defaults needs definitely some polishing. The current
	  table contains as subset the previous entries for the TM2
	  species and adds HGH potentials for the rest of the atoms.
	  Grid size and spacing will have to be adapted in most cases,
	  so consider this only as an attempt to get things started.
	  
	  o There's now a script oct-run_periodic_table in util/ that
	  you can use to run octopus for all atoms for which we have
	  pseudopotentials available. The script also gets installed
	  to /usr/bin.
	  
	  I think it would be nice to compare the eigenvalues of such
	  a run with the NIST reference data for the LDA
	  
	  http://physics.nist.gov/PhysRefData/DFTdata
	  
	  My machine has currently proceeded up to the semicore potential
	  of Titanium. However already a bunch of atoms did not converge:
	  
	  appel@g35:..octopus-head/runs> grep -r "SCF \*not\* converged" .
	  ./05_B/static/info:SCF *not* converged!
	  ./06_C/static/info:SCF *not* converged!
	  ./07_N/static/info:SCF *not* converged!
	  ./08_O/static/info:SCF *not* converged!
	  ./09_F/static/info:SCF *not* converged!
	  ./14_Si/static/info:SCF *not* converged!
	  ./15_P/static/info:SCF *not* converged!
	  ./21_Sc_sc/static/info:SCF *not* converged!
	  ./22_Ti/static/info:SCF *not* converged!
	  
	  I'm especially surprised about C, N, O and Si, since these have been
	  in the table before.
	  
	  How could you trust previous octopus calculations for molecules if
	  already the atoms for these species fail? I know that the convergence
	  might be different for molecules, but with the current defaults there's
	  within octopus no way to assess the quality of the atomic eigenvalues
	  for the given PP ...

2005-11-01  acastro

	* [r1603] trunk/share/variables.local, trunk/src/simul_box.F90:
	  Some more effort in the documentation.

2005-11-01  marques

	* [r1602] trunk/build/var2html.pl, trunk/src/casida.F90, trunk/src/curv_gygi.F90,
	  trunk/src/curvlinear.F90, trunk/src/derivatives.F90, trunk/src/eigen.F90,
	  trunk/src/geometry.F90, trunk/src/hs.F90, trunk/src/io.F90, trunk/src/lasers.F90,
	  trunk/src/main.F90, trunk/src/mix.F90, trunk/src/multicomm.F90, trunk/src/multigrid.F90,
	  trunk/src/ode_solver_inc.F90, trunk/src/poisson.F90, trunk/src/poisson3D.F90,
	  trunk/src/poisson_multigrid.F90, trunk/src/root_solver_inc.F90, trunk/src/scalar_mesh.F90,
	  trunk/src/simul_box.F90, trunk/src/sparskit_inc.F90, trunk/src/specie.F90,
	  trunk/src/spectrum.F90, trunk/src/states.F90, trunk/src/units.F90, trunk/src/unocc.F90,
	  trunk/src/v_ks.F90:
	  In a effort of getting the code ready for the release, I started working on the
	  documentation. The idea is to get *all* variables documented inside the code. Furthermore,
	  I wrote a small script (build/var2html.pl) that converts the share/varinfo file to html. I
	  would like to have a meeting about the future of the documentation in octopus. When will
	  you have time?

2005-10-31  acastro

	* [r1601] trunk/src/h_inc.F90:
	  The ik should not be modified within the kinetic routine.
	* [r1600] trunk/src/lcao.F90, trunk/src/unocc.F90:
	  Now an initial LCAO calculation, if possible, is made also for the
	  calculation of the unoccupied states in unocc mode.
	  This means that the calculation is *much* faster, since the initial points
	  for the cg search are pretty good.
	  
	  This is only possible if there are enough LCAOs available to fill the
	  occupied+unoccupied states.

2005-10-31  appel

	* [r1599] trunk/build/latest_cvs_commit.sh:
	  The "latest cvs changes" info that octopus prints at startup was not set
	  correctly anymore. The reason were multiple cvs Id tags that are contained
	  in the ChangeLog file. To fix this I added --exclude="./ChangeLog" to the
	  grep call.
	* [r1598] trunk/src/atomic.F90, trunk/src/broad.F90, trunk/src/casida.F90,
	  trunk/src/centergeom.F90, trunk/src/cf.F90, trunk/src/cf_inc.F90,
	  trunk/src/cross_section.F90, trunk/src/crystal.F90, trunk/src/curv_briggs.F90,
	  trunk/src/curv_gygi.F90, trunk/src/curv_modine.F90, trunk/src/curvlinear.F90,
	  trunk/src/derivatives.F90, trunk/src/derivatives_inc.F90, trunk/src/eigen.F90,
	  trunk/src/eigen_arpack.F90, trunk/src/eigen_cg.F90, trunk/src/eigen_evolution.F90,
	  trunk/src/eigen_plan.F90, trunk/src/eigen_trlan.F90, trunk/src/epot.F90,
	  trunk/src/epot_inc.F90, trunk/src/f.F90, trunk/src/f_inc.F90, trunk/src/fftw2.F90,
	  trunk/src/fftw3.F90, trunk/src/geom_opt.F90, trunk/src/geometry.F90, trunk/src/global.F90,
	  trunk/src/global.h, trunk/src/grid.F90, trunk/src/gs.F90, trunk/src/h.F90,
	  trunk/src/h_inc.F90, trunk/src/hgh.F90, trunk/src/hs.F90, trunk/src/io.F90,
	  trunk/src/lasers.F90, trunk/src/lcao.F90, trunk/src/liboct.F90,
	  trunk/src/liboct_parser.F90, trunk/src/libxc.F90, trunk/src/linalg_adv.F90,
	  trunk/src/linalg_adv_lapack.F90, trunk/src/linalg_basic.F90,
	  trunk/src/linalg_basic_int.F90, trunk/src/linear_response.F90,
	  trunk/src/linear_response_inc.F90, trunk/src/logrid.F90, trunk/src/main.F90,
	  trunk/src/make_st.F90, trunk/src/math.F90, trunk/src/math_cg_inc.F90,
	  trunk/src/math_inc.F90, trunk/src/mesh.F90, trunk/src/mesh_init.F90,
	  trunk/src/mesh_lib.F90, trunk/src/messages.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90,
	  trunk/src/mix.F90, trunk/src/mpi.F90, trunk/src/mpi_inc.F90, trunk/src/multicomm.F90,
	  trunk/src/multigrid.F90, trunk/src/nl_operator.F90, trunk/src/ode_solver.F90,
	  trunk/src/ode_solver_inc.F90, trunk/src/opt_control.F90, trunk/src/out.F90,
	  trunk/src/out_inc.F90, trunk/src/par_vec.F90, trunk/src/par_vec_inc.F90,
	  trunk/src/pes.F90, trunk/src/pes_mask.F90, trunk/src/pes_rc.F90,
	  trunk/src/phonon_spectrum.F90, trunk/src/phonons.F90, trunk/src/poisson.F90,
	  trunk/src/poisson1D.F90, trunk/src/poisson2D.F90, trunk/src/poisson3D.F90,
	  trunk/src/poisson_cg.F90, trunk/src/poisson_corrections.F90,
	  trunk/src/poisson_multigrid.F90, trunk/src/profiling.F90, trunk/src/ps.F90,
	  trunk/src/restart.F90, trunk/src/restart_inc.F90, trunk/src/root_solver.F90,
	  trunk/src/root_solver_inc.F90, trunk/src/rotational_strength.F90, trunk/src/run.F90,
	  trunk/src/scalar_mesh.F90, trunk/src/scf.F90, trunk/src/simul_box.F90,
	  trunk/src/sparskit.F90, trunk/src/sparskit_driver.F90, trunk/src/sparskit_inc.F90,
	  trunk/src/specie.F90, trunk/src/spectrum.F90, trunk/src/spline.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/states_kpoints.F90, trunk/src/static_pol.F90,
	  trunk/src/static_pol_lr.F90, trunk/src/stencil_cube.F90, trunk/src/stencil_star.F90,
	  trunk/src/stencil_starplus.F90, trunk/src/stencil_variational.F90, trunk/src/string.F90,
	  trunk/src/syslabels.F90, trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_calc.F90,
	  trunk/src/td_exp.F90, trunk/src/td_exp_split.F90, trunk/src/td_init.F90,
	  trunk/src/td_rti.F90, trunk/src/td_write.F90, trunk/src/tm.F90, trunk/src/units.F90,
	  trunk/src/unocc.F90, trunk/src/v_ks.F90, trunk/src/v_ks_inc.F90, trunk/src/varinfo.F90,
	  trunk/src/wave_matching.F90, trunk/src/xc.F90, trunk/src/xc_KLI.F90, trunk/src/xc_OEP.F90,
	  trunk/src/xc_OEP_SIC.F90, trunk/src/xc_OEP_inc.F90, trunk/src/xc_OEP_x.F90,
	  trunk/src/xc_axc.F90, trunk/src/xc_functl.F90, trunk/src/xc_fxc.F90, trunk/src/xc_kxc.F90,
	  trunk/src/xc_vxc.F90, trunk/src/xyz_adjust.F90, trunk/src/xyz_file.F90,
	  trunk/src/xyzanim.F90:
	  This is a major effort to improve the code for the release:
	  
	  o The serial and parallel flavours of octopus compile now without
	  _any_ warnings (at least using NAG on x86_64 and Intel v9 on i386 :).
	  All unused variables have been removed. Please make an effort to
	  keep the sources in this shape until we release.
	  
	  Having no warnings anymore has the nice side effect that we can
	  take them now serious: whenever you see a warning during compilation
	  you introduced something fishy in the code you are working at.
	  
	  o The changes are also an attempt to give the code a unified look
	  an feel. I tried to use the same formatting style in all files.
	  In this way one should feel familiar also with not so often touched
	  parts of the sources.
	  I'll soon commit a small document to the cvs that summarizes the
	  style I used (we could have some opinion polls on that in the next
	  IRC meeting).

2005-10-31  acastro

	* [r1597] trunk/src/gs.F90, trunk/src/lcao.F90:
	  Bug fixed.
	  The LCAO for the spin-polarized case was not handled properly.
	* [r1596] trunk/src/specie.F90:
	  Bug fixed.
	  A bug that I introduced yesterday made the code crash when running with
	  a pseudopotential that had more than the l=0 component.

2005-10-30  acastro

	* [r1595] trunk/src/lcao.F90:
	  The lcao data type now contains a state data type, instead of just a set
	  of wave functions. I think it is cleaner this way.

2005-10-29  acastro

	* [r1594] trunk/src/eigen_cg.F90, trunk/src/lcao.F90, trunk/src/math.F90,
	  trunk/src/specie.F90:
	  Harmonic oscillator functions (in 1D, 2D or 3D) are used as initial
	  wavefunctions to do "LCAO" calculations with user defined potentials.
	  
	  The code is still a little bit ugly, but it seems to work.

2005-10-28  acastro

	* [r1593] trunk/src/gs.F90:
	  It may be that a LCAO calculation is to be done with user defined potential
	  (for that purpose I am currently implementing harmonic oscillator wave
	  functions). But since it may be actually not desirable, let us leave it
	  this way: LCAOStart = .true. by default if we have pseudpotentials,
	  LCAOStart = .false. if we have user defined potentials.

2005-10-28  rozzi

	* [r1592] trunk/src/gs.F90:
	  I think it is not well defined to do LCAO on user_def species. This fixes last night
	  failed test on the empty periodic lattice in the quick and dirty way. If we want LCAO
	  start also for user_def, this issue has to be investigated further.
	* [r1591] trunk/src/eigen_cg.F90:
	  I guess this is what you mean, Alberto. :)

2005-10-27  acastro

	* [r1590] trunk/src/eigen_cg.F90:
	  Bug fixed.
	  The conjugate gradients method for diagonalizing the Hamiltonian (the
	  default or old one, "cg") had the annoying ability to modify and overwrite
	  an eigenvector that is passed to the routine but which is already well
	  converged. This bug could be the one responsible for an annoying behavior
	  that we got sometimes -- namely that a SCF loop that is apparently going
	  well suddenly went crazy.
	  
	  In any case, I will change the default cg to the new one ("cg_new".
	  If we observe no problems, then eventually the old one will go away. I
	  think that the new one is more elegant and, moreover, I still do not
	  understand some of the lines of code of the old one.

2005-10-27  marques

	* [r1589] trunk/src/casida.F90, trunk/src/multicomm.F90, trunk/src/run.F90,
	  trunk/src/systm.F90:
	  Casida now also works in parallel, both in serial and in e-h pairs. However,
	  it is not OK, and requires a lot of cleaning. I don't think it is so important
	  at this point, so I will look at it later.

2005-10-27  xavier

	* [r1588] trunk/src/static_pol_lr.F90:
	  Now CalculationMode pol_lr calculates also beta(i,j,k), the first static
	  hyperpolarizability using Density Functional Perturbation Theory. Until now
	  the values obtained with this method agree with those obtained by finite
	  differences, but there are still more tests to do, so this code is not
	  completely reliable.

2005-10-27  acastro

	* [r1587] trunk/src/multigrid.F90, trunk/src/poisson_multigrid.F90,
	  trunk/testsuite/oct-run_regression_test.pl:
	  Bug fixed.
	  The testsuite was not passed: the multigrid tests were broken. I think I
	  fixed the bug, however, I have to say that I am still not very expert on
	  that part of the code. So Xavier, Miguel, please take a look at my changes.
	  Now the tests are passed at least in my machine.

2005-10-27  xavier

	* [r1586] trunk/liboct_parser/parse.c:
	  A bit of code cleaning.

2005-10-27  acastro

	* [r1585] trunk/src/global.F90, trunk/src/main.F90, trunk/src/math.F90,
	  trunk/src/simul_box.F90, trunk/src/states.F90:
	  I think that the dimensions of the calculation should be available to all
	  modules, not just those that use simul_box. For example, I am going to need
	  it in specie. So I put it in global, as it was before -- but this time I
	  just put it as a variable, calc_dim, instead of inside conf structure.
	  
	  Also, a couple of minor bugs fixed.

2005-10-27  rozzi

	* [r1584] trunk/src/lcao.F90:
	  the code was not compiling with complex

2005-10-26  marques

	* [r1583] trunk/src/Makefile.am, trunk/src/grid.F90, trunk/src/h.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/mesh_init.F90, trunk/src/multicomm.F90,
	  trunk/src/multigrid.F90, trunk/src/nl_operator.F90, trunk/src/opt_control.F90,
	  trunk/src/out.F90, trunk/src/out_inc.F90, trunk/src/poisson1D.F90,
	  trunk/src/poisson2D.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_rti.F90:
	  *) renamed mesh_create.F90 to mesh_init.F90, as the functions in this file
	  are indeed mesh_init*
	  
	  *) Lots of cleaning in the parallel stuff. Now octopus_mpi can run in only
	  1 processor. Furthermore, the TD part can be run parallel in domains,
	  states, or both (before it run only in both)
	  
	  *) Due to the cleaning, several reduce=.true. disappeared ;) This makes the
	  code slightly simpler in some places.
	  
	  I only checked in 1D. It would be great if you could
	* [r1582] trunk/src/casida.F90, trunk/src/derivatives.F90, trunk/src/epot_inc.F90,
	  trunk/src/h.F90, trunk/src/mesh.F90, trunk/src/mesh_create.F90, trunk/src/mf_inc.F90,
	  trunk/src/multicomm.F90, trunk/src/nl_operator.F90, trunk/src/out_inc.F90,
	  trunk/src/par_vec.F90, trunk/src/par_vec_inc.F90, trunk/src/restart_inc.F90,
	  trunk/src/specie.F90, trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/systm.F90,
	  trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_write.F90, trunk/src/xc_KLI.F90,
	  trunk/src/xc_OEP.F90, trunk/src/xc_OEP_SIC.F90, trunk/src/xc_OEP_inc.F90,
	  trunk/src/xc_OEP_x.F90:
	  Still some cleaning to be done. However, octopus now
	  *) runs in parallel in the ground-state in domains
	  *) runs in parallel in TD both in domains and in states

2005-10-26  acastro

	* [r1581] trunk/share/variables.local, trunk/src/geometry.F90, trunk/src/states.F90:
	  The variable geo%only_user_def is now deduced from what is read in the
	  Species block, not read from the input file. That could lead to an
	  inconsistency. One input variable less.
	  
	  Also, I documented SpinComponents: we have unpolarized, spin_polarized
	  or polarized, and spinors or non_collinear.
	* [r1580] trunk/ChangeLog:
	  *** empty log message ***
	* [r1579] trunk/src/lcao.F90, trunk/src/specie.F90, trunk/src/systm.F90:
	  atom_get_wf, which was in system module, is gone. Now there is
	  a subroutine, specie_get_iwf, that plays that role -- in the spirit
	  of specie_get_local, etc. I think it makes more sense this way.
	  atom_density should go, also, but I will take care of that later.
	  
	  In specie_get_iwf I will put also the possibility to define
	  harmonic oscillator wave functions for model potentials, etc.
	  
	  Also, I want that the calculation of unoccupied states is initiated from
	  unoccupied atomic states, rather than from random functions. These random
	  functions lead to horrible convergence problems sometimes.

2005-10-25  marques

	* [r1578] trunk/src/multicomm.F90:
	  forgot to initialize a variable
	* [r1577] trunk/configure.ac:
	  --disable-debug was not working as expected

2005-10-24  micael

	* [r1576] trunk/src/epot.F90, trunk/src/h_inc.F90:
	  *) More bug fixes related to the CDFT. Still not working though...
	* [r1575] trunk/src/lcao.F90:
	  *) Complex executable was not compiling. As I believe the line that was causing the
	  problem
	  was there only for debuging purposes I removed it.

2005-10-19  marques

	* [r1574] trunk/src/Makefile.am, trunk/src/casida.F90, trunk/src/epot.F90,
	  trunk/src/global.F90, trunk/src/grid.F90, trunk/src/gs.F90, trunk/src/h.F90,
	  trunk/src/main.F90, trunk/src/math.F90, trunk/src/mesh.F90, trunk/src/mesh_create.F90,
	  trunk/src/mf.F90, trunk/src/mix.F90, trunk/src/mpi.F90, trunk/src/multicomm.F90,
	  trunk/src/multigrid.F90, trunk/src/out.F90, trunk/src/par_vec.F90, trunk/src/restart.F90,
	  trunk/src/run.F90, trunk/src/states.F90, trunk/src/systm.F90, trunk/src/td.F90,
	  trunk/src/td_write.F90, trunk/src/xc.F90, trunk/src/xc_OEP.F90:
	  This commit is related to the multi parallelism in octopus. It still does not
	  work always, but I am leaving for the weekend, and I wanted to commit it
	  before leaving. The code compiles in serial and runs all tests.
	  
	  *) I changed quite a lot the code that Heiko and Florian wrote (now in
	  multicomm.F90). The comments are *not* consistent with the code (I will
	  change it when I come back)
	  *) The nodes are arranged in a tree structure. If you want to see the tree,
	  just use "dot" on the file tree.dot.
	  *) Now each node just gets n_index communicators. I think this is sufficient,
	  but it may be changed in the future.
	  *) Nodes are assigned using a very simple algorithm. Priority is given to
	  parallelization in k-points, then in states, and finally in domains.
	  *) TD part is still not changed (nor Casida), but the code behaves more or
	  less for the GS (at least in 1D ;)
	  *) Lots of cleaning and testing missing (for next week).

2005-10-18  xavier

	* [r1573] trunk/liboct_parser/parse.c:
	  Now liboct_parser can read variables from the environment, this is useful to
	  call octopus from scripts without having to modify the input file or to give
	  parameters from the command line.
	  
	  To use this, the environment variable OCT_PARSE_ENV must be defined and the
	  octopus variable name must be prepended with OCT_ .
	  
	  For example, to call octopus with the CG poisson solver:
	  
	  $ OCT_PARSE_ENV=1 OCT_PoissonSolver=cg_corrected octopus
	  
	  or
	  
	  $ export OCT_PARSE_ENV=1
	  $ export OCT_PoissonSolver=cg_corrected
	  $ octopus
	  
	  This works only if the variables are not defined inside of the input file
	  (if they are, variables are defined twice and I don't know what happens
	  there). Blocks are not supported.
	  
	  The code is only 15 lines long and it doesn't change anything of the rest of
	  the code of the parser, so it shouldn't introduce bugs (at least not many
	  ;-).

2005-10-18  acastro

	* [r1572] trunk/liboct/oct_gsl_f.c, trunk/src/lcao.F90, trunk/src/liboct.F90,
	  trunk/src/main.F90, trunk/src/math.F90, trunk/src/syslabels.F90, trunk/src/systm.F90:
	  I started improving the initial guesses for the SCF calculations. The
	  reason is that there are serious convergence problems for model potential
	  (quantum dots) in 1D and 2D (where random functions are used),
	  and also for the calculation of particle states in the unocc mode -- where
	  also random functions are used.
	  
	  I am basicly going to put Harmonic oscillators functions. The code I commit
	  now is far from complete (only 1D Harmonic oscillator functions for the
	  moment).

2005-10-18  xavier

	* [r1571] trunk/testsuite/finite_systems_3d/multigrid.test:
	  Added a test for the multigrid poisson solver.
	* [r1570] trunk/libxc/lda.c, trunk/libxc/util.h, trunk/libxc/xc.h, trunk/libxc/xc_f.c,
	  trunk/src/libxc.F90, trunk/src/xc.F90, trunk/src/xc_kxc.F90:
	  Added Kxc, the third derivatives of Exc, to libxc. It's calculated using a
	  second order numerical derivative of Vxc.
	* [r1569] trunk/src/poisson_multigrid.F90:
	  Added Full MultiGrid, in this scheme a good initial approximation is
	  obtained by solving the problem in the coarser levels. This is only used
	  when the approximation passed to the subroutine is not good enough.

2005-10-18  marques

	* [r1568] trunk/liboct/varinfo.c:
	  Stupid bug. I was comparing a C string with a Fortran string, and sometimes
	  it did not work out...

2005-10-17  micael

	* [r1567] trunk/src/derivatives_inc.F90, trunk/src/f_inc.F90:
	  *) Bug fixed: gradient should be initialized to zero inside subroutine
	  X(derivatives_grad) as it is declared as intent(out).

2005-10-14  micael

	* [r1566] trunk/src/h_inc.F90:
	  *) Bug fixes in the CDFT extra-terms.
	* [r1565] trunk/share/PP/HGH/B.hgh:
	  *) Bug fixed.

2005-10-14  appel

	* [r1564] trunk/src/epot.F90, trunk/src/gs.F90, trunk/src/h.F90, trunk/src/main.F90,
	  trunk/src/mf.F90, trunk/src/mpi.F90, trunk/src/out.F90, trunk/src/par_vec.F90,
	  trunk/src/restart.F90, trunk/src/states.F90, trunk/src/td.F90, trunk/src/td_write.F90,
	  trunk/src/xc_OEP.F90:
	  The parallel version of the code did not compile since
	  Alberto was declaring the global module as private. I
	  added preprocessor statements to include either the mpi
	  module or mpif.h in the corresponding files.
	  The affected files are therefore the only ones where we
	  use MPI statements.
	* [r1563] trunk/src/curv_gygi.F90:
	  natoms_ was accidentally declared as FLOAT.
	* [r1562] trunk/src/casida.F90:
	  Remove unused variables.

2005-10-14  xavier

	* [r1561] trunk/src/static_pol_lr.F90:
	  Fixed compilation issue.

2005-10-13  xavier

	* [r1560] trunk/src/main.F90, trunk/src/mix.F90:
	  Added missing 'use varinfo' that was causing problems with ifc.

2005-10-13  acastro

	* [r1559] trunk/src/cross_section.F90, trunk/src/global.F90, trunk/src/messages.F90,
	  trunk/src/profiling.F90, trunk/src/spectrum.F90:
	  The global module was not declared as private.

2005-10-13  xavier

	* [r1558] trunk/src/td_exp.F90:
	  BUGFIX: In lanczos, the workspace allocated to call ZGPADM was too small, this
	  caused the subroutine to stop sometimes.

2005-10-13  acastro

	* [r1557] trunk/share/variables.local, trunk/src/mix.F90, trunk/src/scf.F90:
	  OK, now the GR-Pulay scheme also works with domain-parallelization.
	* [r1556] trunk/share/variables.local, trunk/src/mix.F90, trunk/src/poisson3D.F90,
	  trunk/src/scf.F90:
	  The Broyden mixing scheme now also works with domain parallelization.
	  I will fix the GR-Pulay later if I have time.
	  
	  Incidentally, the mixing scheme was also wrong for the case of using
	  adaptive coordinates. This didn't mean that it yielded wrong results
	  (if the result was converged, it was correct), but it showed poor
	  convergence behavior. Now it should be better, but that remains to be
	  tested.

2005-10-12  acastro

	* [r1555] trunk/src/main.F90, trunk/src/varinfo.F90:
	  Bug fixed.
	  The code was not complaining when passing a a non-valid CalculationMode
	  input variable. It just did nothing.
	  
	  In order to fix this bug, I introduced a new public function in the
	  varinfo module: varinfo_valid_option. It returns .true. if the value given
	  to an option is valid. *However*, it now only works for variables whose
	  range of valid option is a finite list of integers (such as the
	  CalculationMode). In principle, we could get ambitious about this, and
	  increase the functionality of it.

2005-10-12  marques

	* [r1554] trunk/libxc/lda_c_pw.c:
	  There was a sign wrong in the definition of pw92.
	  
	  Micael, can you please test this functional?
	* [r1553] trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/mf_inc.F90, trunk/src/simul_box.F90:
	  *) mpi code now works even if using only one processor (it was given ?????? before)
	  *) You can now run in parallel with non-local pseudopotentials
	  
	  However, I was not able to find the bug when running mpi with interacting
	  electrons. This is what is missing for us to have the parallel version!!!
	  Help anyone????
	* [r1552] trunk/libxc/Makefile.am, trunk/src/Makefile.am, trunk/src/epot.F90,
	  trunk/src/epot_inc.F90, trunk/src/grid.F90, trunk/src/h_inc.F90, trunk/src/main.F90,
	  trunk/src/td.F90:
	  Some cleaning:
	  *) test.x is no longer generated in libxc/
	  *) changed the names of several single character variables. Please *do not*
	  call a variable a, b, n, c or whatever!!!!
	  *) I noticed that some of you had tabs of 3 and 4 spaces. Do not forget that
	  the default we agreed upon some years ago was *2*. Please change you emacs
	  settings!

2005-10-11  acastro

	* [r1551] trunk/INSTALL, trunk/TODO:
	  Removed the TODO list, which was wildly outdated. Now it is an empty
	  file. We could start maintaining it after the release...
	  
	  Also, I have put the GNU generic installation instructions in the INSTALL
	  file, after a small header referring the reader to the manual for octopus-
	  specific details.
	* [r1550] trunk/src/casida.F90:
	  Bug fixed.
	  For some reason I had forgotten to remove a "stop" statement that I put
	  for debugging...

2005-10-11  appel

	* [r1549] trunk/src/nl_operator.F90:
	  Do only ghost updates in znl_operator_operate when there is more
	  than one partition.
	* [r1548] trunk/src/grid.F90:
	  Pass gr to grid_init as intent(inout). The code was segfaulting with
	  the NAG compiler when only intent(out) was used. The problem didn't
	  show up with the Intel compiler and I still don't understand why NAG
	  failes in this case (compiler bug)?

2005-10-09  acastro

	* [r1547] trunk/ChangeLog:
	  *** empty log message ***
	* [r1546] trunk/ChangeLog:
	  I substituted the ChangeLog, that none of us maintained, by a proper one.
	  I generated it through the command:
	  
	  cvs2cl.pl --fsf -l "-d >2005-06-01"
	  
	  The command cvs2cl.pl seems to be pretty standard (at least it is in the
	  debian official repository). Basically it uses the output from the cvs log
	  command -- so all the comments that we do when committing code.
	  The option "-d >2005-06-01" selects logs more recent than 2005-06-01.
	  Otherwise the file would get too large. The choice was completely
	  arbitrary.
	  
	  Note than commiting a revision to the ChangeLog file, the way to do it
	  is in my opinion to commit it isolated (just the ChangeLog file), and
	  putting no log in the commit message (it is sort of redundant to log
	  the ChangeLog). Of course this first one is the exception.

2005-10-07  lorenzen

	* [r1545] trunk/share/util/plot_profiling:
	  Added simple perl script to generate some plots from results
	  of profiling runs.
	* [r1544] trunk/src/grid.F90, trunk/src/mf_inc.F90, trunk/src/nl_operator.F90,
	  trunk/src/par_vec.F90, trunk/src/par_vec_inc.F90:
	  * The domain communicator in grid_init was accidentally set to
	  MPI_COMM_WORLD.
	  * vec_ghost_update and MPI_Allreduce are only called when haveing
	  more than one partition.
	  * Added some notes concerning a possible problem with the size of
	  the global array in type(pv_type).

2005-10-06  acastro

	* [r1543] trunk/src/grid.F90, trunk/src/poisson_multigrid.F90, trunk/src/scf.F90,
	  trunk/src/systm.F90, trunk/src/td_write.F90:
	  Just style: the grid module was not declared as private, and so some
	  modules were used through it, instead of directly, which I think is
	  bad practice.

2005-10-06  lorenzen

	* [r1542] trunk/src/mpi.F90:
	  It is now possible to have more index-combinations than
	  nodes (i. e. n_node < product(index_range)). In this case, the
	  indices are mapped onto the available nodes with respect
	  to communication costs of the different indices.
	  This mapping is also done if n_node = product(index_range) to
	  keep things simple but in this case the outcome is just a one-to-one
	  mapping.
	  The contraction is done using METIS.
	  
	  The multicomm_sanity_check has to be refreshed as I have removed the
	  input variable NumberOfProcessorsForDomain. I think this variable
	  leads to too much confusion. The number of processors per domain
	  is implicitly set by n_node/n_domain_comm (and n_domain_comm
	  is either product(range_index) or n_node if n_node < product(range_index)).

2005-10-05  lorenzen

	* [r1541] trunk/src/grid.F90, trunk/src/mpi.F90, trunk/src/systm.F90:
	  Changes related to the multicommunicator part:
	  1) Fixed the creation of domain communicators in case of
	  no domain parallelization.
	  2) Changed to code to compute the index communicators to use generalized
	  indexing functions.
	  3) Corrected the explainatory comment at head of mpi.F90.
	  
	  Bugfix: The indexing scheme for domain_comm_of_node has
	  to explicitly declared for formal parameters as the index range
	  starts with 0.

2005-10-05  acastro

	* [r1540] trunk/src/casida.F90, trunk/src/liboct.F90, trunk/src/out.F90,
	  trunk/src/states_inc.F90:
	  Substituted loct_wfs_list by some loct_isinstringlist, easier to use.
	  (oct_wfs_list stays internal to the lib_oct module as an interface to
	  the C library).

2005-10-05  appel

	* [r1539] trunk/src/grid.F90, trunk/src/systm.F90:
	  Call simul_box_init before states_init is called. Otherwise lattice
	  primitive vectors are not available for kpoint initialization (this
	  was a leftover from yesterdays rearrangement).
	* [r1538] trunk/src/casida.F90, trunk/src/curv_gygi.F90, trunk/src/linalg_adv_lapack.F90,
	  trunk/src/mpi.F90, trunk/src/poisson_corrections.F90, trunk/src/spectrum.F90,
	  trunk/src/td_write.F90:
	  Remove unused variables.

2005-10-04  appel

	* [r1537] trunk/src/geometry.F90, trunk/src/grid.F90, trunk/src/mpi.F90,
	  trunk/src/states.F90, trunk/src/systm.F90:
	  These changes introduce initial support for (MPI) multi-communicators.
	  In general the code now distinguishes between domain communicators and
	  index communicators. The latter will be used for state indices and
	  kpoints. The new code in the mpi module allows for index parallelizations
	  in n-dimensional hypercubes, i.e. I kept the routines general so that
	  in principle we can add further indices later on. For now I specialized
	  to a two dimensional index parallelization: states and kpoints.
	  
	  Multi-communicators are initialized with multicomm_init. At the point
	  when this routine is called the number of states and kpoints have to
	  be available. This required some reordering in system_init, i.e. a
	  stripped down version of states_init is now called _before_ we call
	  grid_init. In this way we can make sure that the number of states and
	  kpoints is known and that the right domain communicators are passed to
	  grid_init.
	  
	  There is also a new input variable called ParallelizationStrategy that
	  decides what kind of parallelization Octopus will use:
	  
	  1) 000 - serial (single domain, all states, kpoints on a single processor)
	  2) 001 - only_domains (only parallelization in domains)
	  3) 010 - only_kpoints (no parallelization in domains, only in kpoints)
	  4) 011 - kpoints_domains (combined parallelization in kpoints and domains)
	  5) 100 - only_states (only parallelization in state indices)
	  6) 101 - states_domains (combined parallelization in states and domains)
	  7) 110 - states_kpoints (no parallelization in domains, only in states and kpoints)
	  8) 111 - full (parallelization in states, kpoints and domains)
	  
	  Except for a few cases this list is of course not available yet. Also a
	  possible choice will depend on the run mode. There is quite some integration
	  work in the rest of the code that has to be done (e.g. the existing TD
	  parallelization should be combined with this scheme, other things like
	  parallelization in kpoints hasn't been touched at all).
	  
	  The idea is to stop the code for parallelization schemes that are not
	  available yet and to get only the important ones (e.g. 1, 2 or 5 for td)
	  running initially. Later refinement is always possible but it is in
	  my opinion important to have things organized from the start ...
	  
	  Expect the parallel version of the code to be broken for quite some
	  time until the integration with the above scheme has been completed.
	  If you need to run eg. TD in parallel please fetch an older version
	  from the cvs that was still ok.
	* [r1536] trunk/src/main.F90:
	  Reorder profiling calls to allow profiling also for all subsystems
	  in multi subsystem mode.
	* [r1535] trunk/src/profiling.F90:
	  o Initialize all counter in profiling_init.
	  o Fix SIGFPE. Avoid divisions by zero.
	* [r1534] trunk/src/io.F90:
	  Fix typo.

2005-10-02  acastro

	* [r1533] trunk/src/crystal.F90, trunk/src/linalg_adv_lapack.F90, trunk/src/mix.F90,
	  trunk/src/spectrum.F90, trunk/src/states_inc.F90:
	  The calculation of the determinant, in the routines ddeterminant and
	  zdeterminant that I just submitted, was not working for the Hermitian
	  case. I was actually unable of making it work, either because of my
	  fault or because an error in my implementation of LAPACK, I don't know.
	  In any case, I removed the Hermitian case; all cases are treated
	  now in the general case, which works fine.
	* [r1532] trunk/src/casida.F90, trunk/src/crystal.F90, trunk/src/curvlinear.F90,
	  trunk/src/linalg_adv.F90, trunk/src/linalg_adv_lapack.F90, trunk/src/math.F90,
	  trunk/src/mix.F90, trunk/src/spectrum.F90, trunk/src/states_inc.F90:
	  The routine lalg_invert was assuming only symmetric/Hermitian matrices.
	  Now it may only use non-symmetric ones. I also "merged" the determinant
	  and inversion matrices, since they share the code. But I left two
	  public wrappers, lalg_determinant and lalg_inverter. There is a
	  mandatory argument, invert = .false./.true., which tells wether or not
	  the matrix is to be inverted -- the determinant is always calculated,
	  and is the function result.
	  Since it is no longer necessary, invert_3by3 is gone.

2005-09-30  acastro

	* [r1531] trunk/src/casida.F90:
	  Added support for spin-polarized calculations in the linear-response
	  TDDFT formalism (Casida mode).
	  Not all kernels work, though. And in some cases I get some negative
	  excitation energies, don't know why.
	* [r1530] trunk/src/casida.F90, trunk/src/restart.F90, trunk/src/td_write.F90:
	  Added preliminary support for spin-polarized linear response TDDFT
	  calculations.

2005-09-29  acastro

	* [r1529] trunk/src/casida.F90:
	  Just rearrangements in the casida module. I think it is cleaner this way.
	  The reason is that I had to do these changes in my temporal branch, and then
	  I thought that since this looks nicer, I should put it in main.

2005-09-29  lorenzen

	* [r1528] trunk/src/mf_inc.F90, trunk/src/profiling.F90:
	  (*) The profiling module now also computes the average time
	  spent between in and out calls and writes it in an extra
	  column in the output.
	  (*) Added profiling calls to measure the time of allreduce
	  in mf_dotp.

2005-09-29  acastro

	* [r1527] trunk/src/casida.F90, trunk/src/restart.F90, trunk/src/td_write.F90:
	  Introduced a "restart_look" function that takes a look at a restart
	  directory to see what is inside, how many states, etc.
	  This way there is no need to read NumberUnoccStates in td_write and in
	  the casida run-mode. I think this is the cleanest way.
	* [r1526] trunk/src/casida.F90:
	  I was about to document the variables in the casida run-mode
	  (the ones that decide which mode is to be run -- eigenvalues differences,
	  Petersilka, or Casida), but I realized that the best way to document them
	  is to eliminate them. This way it is much easier for the users and for us.
	  
	  There is no reason why one wouldn't want to get the eigenvalues
	  differences, since it takes a fraction of a second.
	  And ther is no reason why one wouldn't want to execute the
	  Petersilka scheme: the time spent on it is not lost since the matrix
	  elements calculated are used afterwards for the Casida approach. And,
	  in case that one wants to do the Petersilka calculation and not the Casida
	  one because it is too time-consuming, one can always abort the program
	  after the Petersika file has been written.
	  
	  Also, I fixed a bug regarding the proper reading of the stored matrix
	  elements -- before it did not consider that the matrix is symmetric, which
	  led to unnecessary calculations.
	  
	  I changed the variable "ExciteStates" (misleading name) to
	  "LinearResponseKohnShamStates", and documented it.

2005-09-28  lorenzen

	* [r1525] trunk/src/mpi.F90:
	  Added a type for the multi communicator part and a partial description
	  of how it will work.

2005-09-28  acastro

	* [r1524] trunk/src/epot.F90, trunk/src/lasers.F90:
	  I rewrote a little bit the laser field definition. Wrote a short
	  piece of documentation for "TDLasers"
	  
	  The reason is that I wanted to allow for the possibility of a more arbitary
	  shape for the spatial part of the external field. Before it could only be a
	  dipolar field. Now the code may read the shape from a file. Of course this
	  file has to be written before in some way.
	  
	  I had been working on this in my own branch, the one where I am implementing
	  the technique of construction of excited states through "propagation in the
	  BLUES" (BLackout of Undesired Excited States, I just made up the name),
	  but I thought that maybe it would be nice to put it in main, since it could
	  be useful for other purpuses (application of quadrupolar fields, who knows)

2005-09-28  lorenzen

	* [r1523] trunk/src/mesh_lib.F90, trunk/src/nl_operator.F90, trunk/src/par_vec.F90:
	  Removed unused variable dir.

2005-09-28  acastro

	* [r1522] trunk/src/main.F90, trunk/src/run.F90, trunk/src/syslabels.F90:
	  Now the multi system mode is not any more a run mode. The variable
	  CalculationMode may now be a scalar (in which case we only have one
	  system) or a block (in which case it should include the labels in the first
	  row, the run-modes in the second row, and the order in the third row).

2005-09-28  appel

	* [r1521] trunk/share/samples/Na2:
	  Update sample to take new naming scheme for debug level
	  into account.
	* [r1520] trunk/src/io.F90, trunk/src/main.F90, trunk/src/profiling.F90:
	  Syslabels have to be available before the first io_mkdir
	  takes place. The call of io_init() and profiling_init()
	  is now done after syslabels_init().
	* [r1519] trunk/src/messages.F90:
	  Remove recursion in timing functions that caused stack
	  overflows. The push/pop functions were calling functions
	  that were calling push/pop which were calling functions
	  that were calling push/pop which were calling functions
	  that were calling push/pop which were calling functions
	  ....
	  :)

2005-09-27  acastro

	* [r1518] trunk/src/eigen_trlan.F90, trunk/src/epot.F90, trunk/src/global.F90,
	  trunk/src/grid.F90, trunk/src/hgh.F90, trunk/src/io.F90, trunk/src/main.F90,
	  trunk/src/mesh.F90, trunk/src/messages.F90, trunk/src/nl_operator.F90,
	  trunk/src/specie.F90, trunk/src/states.F90, trunk/src/tm.F90, trunk/src/v_ks.F90,
	  trunk/src/xyzanim.F90:
	  I eliminated the conf%verbose variable. So we don't have verbosity levels
	  any more; only debug and non-debug mode -- which is controlled by the
	  in_debug_mode logical variable.
	* [r1517] trunk/src/hs.F90, trunk/src/rotational_strength.F90, trunk/src/spectrum.F90,
	  trunk/src/states.F90, trunk/src/systm.F90:
	  Fixed the rotational strength program, which was broken. (Now it
	  is not broken, but still could be giving wrong numbers).
	  Also, removed a couple of appearances of vol_pp... I hope it helps for the
	  parallelization.
	* [r1516] trunk/src/rotational_strength.F90, trunk/src/spectrum.F90, trunk/src/td_write.F90:
	  Just usability; I made all headers of the output files look a little
	  bit more homogeneous.

2005-09-27  lorenzen

	* [r1515] trunk/src/hs.F90:
	  Bugfix: mode was not declared.
	* [r1514] trunk/src/math_cg_inc.F90, trunk/src/poisson_cg.F90,
	  trunk/src/poisson_corrections.F90:
	  Fixed the cg corrected poisson solver to work in parallel.
	  Only some arrays had to extended to hold ghost points.
	  
	  However, it seems that the numbers from the cg corrected as well
	  as from the cg solver differ considerably compared to those computed by
	  serial runs which leads to more and more inaccurate eigenvalues
	  with increasing number of nodes (and -- as I mentioned previously --
	  to more SCF cycles eating up the parallel speed up, it is strange
	  that it converges anyway).
	  So, this is still an open issue.
	* [r1513] trunk/src/Makefile.am, trunk/src/global.F90, trunk/src/io.F90, trunk/src/main.F90,
	  trunk/src/mf.F90, trunk/src/mf_inc.F90, trunk/src/nl_operator.F90, trunk/src/par_vec.F90,
	  trunk/src/par_vec_inc.F90, trunk/src/profiling.F90, trunk/src/scf.F90:
	  Sorry, I forgot to add the profiling module...
	  
	  Here it is together with some minor changes:
	  1) Everything is called profiling -- not profile -- now.
	  2) The subdirectory for profiling results is called
	  profiling.NNN with NNN being the number of nodes. This
	  way it is easier to measure scaling because a new subdirectory
	  is created for every run.

2005-09-26  acastro

	* [r1512] trunk/src/Makefile.am, trunk/src/hs.F90, trunk/src/hs_from_acc.F90,
	  trunk/src/hs_from_mult.F90:
	  Merged hs-from-mult and hs-from-acc programs; doesn't make sense to
	  have two. Now it is called oct-harmonic-spectrum, and an input variable
	  HarmonicSpectrumMode decides in which way the spectrum is calculated.
	  
	  The HSPolarization is renamed to HarmonicSpectrumPolarization. I
	  documented the variables.

2005-09-26  appel

	* [r1511] trunk/src, trunk/src/.cvsignore:
	  Update cvsignore file.

2005-09-26  lorenzen

	* [r1510] trunk/src/Makefile.am, trunk/src/global.F90, trunk/src/main.F90,
	  trunk/src/messages.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90, trunk/src/nl_operator.F90,
	  trunk/src/par_vec.F90, trunk/src/par_vec_inc.F90, trunk/src/scf.F90:
	  Added a simple profiling module, a profiling mode (ProfileMode in
	  the input file) and some profiling hooks to the code.
	  
	  The profiler counts the number of times a code between
	  call profile_in(tag)
	  ...
	  call profile_out(tag)
	  is executed and how much time this takes.
	  
	  In the end, each node writes a file './profile/profile.nnn' (nnn
	  being the node number) with statistics for each tag. Tags
	  have to be registered in the profile module.
	  
	  Later, I will write a simple script that displays the profiling
	  information of different runs or different parts of the code
	  in some diagrams.

2005-09-26  acastro

	* [r1509] trunk/src/curv_gygi.F90, trunk/src/derivatives.F90:
	  Changed the defaults for the Gygi grid, since the ones that were used
	  lead to the failure of the inversion of the mapping through the Newton-
	  Raphson procedure in many cases.
	  
	  I also tried to improve this procedure for the difficult cases, by trying
	  to improve the guess of the initial point. But it does not guarantee
	  the result.

2005-09-26  appel

	* [r1508] trunk/src/states_inc.F90:
	  Correct lalg_scal call (NP -> NP_PART transition).
	* [r1507] trunk/src/Makefile.am, trunk/src/liboct_parser.F90, trunk/src/messages.F90,
	  trunk/src/syslabels.F90:
	  Remove 'use messages' from liboct_parser and syslabels. In both modules
	  a write_fatal is now done manually. I had to change this to circumvent
	  cyclic dependencies that appeared in multi_subsys_mode.
	* [r1506] trunk/src/epot_inc.F90:
	  Remove SIGFPE that occurred for periodic systems during force
	  calculations.
	* [r1505] trunk/src/ode_solver.F90, trunk/src/ode_solver_inc.F90, trunk/src/root_solver.F90,
	  trunk/src/root_solver_inc.F90, trunk/src/scalar_mesh.F90, trunk/src/sparskit.F90,
	  trunk/src/sparskit_inc.F90:
	  Add calls to input_error().
	* [r1504] trunk/src/poisson3D.F90:
	  push_sub call was missing (stack got scrambled due to this).

2005-09-26  acastro

	* [r1503] trunk/src/geometry.F90, trunk/src/spectrum.F90, trunk/src/units.F90:
	  Bug fixed.
	  Forgot to remove the public declaration of the strength_function stuff
	  as public in spectrum module.
	  
	  Added the documentation of a couple of variables.

2005-09-25  acastro

	* [r1502] trunk/src/Makefile.am, trunk/src/spectrum.F90, trunk/src/strength_function.F90:
	  Removed strength_function.F90 file and, with it, oct-sf program.
	  Now oct-cross-section should be used instead.
	  
	  The dipole strength is also printed in the cross_section_vector file.
	  
	  Still some work has to be done to clean up the utility programs, to
	  make them more user-friendly, and to document them properly.

2005-09-23  lorenzen

	* [r1501] trunk/src/restart_inc.F90:
	  Removed unused variable.
	* [r1500] trunk/src/poisson_cg.F90, trunk/src/poisson_corrections.F90:
	  Fixed the poisson cg solver to work in parallel. Therefore I
	  had to change get_multipoles to use Xmf_integrate instead of
	  doing the integration by hand and boundary_conditions to
	  respect the different location of boundary points in the
	  parallel case.
	  
	  Presently, it seems that the number of SCF cycles increases
	  when run on more nodes: 11 iterations serially, 17 on two nodes
	  and 24 on 4 nodes. This may be due to some minor bug
	  I have not found yet (but the intermediate numbers I have
	  checked looked quite good). It may also be related to the
	  non-commuting algebra on machine numbers. This will have to
	  be investigated but at least it is working in principle.

2005-09-23  appel

	* [r1499] trunk/src/h_inc.F90:
	  Bugfix: the spinor test was broken since lalg_scal calls are
	  affected by the NP -> NP_PART transition. There seem to be
	  further places in the code that might have the same problem.
	  This is to be checked.

2005-09-23  acastro

	* [r1498] trunk/src/spectrum.F90:
	  Th cross sectio utility now outputs, in addition to the full tensor, also
	  the two principal invariants: the trace, and the anisotropy \Delta\sigma,
	  defined as:
	  
	  \Delta\sigma = (1/3)*( 3*Tr(\sigma^2) - Tr(\sigma)^2 )
	  
	  Also, it prints the names of the columns and the units.
	* [r1497] trunk/src/broad.F90, trunk/src/centergeom.F90, trunk/src/cross_section.F90,
	  trunk/src/hs_from_acc.F90, trunk/src/hs_from_mult.F90, trunk/src/make_st.F90,
	  trunk/src/phonon_spectrum.F90, trunk/src/rotational_strength.F90,
	  trunk/src/strength_function.F90, trunk/src/syslabels.F90, trunk/src/xyzanim.F90:
	  Bug fixed.
	  All subprograms crashed in debugging mode because the "debug" directory
	  was not created.

2005-09-23  lorenzen

	* [r1496] trunk/src/poisson2D.F90:
	  Bugfix: Hardcoded bounds for the two dimensions to make
	  the NAG compiler with -C=array happy.
	* [r1495] trunk/src/eigen_plan.F90:
	  Actually, then lanczos solver is working. I just tested with a way to
	  small mesh (just a handful of points). So the FIXME is removed.

2005-09-23  appel

	* [r1494] trunk/src/eigen_cg.F90:
	  Now also eigen_solver_cg2_new seems to work properly in parallel,
	  NP -> NP_PART has been adjusted.
	* [r1493] trunk/src/derivatives.F90:
	  The code spends quite some time in make_discretization when
	  running with curvlinear coordinates. Print a status message
	  to notify the user what we are doing.
	* [r1492] trunk/src/mesh_create.F90, trunk/src/mpi.F90:
	  o Correct push_sub label in mesh_partition.
	  o Fix format strings for output.

2005-09-23  lorenzen

	* [r1491] trunk/src/states_inc.F90:
	  Bugfix: Some 1:m%np in a vector operation were missing.
	* [r1490] trunk/src/gs.F90:
	  Bugfix: ground_state_run has no parameter gs, so the macro
	  NP_PART gr%m%np_part does not work. sys% has to be prepended.

2005-09-22  acastro

	* [r1489] trunk/src/restart_inc.F90:
	  Bug fixed.
	  Bad choice for the error flag... ierr is being used as a counter there.

2005-09-22  appel

	* [r1488] trunk/src/derivatives_inc.F90, trunk/src/f_inc.F90, trunk/src/gs.F90,
	  trunk/src/h_inc.F90, trunk/src/mf_inc.F90, trunk/src/nl_operator.F90,
	  trunk/src/poisson_corrections.F90, trunk/src/states_inc.F90:
	  Already a few changes for the NP NP_PART transistion. More to come ...
	  (I've to run now; possible autobuild/test fails due to this will be fixed
	  tomorrow).
	* [r1487] trunk/src/complex.F90, trunk/src/real.F90:
	  Fix serial compilation.
	* [r1486] trunk/src/eigen_cg.F90:
	  Sample code to be discussed in the IRC meeting ...
	* [r1485] trunk/src/global.h:
	  Introduce similar to NP a macro for NP_PART:
	  
	  #define NP_PART gr%m%np_part

2005-09-22  acastro

	* [r1484] trunk/src/units.F90:
	  Just continuing with my documentation effort.

2005-09-22  lorenzen

	* [r1483] trunk/src/out.F90, trunk/src/restart_inc.F90:
	  Introduced handling of 'parallel file i/o':
	  I added four new i/o routines to out.F90:
	  
	  iopar_open, iopar_close, iopar_read, iopar_backspace
	  
	  which correspond to
	  
	  io_open, io_close, read, backspace
	  
	  respectively. Those routines are in the sense parallel that
	  only root opens, closes, reads, modfies the seek pointer
	  but all nodes get the result and the error code. Some
	  compromise had to be made with the read: It is only possible
	  to read files lines by lines into a string, which can be
	  tokenized by Fortran intrinsic read afterwards.
	  These routines can be called in parallel or serial, in serial
	  they are just another layer of wrappers, which call
	  io_* routines.
	  
	  With this abstraction it is possible to write file reading code
	  in a consistent manner in serial and parallel.
	  
	  As a prototypic application, I have translated the ugly
	  #ifdef spaghetti code from yesterday in restart_inc to the new coding style,
	  which looks like this:
	  
	  Doing everything by hand:
	  <...>
	  do
	  #if defined(HAVE_MPI) && defined(HAVE_METIS)
	  if(m%vp%rank.eq.m%vp%root) then
	  #endif
	  read(unit=iunit, fmt='(a)', iostat=i) char
	  #if defined(HAVE_MPI) && defined(HAVE_METIS)
	  endif
	  call MPI_Bcast(i, 1, MPI_INTEGER, m%vp%root, m%vp%comm, mpierr)
	  call MPI_Bcast(char, 1, MPI_CHARACTER, m%vp%root, m%vp%comm, mpierr)
	  #endif
	  if(i.ne.0.or.char=='%') exit
	  
	  #if defined(HAVE_MPI) && defined(HAVE_METIS)
	  if(m%vp%rank.eq.m%vp%root) then
	  #endif
	  backspace(unit=iunit)
	  #if defined(HAVE_MPI) && defined(HAVE_METIS)
	  endif
	  #endif
	  
	  #if defined(HAVE_MPI) && defined(HAVE_METIS)
	  if(m%vp%rank.eq.m%vp%root) then
	  #endif
	  read(unit=iunit, iostat=i, fmt=*) ik, char, ist, char, idim, char, filenam
	  e
	  #if defined(HAVE_MPI) && defined(HAVE_METIS)
	  end if
	  call MPI_Bcast(ik, 1, MPI_INTEGER, m%vp%root, m%vp%comm, mpierr)
	  call MPI_Bcast(ist, 1, MPI_INTEGER, m%vp%root, m%vp%comm, mpierr)
	  call MPI_Bcast(idim, 1, MPI_INTEGER, m%vp%root, m%vp%comm, mpierr)
	  #endif
	  if(index_is_wrong()) then
	  #if defined(HAVE_MPI) && defined(HAVE_METIS)
	  if(m%vp%rank.eq.m%vp%root) then
	  #endif
	  read(unit=iunit2, iostat=i, fmt=*) ! skip the line in the occs file
	  #if defined(HAVE_MPI) && defined(HAVE_METIS)
	  end if
	  #endif
	  cycle
	  end if
	  <...>
	  
	  With iopar_* routines:
	  <...>
	  do
	  call iopar_read(m, iunit, line, i)
	  read(line, '(a)') char
	  if(i.ne.0.or.char=='%') exit
	  
	  call iopar_backspace(m, iunit)
	  
	  call iopar_read(m, iunit, line, ierr)
	  read(line, *) ik, char, ist, char, idim, char, filename
	  if(index_is_wrong()) then
	  call iopar_read(m, iunit2, line, ierr)
	  cycle
	  end if
	  <...>
	  
	  Note the 'doubling' of the read lines: one call to iopar_read
	  to get the line and one to read to tokenize it.
	  
	  This approach shown can easily be adopted to idditional o_* routines
	  if the need arises.
	  Moreover, there are surely lots of spots in the code that need
	  maintenance in this respect.

2005-09-22  acastro

	* [r1482] trunk/src/global.F90, trunk/src/mesh_lib.F90, trunk/src/run.F90:
	  Removed the conf%boundary_zero_derivative variable.
	  
	  The boundary conditions should be taken care of elsewhere.
	  Anyways, the zero derivative boundary conditions (Dirichlet boundary
	  conditions, I think they were called) were not used now. Maybe we should
	  put them back in the future, but in some other way.
	* [r1481] trunk/src/gs.F90, trunk/src/io.F90, trunk/src/restart_inc.F90:
	  (*) I committed what I think it is a good option for the variable that
	  defines, from the end user point of view, the debugging level.
	  Basically it is only one, "DebugLevel". Take a look, it is documented.
	  I kept the internal variables, conf%verbose and in_debug_mode, for the
	  moment being.
	  We can change this later, I leave it open to discussion.
	  We also have to think what we do with the "push_sub"/"pop_sub". I still
	  think that a preprocessor def:
	  
	  #define PUSH_SUB(x) if(in_debug_mode) call push_sub('x')
	  
	  would look nice.
	  
	  (*) A couple of bugs fixed -- preprocessing out MPI stuff when
	  compiling in serial.

2005-09-22  appel

	* [r1480] trunk/configure.ac, trunk/src/Makefile.am, trunk/src/messages.F90:
	  Rename DISABLE_DEBUG as NDEBUG to comply with the C standard.
	* [r1479] trunk/src/complex.F90, trunk/src/gs.F90, trunk/src/real.F90,
	  trunk/src/restart_inc.F90:
	  Don't use MPI timestamp macro if configured with --disable-debug.

2005-09-22  acastro

	* [r1478] trunk/src/io.F90:
	  Just documentation of some variables. Before release, all variables should
	  be documented, both in the code and in the manual!!
	* [r1477] trunk/src/grid.F90:
	  Bug fixed.
	  MPI_COMM_WORLD does not exist in serial mode...

2005-09-22  appel

	* [r1476] trunk/src/messages.F90, trunk/src/mpi.F90:
	  Bugfix: There were further places where if(in_debug_mode) statements
	  were missing.

2005-09-22  lorenzen

	* [r1475] trunk/src/grid.F90, trunk/src/mesh.F90, trunk/src/mesh_create.F90,
	  trunk/src/nl_operator.F90, trunk/src/par_vec.F90, trunk/src/poisson1D.F90,
	  trunk/src/poisson2D.F90:
	  Clean-up of the following things:
	  
	  1) part (i. e. the point to partition mapping) in type(mesh_type)
	  has moved to type(pv_type) where it belongs. npart has been
	  removed from type(mesh_type) because the number of partitions
	  is already stored in type(pv_type).
	  
	  2) The number of partitions created now depends on the communicator
	  passed to mesh_partition and vec_init. They do a MPI_Comm_size call
	  to get the number of nodes. For this to work, a communicator is
	  passed to mesh_init, which is MPI_COMM_WORLD at the moment but this
	  will change.
	  
	  3) mesh_partition_init_default and vec_init_default are removed.
	  They are not needed anynore with the new communicator parametrization.
	  mesh_partition_end is removed as part is now in type(pv_type)
	  and will be deallocated by vec_end.
	  
	  4) Some spots in the code used m%part, they were changed to m%vp%part.
	* [r1474] trunk/src/messages.F90:
	  Bugfix: write_debug did not check if octopus is in
	  debug mode.

2005-09-21  acastro

	* [r1473] trunk/src/cross_section.F90, trunk/src/spectrum.F90:
	  Bugs fixed and code cleaning.

2005-09-21  appel

	* [r1472] trunk/src/restart_inc.F90:
	  Add ifdefs to fix serial build.

2005-09-21  lorenzen

	* [r1471] trunk/src/eigen_cg.F90, trunk/src/eigen_plan.F90, trunk/src/gs.F90,
	  trunk/src/h_inc.F90:
	  I had to introduce a rather small but invasive change:
	  As we need ghost points in parallel (which are stored
	  after the local points in a vector), Xpsi needs
	  np_part entries (I wonder how the code worked with
	  Xpsi being allocated for np values -- probably because
	  bounds checking was switched off).
	  This, in consequence, needs changes in many places where
	  vector operations involving Xpsi of the form
	  
	  ... Xpsi(:, ...,) ... a(:, ...) ... b(:)
	  
	  occur. The reason is that a, b and the like
	  may normally have np values but then the wildcard index has
	  different ranges which -- unfortunately -- is handled
	  differently by different compilers.
	  Thus, the above line has to be
	  
	  ... Xpsi(1:np, ...,) ... a(1:np, ...) ... b(1:np)
	  
	  I've already fixed allocation of Xpsi and the cg_solver as
	  well as some routines of h_inc.F90. Now, it is possible
	  to compute non interacting electrons using curvlinear
	  coordinates in parallel in at least 1D and 2D. As Heiko
	  has already translated the 1D and 2D poisson solver to
	  parallel, we can even do a bit more -- but that is
	  not tested yet.
	  All the above only works with the cg eigensolver, lanczos
	  is a different-story: for some reason, an index gets out
	  of bound when running in parallel. I have put
	  a FIXME at the appropriate spot. This should be
	  fixed next that we can compare results from cg and lanczos.
	* [r1470] trunk/src/restart_inc.F90:
	  Changed the file input bevahiour in restart_read: Only the
	  root node is allowed to read files.
	  This should be our general approach to file-input for
	  parallel code from now on because
	  1) handling of I/O errors should be centralized,
	  2) sometimes freshly written files are not available
	  to remote nodes because of NFS latencies which leads to
	  deadlocks.
	  There are - I guess - many places in the code where
	  file input has to be changed. Like it is done now in
	  restart_inc.F90 is really ugly, so changeing other spots
	  in the code should wait until some better abstraction is
	  found. I am thinking about this.
	  
	  File output is no issue because it is already
	  centralized.
	* [r1469] trunk/src/nl_operator.F90:
	  Bugfix: nl_operator_equal forgot to copy the op_cmplx attribute
	  to the duplicated operator.
	* [r1468] trunk/src/derivatives.F90:
	  Simplified the determination of points, which must have a zero
	  weight due to boundary conditions.
	* [r1467] trunk/src/out_inc.F90, trunk/src/par_vec_inc.F90:
	  Somehow, the TS macro from the mpi module causes seg faults sometimes.
	  In par_vec_inc.F90 and out_inc.F90 the debug code is put in by hand
	  using MPI_Debug_In and MPI_Debug_Out directly.
	* [r1466] trunk/src/derivatives_inc.F90, trunk/src/states_inc.F90:
	  Added push_sub and pop_sub to several routines.

2005-09-21  appel

	* [r1465] trunk/debian/rules:
	  Remove debug executables from the nightly autobuild.

2005-09-21  acastro

	* [r1464] trunk/src/cross_section.F90, trunk/src/spectrum.F90:
	  The oct-cross-section tensor now looks for "multipoles" or "multipoles.x"
	  files, and decides about the equivalent axis and wether or not to calculate
	  the full tensor, and how, depending on what it sees, rather than via
	  the input variables, as before.

2005-09-21  appel

	* [r1463] trunk/configure.ac, trunk/src/Makefile.am, trunk/src/global.F90,
	  trunk/src/grid.F90, trunk/src/io.F90, trunk/src/main.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/messages.F90, trunk/src/mpi.F90,
	  trunk/src/nl_operator.F90, trunk/src/out_inc.F90, trunk/src/par_vec.F90,
	  trunk/src/sparskit_driver.F90:
	  Modified the debug mode. Before the debug mode was opt in: you explicitely
	  had to enable the mode with --enable-debug. Now all DEBUG preprocessor flags
	  have been replaced by Fortran if statements. The Debug mode is triggered by
	  setting DebugMode = yes in the input file.
	  The call to push_sub and pop_sub routines will always be performed (in critical
	  places like mf_dotp I will later make further modifications). To create an
	  executable that does not have this overhead you have to opt out, ie. remove
	  the debug mode by configuring with --disable-debug.

2005-09-21  acastro

	* [r1462] trunk/src/broad.F90:
	  The defaults were very badly chosen.

2005-09-21  appel

	* [r1461] trunk/liboct/oct_f.c, trunk/src/io.F90, trunk/src/liboct.F90:
	  Add oct_nanosleep to liboct.

2005-09-21  acastro

	* [r1460] trunk/src/Makefile.am, trunk/src/global.F90, trunk/src/main.F90:
	  Heiko: I was about to add the loct_gettimeofday to all the utility
	  programs, but then I thought that maybe it is cleaner to put it in
	  global_init, since they all should call that.
	  I had to change a bit the compilation order so that it would work. But
	  I think that this order now is more correct.
	  In anycase please take a look just in case this is wrong for some reason.

2005-09-20  acastro

	* [r1459] trunk/src/cross_section.F90, trunk/src/spectrum.F90:
	  Removed the possibility of specifying a minimum energy, other that
	  zero, to calculate spectra. It is one of those features that are clearly
	  totally useless and only complicate the code.

2005-09-20  appel

	* [r1458] trunk/src/Makefile.am:
	  Add mpi_inc.F90 to dependency list.
	* [r1457] trunk/src/Makefile.am:
	  Add mesh_lib to Makefile.am

2005-09-20  lorenzen

	* [r1456] trunk/src/mesh.F90, trunk/src/mesh_create.F90, trunk/src/mesh_lib.F90,
	  trunk/src/nl_operator.F90, trunk/src/par_vec.F90:
	  Fixed problem with the calculation of the ghost point in vec_init.
	  vec_init now uses mesh_index to handle periodic boundary conditions and
	  out of the box points etc. To get this accomplished I had to introduce
	  the new module mesh_lib to circumvent cyclic dependencies. mesh_lib contains
	  mesh_index only at the moment. There will perhaps be some more restructuring
	  which fills this module but at the moment it exists only due to technical
	  constraints.
	* [r1455] trunk/src/par_vec_inc.F90:
	  For some reason, there is a seg fault, when using the TS macro on
	  MPI_Gatherv. I removed it and put in the calls to MPI_Debug_IN and
	  MPI_Debug_OUT directly.
	  My suspicion is that is has to do something with the parameter handling
	  in the Fortran compiler what I could not figure out yet.
	* [r1454] trunk/src/poisson.F90:
	  A 'use mesh_function' was missing.
	* [r1453] trunk/src/mf_inc.F90:
	  Corrected typo.

2005-09-20  appel

	* [r1452] trunk/src/poisson1D.F90, trunk/src/poisson2D.F90:
	  Add ifdefs so that the code compiles in serial again (thanks to Alberto
	  for pointing this one out).

2005-09-20  acastro

	* [r1451] trunk/src/casida.F90:
	  New performance hack.
	  
	  The point is that the Hartree potential originated by of psi_j*psi_b
	  (j occupied, b unoccupied) was now calculated for every matrix term
	  <ia|V_coul + fxc|jb>. This is not necessary, since it can be stored
	  and used for all (i,a).
	  
	  The previous performance hack seemed to reduce the compuational burden
	  by some 25%. But this one is simply spectacular, the casida calculations
	  are now *way* faster, although I did not check by a factor of how much
	  -- the time spent calculating Hartree potentials, by a factor of N_pairs,
	  which is *a lot*, since a large fraction of the computational time was
	  actually spent doing this.
	* [r1450] trunk/src/casida.F90:
	  Performance hack: the kernel fxc was calculated, in the casida module, for
	  all the matrix elements; the kernel is the same for all of them, so it only
	  needs to be done once.
	  
	  A similar performance hack can be done for the Hartree part; I will do it
	  later.

2005-09-20  appel

	* [r1449] trunk/src/poisson1D.F90, trunk/src/poisson2D.F90:
	  The direct integration of the Hartree integral in 1D and 2D is now
	  parallized.
	  However, in the 2D case the potential produced by the MPI code differs
	  from the serial one stronger than I expected. For further debugging
	  purposes I therefore kept the old serial code in comments.

2005-09-20  acastro

	* [r1448] trunk/src/broad.F90, trunk/src/casida.F90:
	  (*) Bug fixed in oct-broad: the usual lack of awareness about the syslabels.
	  
	  (*) More serious, the casida calculations is giving sometimes NaN for some
	  of the energies. This is because some eigenvalues of the Omega matrix
	  that defines the problem are sometimes negative. This should not happen
	  since that matrix should be symmetric positive definite (at least I
	  think so, I could not really prove the positive definite part).
	  
	  I have made one change: the energies and pairs are only ordered now
	  when the writing subroutine is called, and only locally inside there.
	  Before they were ordered after calling the Petersilka routine, and used
	  in the new ordering when using the Casida approach. After this change,
	  I cannot reproduce the bug. This is odd, because I do not think that
	  this change should fix it. So I am not sure that the bug has been
	  fixed.

2005-09-20  lorenzen

	* [r1447] trunk/src/states.F90:
	  Bugfix: In states_calculate_multipoles was an array extend error
	  in parallel mode: as m%x also contains ghost points x(:) is
	  x(1:m%np_part) and not x(1:m%np).
	* [r1446] trunk/src/mpi.F90, trunk/src/mpi_inc.F90:
	  Added support for MPI_Bcast.
	  It is not used yet because the only place where it is called is
	  Xinput_function and there buf is a scalar and I do not know
	  how to change the wrapper to accept both scalars and arrays
	  without changeing to pointers.
	* [r1445] trunk/src/out_inc.F90:
	  Bugfix: When reading a function from harddisk with Xinput_function
	  in parallel only root knew the ierr state. In some cases the result
	  was that all other nodes tried to read the function again which was
	  a deadlock in consequence.
	  No the ierr state is broadcasted and the scatter is only done after
	  a successful read.
	  Apart from that, I changed that only root allocates memory for all
	  points of the function.

2005-09-19  acastro

	* [r1444] trunk/src/states.F90:
	  Little performance hack.
	  The code was orthonormalizing way too many times the same vectors when
	  randomizing unoccupied vectors. This was a pain for example with C60.

2005-09-17  appel

	* [r1443] trunk/src/nl_operator.F90:
	  Forgot this file.
	* [r1442] trunk/liboct/oct_f.c:
	  I changed the typecast from long to int, but forgot the datatypes in
	  the argument list of the function.
	* [r1441] trunk/src/derivatives.F90:
	  Bug fixed. The stencil of the auxop array was not initialized. Since
	  it was used to overwrite the stencils of gradient and laplacian the
	  code was crashing in parallel (it is still crashing in several other
	  places, but that's a different story :).
	  In light of this bug I'm a bit surprised that octopus was working with
	  curvlinear coordinates before ...
	* [r1440] trunk/src/derivatives.F90, trunk/src/derivatives_inc.F90,
	  trunk/src/eigen_plan.F90, trunk/src/mesh.F90, trunk/src/mesh_create.F90,
	  trunk/src/out_inc.F90, trunk/src/par_vec.F90, trunk/src/par_vec_inc.F90,
	  trunk/src/poisson_cg.F90, trunk/src/poisson_multigrid.F90, trunk/src/systm.F90:
	  o Add partition number "partno" and rank number "rank" as fields
	  to pv_type. Having both variables is actually a bit redundant
	  but makes the code readable.
	  
	  o Remove MPI_Comm_Rank calls since this information is now stored
	  in vp%rank.
	  
	  o Rename a few variables:
	  
	  np_glob -> np_global
	  np_tot -> np_part
	  np_tot_glob -> np_part_global
	* [r1439] trunk/src/atomic.F90, trunk/src/spectrum.F90:
	  A couple of variables were not given a datatype. Removed
	  unused variables.
	* [r1438] trunk/src/Makefile.am:
	  Add par_vec_inc.F90 to dependency list.
	* [r1437] trunk/liboct/oct_f.c:
	  Replace typecast to (long) by typecast to (int). In principle the typecast
	  should use long. However, this causes incompatibilities with Fortran
	  integers.
	  Using int instead will cause wrong results when tv.tv_sec exceeds
	  INT_MAX=2147483647, i.e. in about 30 years from now :)
	* [r1436] trunk/src/fftw3.F90:
	  Remove stop statements (stopping the code with a stop will not call
	  MPI_FINALIZE). Also the old error message was not helpful at all.
	* [r1435] trunk/src/td_write.F90:
	  Array out of bounds during td calculation in 1D and 2D. I've replaced
	  NDIM by 1:3, but think that it would be better not to use explicit array
	  bounds in line 551.

2005-09-16  lorenzen

	* [r1434] trunk/src/derivatives.F90, trunk/src/nl_operator.F90, trunk/src/par_vec.F90,
	  trunk/src/par_vec_inc.F90:
	  Curvlinear coordinates are now usable on partitions -- at least with
	  the lanczos eigensolver. cg does not converge and I don't know why yet.
	  In order to get curvlinear working in principle I had to
	  
	  * add routines to scatter and (all)gather non local operators:
	  nl_operator_scatter, nl_operator_gather and nl_operator_allgather.
	  In order to computer OP +/i Op^T, which can not be done locally,
	  the operators are allgathered and each nodes computes the final
	  operator itself. The calculation of the weights by solving
	  a system of linear equations can be done locally, though.
	  * The indices for boundary points had to be fixed in
	  derivatives_build.
	  * To allgather a vector, Xvec_allgather was added to par_vec, which is more
	  or less Xvec_gather with MPI_Allgatherv instead of MPI_Gatherv.
	  
	  nl_operator_op_to_matrix and nl_operator_write are working and can be used for
	  debugging purposes (nl_operator_matrix_to_op is not but can be done
	  easily with nl_operator_scatter).

2005-09-16  acastro

	* [r1433] trunk/src/spectrum.F90:
	  Bug fixed.
	  The spin-polarized and spinors case were not working properly.

2005-09-16  lorenzen

	* [r1432] trunk/src/mpi.F90, trunk/src/mpi_inc.F90:
	  Added support for MPI_Allgather, which is needed in Xvec_allgather.

2005-09-15  acastro

	* [r1431] trunk/src/cross_section.F90, trunk/src/spectrum.F90:
	  Added support for cases where only two equivalent independent axis exist.
	  
	  However, I am a bit puzzled because the algorithm does not seem to work
	  for Na3...

2005-09-15  appel

	* [r1430] trunk/src/crystal.F90, trunk/src/messages.F90, trunk/src/out_inc.F90,
	  trunk/src/spectrum.F90, trunk/src/td.F90, trunk/src/td_init.F90, trunk/src/td_write.F90:
	  Remove unused variables.
	* [r1429] trunk/src/mpi.F90:
	  Take overloading of integer functions into account.

2005-09-15  acastro

	* [r1428] trunk/src/grid.F90:
	  I am not too sure about this commit; I have to say that I did not read
	  very carefully all the new debugging stuff. However the code crashed
	  when running with mpi, without METIS, and without the debug mode.
	  Please take a look to make sure that my change fits in.
	  
	  Probably this is the bug that Miguel was reporting?

2005-09-15  lorenzen

	* [r1427] trunk/src/integer.F90, trunk/src/par_vec.F90, trunk/src/undef.F90:
	  Pseudo-overloading with the X macro and undef.F90/complex.F90/real.F90 is
	  now also possible for integers with integer.F90. This will not
	  be of much use for the numerics but is handy for the scatter and gather
	  routines in par_vec, which now handle vectors of indices, too, and avoids
	  copy and paste.
	  As already mentioned in my previous commit, something like
	  ivec_gather etc. is needed in the initialization of operators
	  for curvlinear coordinates.

2005-09-14  acastro

	* [r1426] trunk/src/spectrum.F90, trunk/src/td_write.F90:
	  (*) Removed some comments that I have left in td_write module
	  (*) The transpose of the inverse happens to be the inverse of the
	  transpose :) I simplified a bit spectrum_cross_section_tensor.
	  
	  Regarding the latter point, I have proved that the scheme works for Na2,
	  and for Na6 and Na_{12} in D_{6h} arrangemets. I have also made the
	  benzene test, but I am a bit puzzled about the latter test -- some small
	  error is present, and I am not too sure about its origin.

2005-09-14  lorenzen

	* [r1425] trunk/src/nl_operator.F90, trunk/src/par_vec.F90:
	  * Added a routine ivec_gather to par_vec to gather vectors of
	  integers. This is necessary to collect the non local operator
	  when running on several partitions.
	  * The routine nl_operator_op_to_matrix is now working
	  for parallel runs on partitions, so is nl_operator_write and
	  nl_operatorT_write. Those routines are mainly for debugging. I
	  need them to check the adaption of curvlinear coordinates to
	  parallel runs on partitions, which will be implemented soon.

2005-09-14  acastro

	* [r1424] trunk/src/cross_section.F90, trunk/src/spectrum.F90:
	  Finally I tested the cross-section program. I commit it now, although I
	  still have to work on it -- very "raw" code for the moment. But in this
	  way I am sure that there is in the repository something that works.
	  
	  I could calculate in this way the full cross section tensor of a molecule
	  with D_{\infty h} symmetry (this seems to be the symmetry group of linear
	  molecules with a center of inversion) with only one run. Yes, it was Na2
	  in my example run, of course. I will do benzene, which is D_{6h}, and
	  is an analog case.
	  
	  But note that we dot only get the trace with only one run, but the full
	  tensor: the cross section along any direction, the crossed terms in the
	  tensor, the anisotropy.
	  
	  Note also that for these particular cases (linear molecules), it is *not*
	  true, as we discussed, that we get the trace just by getting the result
	  with a run done with a polarization tilted 45 degree with respect to the
	  linear molecule. The set of equivalent axis is not orthonormal, and
	  because of this a proper tensor transformation has to be done. I guess that
	  we will have to correct by hand the gold runs, and the process them.

2005-09-14  appel

	* [r1423] trunk/src/h_inc.F90:
	  Bug fixed. The second argument of the grad array in X(kinetic) was running
	  out of bounds for periodic dimensions less than 3.
	  
	  Yesterday I switched to Intel v9 and it turned out that the -C option works
	  contrary to v7 and v8 in v9 rather reliable. After fixing the above bug all
	  tests in the testsuite were running without problems when using -C.
	* [r1422] trunk/src/main.F90:
	  Always create debug directory when running in Debug mode. By now this
	  has to be independent of conf%verbose.

2005-09-14  acastro

	* [r1421] trunk/src/casida.F90:
	  Bug [reported by the daily test] fixed.

2005-09-13  acastro

	* [r1420] trunk/src/Makefile.am, trunk/src/casida.F90, trunk/src/cross_section.F90,
	  trunk/src/spectrum.F90:
	  (*) The calculation of the full cross section tensor from the response of
	  the system to the perturbation along only one "properly chose"
	  direction is now implemented... except it has not been tested yet.
	  Once I have properly tested it, I will document it.
	  
	  Afterwards we will have to think wether or not we define a new run
	  mode that takes care of everything.
	  
	  (*) In the way, I removed a couple of non-MPI friendly uses of vol_pp
	  in the casida.F90 file.

2005-09-13  lorenzen

	* [r1419] trunk/src/mesh_create.F90:
	  x_global in type(mesh_type) is only allocated on the master node.

2005-09-13  acastro

	* [r1418] trunk/src/Makefile.am, trunk/src/spectrum.F90, trunk/src/td.F90,
	  trunk/src/td_init.F90, trunk/src/td_write.F90:
	  Sorted out some formatting problem.
	  
	  And, since the information about the kick was getting so complicated,
	  I abstrated it in a derived data type, kick_type, which is stored in
	  the spectrum module -- I believe that is the proper place.

2005-09-12  acastro

	* [r1417] trunk/src/cross_section.F90, trunk/src/spectrum.F90, trunk/src/td.F90,
	  trunk/src/td_init.F90, trunk/src/td_write.F90:
	  Now the td data type is aware of a possibly non-orthogonal set of unit
	  vector along which the polarization is calculated, in order to make use
	  of symmetry.
	  This set is defined by the user; hopefully we will get smart and the
	  program will actually define it.

2005-09-12  appel

	* [r1416] trunk/src/io.F90:
	  Uncomment system calls for the moment. Will have to adapt the autobuild
	  to take this into account ...
	* [r1415] trunk/src/out_inc.F90:
	  Too many octopus flavours. This time octopus_debug did not compile ...
	* [r1414] trunk/src/io.F90:
	  Fix serial compilation - a variable was not defined.

2005-09-12  acastro

	* [r1413] trunk/src/mpi.F90:
	  The mpi_mod module should be empty if the compilation is done without
	  MPI. Otherwise the compiler complains when linking a serial version.
	  
	  [I think that the way I have done it is the easiest; maybe one could
	  think of not passing mpi.F90 to the linker, but then one would need to
	  touch the Makefile. If you think of a better way, just change it]
	* [r1412] trunk/src/mesh_create.F90:
	  The code did not compile in serial mode, because of a problem in
	  mesh_get_vol_pp; I believe that now it is OK.

2005-09-12  lorenzen

	* [r1411] trunk/src/systm.F90:
	  Small changes because np is now the number of local points.
	  There is one FIXME left concerning the density.
	* [r1410] trunk/src/nl_operator.F90:
	  Before computing a non local operator, vec_ghost_update is called.
	  This is responsible for many intent(in) to intent(inout) changes.
	* [r1409] trunk/src/mesh.F90, trunk/src/mesh_create.F90:
	  x and vol_pp in type(mesh_type) only contain the local points (including
	  ghost and boundary points).
	  As all values of x are needed for input and output on the master node,
	  x_global is added to type(mesh_type) which contains all points
	  as did x prior to this change.
	  One bugfix concerning x_global still has to be done: At the moment, x_local
	  is allocated on all node which should not be becessary.
	* [r1408] trunk/src/epot_inc.F90:
	  Marked some places with FIXMEs, where vol_pp is used. It is likely
	  that these have to be modified to handle the non local part of
	  the pseudo-potential correctly when running in parallel.

2005-09-12  appel

	* [r1407] trunk/src/out_inc.F90:
	  It was still not compiling on x86_64 ...
	* [r1406] trunk/src/out_inc.F90:
	  Correct missplaced preprocessor statements.
	* [r1405] trunk/src/Makefile.am:
	  Add mpi.F90 to source files.
	* [r1404] trunk/src/states_inc.F90:
	  Remove misplaced MPI statement that caused communication blocking.
	* [r1403] trunk/src/out.F90:
	  Add new mpi module.
	* [r1402] trunk/src/io.F90, trunk/src/messages.F90:
	  o Fix compilation problems. The NAG compiler is a bit picky with
	  output formats ...
	  o Add sanity check, if gettimeofday outputs zero values.

2005-09-12  acastro

	* [r1401] trunk/src/cross_section.F90, trunk/src/spectrum.F90:
	  The cross section vector is now projected onto the basis that should
	  "know" about the symmetry.
	  
	  The cross section seems to be well calculated, but still the symmetry
	  knowledge is not applied...
	* [r1400] trunk/src/cross_section.F90, trunk/src/spectrum.F90, trunk/src/td_write.F90:
	  The oct-cross-section now calculates the cross section.
	  
	  In fact, it calculates a cross section "vector",
	  sigma_{\hat{u}, i} (i=1, 2, 3), for a given unit vector \hat{u} that
	  is the polarization vector of the perturbation. The definition is:
	  
	  sigma_{\hat{u}, i}(w) = - (4*pi*w/c) *
	  Int dr dr' \vect{r}*u * Chi(r, r', w) * x_i
	  
	  where Chi(r, r', w) is the response function.
	  
	  Out of these vectors one can get the sigma_{\hat{u}, \hat{v}} for other
	  unit vector \hat{v}, and from those, the cross section tensor, possibly
	  making use of symmetry. This is what I have to do next.

2005-09-12  appel

	* [r1399] trunk/src/restart.F90:
	  Add new mpi module.
	* [r1398] trunk/src/td_write.F90:
	  Some more intent changes.
	* [r1397] trunk/src/run.F90:
	  Print node specific MPI statistics at the end of each run. The output is
	  written to the debug/debug_trace.node.* files.
	  
	  The runtime analysis as implemented in mpi.F90, mpi_inc.F90 gives quite
	  interesting numbers. We could use this to benchmark the scaling of the code
	  for different node numbers, or on different platforms.
	* [r1396] trunk/src/restart_inc.F90:
	  Octopus crashed frequently because of a pretty hidden racing condition:
	  The close statement for the tmp/restart_gs/{occs,wfns} was placed _after_
	  a MPI_Barrier. Because of run-time differences of different nodes it occured
	  frequently that one of the nodes was already trying to read {occs,wfns} in
	  restart_read, although the master node had not completed the write operation
	  of these files. The node was therefore attempting to read from an empty file.
	* [r1395] trunk/src/out.F90, trunk/src/out_inc.F90:
	  Prepare output modules for parallel output/input. The functions
	  input_function and output_function have been renamed to input_function_global
	  and output_function_global respectively. The original input_function
	  output_function routines are now wrappers that take care of scatter and gather.
	  
	  As before only input_function and output_function should be called from
	  outside.
	* [r1394] trunk/src/complex.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90, trunk/src/mpi.F90,
	  trunk/src/mpi_inc.F90, trunk/src/par_vec.F90, trunk/src/par_vec_inc.F90,
	  trunk/src/real.F90, trunk/src/undef.F90:
	  Add mpi_mod module. Currently the module contains wrapper for the used
	  MPI calls in the code. The wrapper are used only in debug mode and take
	  care of the timing of MPI calls.
	  Later on we can use the module to place there some infrastructure to
	  handle different communicators.
	* [r1393] trunk/src/messages.F90:
	  push_sub and pop_sub have been modified such that each node writes it's
	  own debug trace to debug/debug_trace.node.*
	  This comes very handy while investigating why a particular node crashed.
	  To write node specific debug output there is now also a write_debug function.
	* [r1392] trunk/src/global.F90, trunk/src/main.F90:
	  Store epoch time at node startup. All time differences will be computed
	  relative to this timestamp. This circumvents timing problems with nodes
	  that are out of sync.
	* [r1391] trunk/src/io.F90:
	  Add MPI debug hook. There is a new variable MPIDebugHook. If set to yes,
	  all nodes will look at regular time intervals of one second for files of
	  the form node_hook.000, node_hook.001, etc. This mechanism allows to
	  attach gdb or strace sessions to the different MPI processes. By touching
	  the node_hook file of a given node, the program execution of the respective
	  MPI process can be continued independently of the other processes in the
	  communicator.
	  The usage of empty files is in spirit similar to the stop file for clean_stop.
	* [r1390] trunk/src/gs.F90:
	  Set MPI barrier to initialize debug timing of MPI calls.
	* [r1389] trunk/liboct/oct_f.c, trunk/src/liboct.F90:
	  Add interface for gettimeofday system call. Contrary to clock() which
	  measures cpu usage, this call can be used to measure realtime differences,
	  e.g. caused by network latencies.
	* [r1388] trunk/src/grid.F90, trunk/src/specie.F90:
	  Cleanup debug stack for MPI calls. push/pop calls were not called in
	  pairs for nodes other than node 0. There are however still a few
	  places in the code left where this is wrong.
	* [r1387] trunk/src/eigen_arpack.F90, trunk/src/eigen_trlan.F90:
	  Stop code if arpack or trlan eigensolver is selected for domain
	  decomposition. This is not parallized yet.
	* [r1386] trunk/src/derivatives_inc.F90, trunk/src/f_inc.F90, trunk/src/h_inc.F90,
	  trunk/src/math_cg_inc.F90, trunk/src/poisson_corrections.F90, trunk/src/td_calc.F90,
	  trunk/src/td_exp.F90:
	  In order to allow for ghost point updates some of the intent statements
	  have to be modified from intent(in) to intent(inout).

2005-09-10  acastro

	* [r1385] trunk/src/cross_section.F90, trunk/src/spectrum.F90,
	  trunk/src/strength_function.F90, trunk/src/td.F90, trunk/src/td_write.F90:
	  The "kick" information is now properly read from the multipoles file.
	* [r1384] trunk/src/spectrum.F90, trunk/src/td.F90:
	  Thef "delta strength" and the "delta strength mode" are now part of the
	  td_type. This is because I want to write them down in the multipoles file.
	  
	  I documented the variable a little bit.
	  
	  Correction of a bug in the construction of the varinfo file: pol was
	  defined twice in an incompatible way.
	* [r1383] trunk/src/cross_section.F90, trunk/src/rotational_strength.F90,
	  trunk/src/spectrum.F90, trunk/src/strength_function.F90:
	  Removed the SpecTransformMode variable, completely unnecessary.
	  Also, moved the damping mode stuff to the spectrum_type variable.
	  And now the SpecDampMode is no longer a string ("exp", "pol"...),
	  but an integer, properly defined in the variables file as
	  exp, pol, gaussian or none.
	* [r1382] trunk/src/cross_section.F90, trunk/src/hs_from_acc.F90,
	  trunk/src/hs_from_mult.F90, trunk/src/rotational_strength.F90, trunk/src/spectrum.F90,
	  trunk/src/strength_function.F90:
	  Started the modification of spectrum module, which is a bit old
	  by now: built a spectrum_init routine.

2005-09-10  marques

	* [r1381] trunk/src/unocc.F90:
	  Now it compiles.

2005-09-09  acastro

	* [r1380] trunk/src/cross_section.F90, trunk/src/hs_from_acc.F90,
	  trunk/src/hs_from_mult.F90, trunk/src/rotational_strength.F90, trunk/src/spectrum.F90,
	  trunk/src/strength_function.F90:
	  Module spectrum is now "privatized", for the sake of good programming
	  practice.
	  Also, the bug related to the labeling of the systems is corrected in all
	  the utilities. These have to "use io" now, since they no longer use it
	  through the spectrum module.
	* [r1379] trunk/src/unocc.F90:
	  Bug fixed.
	  My compiler complained because the grid has to be passed as intent(inout)
	  to the X(poisson_solve) routine -- because it may be modified in case
	  of using the multigrid method, it seems.
	  
	  I don't know, maybe this is not a very clean design -- in principle the
	  grid should not be modified when the Hartree term is calculated.
	* [r1378] trunk/src/spectrum.F90:
	  oct-sf is back to work -- is able to tackle with the new multipoles
	  file.
	  However, note that oct-sf is going to be gone pretty soon, as soon as I
	  have oct-cross-section working. I put it back so that I could keep
	  checking the results properly.
	* [r1377] trunk/src/strength_function.F90:
	  Bug fixed.
	  The program died when attempting to read files.
	* [r1376] trunk/src/td_write.F90, trunk/testsuite/finite_systems_3d/restart.test:
	  Changed the format of the multipoles file.
	  
	  Now it does not output the dipole projected onto the polarization of the
	  perturbation.
	  Now it sums up the electronic and nuclear dipole, printing the full
	  system dipole -- in cartesian usual form.
	  Now it prints the charge in atomic units (i.e. number of electrons),
	  instead of dividing it by the square root of four pi).
	  And now it writes down, in the header, the unit vector that signals the
	  polarization direction of the perturbing field.
	  
	  I had to change the testsuite accordingly.
	  
	  But now the oct-sf program is not aware of these changes, so it is broken.
	  I hope to solve it over the weekend.
	* [r1375] trunk/src/scf.F90, trunk/src/states.F90, trunk/src/td_init.F90,
	  trunk/src/td_write.F90:
	  [*] Changed states_calculate_multipoles subroutine. Now, I think, it is
	  compliant with the new parallelization scheme -- before it did
	  the integrals without calling dmf_integrate; now it calls it. Also,
	  the definition of the multipoles changed a little: the zero multipole
	  is now the charge (not the charge divided by square root of four pi),
	  the dipole is the usual cartesian dipole (not the spherical harmonics -
	  based dipole). The higher order multipoles stay are they were.
	  [*] The polarization vector for the optical response calculation is now
	  normalized right after it is read.

2005-09-09  marques

	* [r1374] trunk/src/unocc.F90:
	  When asked, outputs 1- and 2-body matrix elements in the KS basis.

2005-09-09  acastro

	* [r1373] trunk/src/Makefile.am, trunk/src/cross_section.F90:
	  The oct-sf program will (eventually) be substituted by a oct-cross-section
	  program.
	  
	  For the moment being, I just copied the strength_function.F90 file
	  into a new cross_section.F90 file, from which an oct-cross-section program
	  is built. But I felt like committing.

2005-09-06  acastro

	* [r1372] trunk/src/td_write.F90:
	  Now also the projection onto the many-body GSKS state works.
	  
	  However, regarding the calculation of the two kinds of projections
	  (projection onto the many body GSKS and onto the single-particel GSKSs)
	  two possible performance issues might need to be solved in the
	  future:
	  
	  (i) Currently, the GSKS state is stored in memory in all processors: all
	  single particle states in all processor. This makes the computation fast
	  in MPI, since almost no communication is needed when computing the
	  projections, but it is memory intensive.
	  (ii) Moreover, the calculation of the projection onto the many-electron
	  GSKS is actually done "as if" the GSKS state was distributed along the
	  processors. This is because it is the way it was done in the past, and I
	  decided to keep it in order to improve this later. So right now, the
	  calculation is memory intensive *and* actually the communication is done,
	  which is stupid.
	  
	  Both kind of projections are done every time step. If performance issues
	  are important, maybe one should allow for computation of "heavy"
	  observables every n time steps.
	* [r1371] trunk/src/states.F90, trunk/src/td_write.F90:
	  Bug fixed.
	  Finally it seems that the calculation of the projections of the TDKS
	  states onto the GSKS states (TDOutputOccAnalysis) is properly done
	  also in parallel.
	  
	  There still exists an error in the calculation of the projection
	  of the many-electron TDKS state onto the many-electron GSKS state
	  (TDOutputGSProjection).

2005-09-06  lorenzen

	* [r1370] trunk/src/Makefile.am, trunk/src/grid.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90, trunk/src/par_vec.F90,
	  trunk/src/par_vec_inc.F90:
	  After some back and forth, type(pv_type) is back in par_vec and
	  par_vec no longer depends on mesh but vice versa.
	  
	  When running in parallel, the vec_init is called in mesh_create_xyz
	  and the resulting parallelization is stored in vp in the mesh.
	  For this to work, the stencil is passed from mesh_init via mesh_create_xyz
	  to vec_init in an optional argument (this will probably be changed
	  later, but at the moment, mesh_create_xyz is also called from the
	  multigrid module, which is not yet parallelized).
	  
	  The members vol_pp and x of type(mesh_type) contain only the point
	  local to the node (including ghost and boundary points). Now, all
	  operations with something like ...x(1:m%np)... or ...vol_pp(1:m%np)...
	  only work on local points.
	  
	  For global operations like integrations or dot products, routines
	  from module mf should be used, which are parallelized by now.
	  
	  There are still some points in the code, which do global operations
	  and do not use routines from mf...

2005-09-06  acastro

	* [r1369] trunk/src/td.F90, trunk/src/td_init.F90, trunk/src/td_write.F90:
	  Now the ground-state KS system may contain more states that the one used
	  during the evolution, so that projections onto unoccupied states can be
	  calculated without the need of propagating also the unoccupied states.

2005-09-06  lorenzen

	* [r1368] trunk/src/grid.F90, trunk/src/mesh.F90, trunk/src/mesh_create.F90,
	  trunk/src/nl_operator.F90, trunk/src/par_vec.F90:
	  All code related to domain parallelisation is put between
	  
	  #if defined(HAVE_MPI) && defined(HAVE_METIS) ... #endif
	  
	  This is a quick fix to keep the parallel code for the
	  td-part working. The Problem is that nl_operator_build
	  for example computes a operator local to domains
	  when running parallel and this is incompatible with
	  the td-part at this point of time.
	  I hope, this works.
	* [r1367] trunk/src/mesh.F90:
	  BUGFIX: Fixed the build error from last night. An #ifdef HAVE_MPI
	  was missing.
	* [r1366] trunk/src/grid.F90, trunk/src/mesh.F90, trunk/src/mesh_create.F90,
	  trunk/src/par_vec.F90, trunk/src/par_vec_inc.F90:
	  The meaning of m%np and m%np_tot in type(mesh_type) has
	  changed when running in parallel:
	  - np is the number of local points and
	  - np_tot is the number of local points plus all additional
	  points like ghost points and boundary points (from the global
	  boundary conditions).
	  As it is still necessary to know the number of global points,
	  two new members np_glob and np_tot_glob have been introduced,
	  which hold the total number of inner points (np_glob) and
	  total number of inner points plus boundary points (np_tot_glob).
	  When running in serial it is np=np_glob and np_tot=np_tot_glob,
	  as one would expect.
	  This change is introduced to integrate parallel vector operations
	  seamlessly.
	  
	  dvec_nl_operator and vec_op_pop have been removed from par_vec,
	  they are not necessary any longer.
	  
	  mpierr has been removed from par_vec as it is better to
	  install some MPI errorhandler routine right after initialization
	  for producing debug output on MPI errors. By the way, communication
	  errors are by default treated fatal, as MPI guarantees
	  reliable communication and those failures normally indicate
	  programming errors.
	  
	  I have not found the reason for the build error from last night,
	  after checkout this morning, everything just compiled fine.

2005-09-05  acastro

	* [r1365] trunk/libxc/Makefile.am:
	  It seems that the test_x_LINK variable needs to be defined in this way
	  so that the executable is actually built.
	* [r1364] trunk/src/td.F90, trunk/src/td_init.F90, trunk/src/td_write.F90:
	  Finally, after so much cleaning, I started fixing the calculation of
	  the projections onto the ground state KS system (not working yet, though!)
	* [r1363] trunk/src/td.F90, trunk/src/td_init.F90, trunk/src/td_write.F90:
	  Bug fixed.
	  I introduce a bug in my previous commit. In the way, I did some other
	  cosmetic changes.

2005-09-05  lorenzen

	* [r1362] trunk/src/Makefile.am, trunk/src/grid.F90, trunk/src/mesh.F90,
	  trunk/src/nl_operator.F90, trunk/src/par_vec.F90, trunk/src/par_vec_inc.F90:
	  Integration of the par_vec-routines into the rest of the
	  code started:
	  - type(mesh_type) takes the result of vec_init which is
	  the ghost point information and the point mappings
	  in the new member vp.
	  The defintion of type(pv_type) has moved to mesh as it is
	  actually a property of the mesh.
	  - vec_init_default is called in grid_init (right after mesh_init).
	  Accordingly, vec_end is called in grid_end.
	  - nl_operator_build is able to build parallel operators (i. e.,
	  operators that are local to each partition).
	  dvec_nl_operator or vec_op_pop are not needed anymore because
	  parallelisation for non-local operations is nearly transparent
	  as far as np is considered as the number of local points of a
	  certain partition.
	  
	  BUGFIX: Corrected displacement for MPI_Gather in vec_gather.
	* [r1361] trunk/src/par_vec_inc.F90:
	  Completing the previous log message (and correcting some debug-code error):
	  There are two new routines in par_vec:
	  - vec_scatter_bndry
	  to scatter the boundary points v(np+1:np_tot) of a vector to all
	  nodes.
	  - vec_scatter_all
	  which does a vec_scatter and a vec_scatter_bndry to scatter all
	  points of a vector.
	* [r1360] trunk/src/mesh_create.F90, trunk/src/par_vec.F90, trunk/src/par_vec_inc.F90:
	  It is now possible to handle global boundary conditions. The points
	  from the enlargement are divided into partitions, too. These points
	  are only needed for boundary conditions that cannot be implemented using
	  appropriate indices (like for periodic boundary conditions). However,
	  this general handling offers the possibilty to use any kind of boundary
	  conditions as long as the values for the boundary points are computed
	  at some point. In the simplest case for zero boundary conditions, they
	  are just set to 0.
	  
	  There are two new routines in

2005-09-05  acastro

	* [r1359] trunk/src/td_init.F90, trunk/src/td_write.F90:
	  Bugs fixed, detected by the automated tests.

2005-09-04  acastro

	* [r1358] trunk/src/td.F90, trunk/src/td_write.F90:
	  Yet more refurbishing of the td_write stuff.
	* [r1357] trunk/src/td.F90, trunk/src/td_init.F90, trunk/src/td_write.F90:
	  Moved some more of the writing from td module to td_write module, this
	  way it is more organized.

2005-09-02  acastro

	* [r1356] trunk/src/Makefile.am, trunk/src/td.F90, trunk/src/td_write.F90:
	  Just cosmetics: put all the routines in td_write.F90 (and td_calc.F90)
	  into a module (td_write) separated from timedep. The only user of
	  td_write is in fact timedep.

2005-09-01  acastro

	* [r1355] trunk/src/casida.F90, trunk/src/unocc.F90:
	  There is no need to keep a separte tmp/restart_unocc. The unocc mode may
	  use tmp/restart_gs instead.
	* [r1354] trunk/src/restart_inc.F90:
	  Bug fixed.
	  Only node 0 was writing down the KS states in the restart directory.

2005-08-31  appel

	* [r1353] trunk/src/nl_operator.F90:
	  Correct debug output (replace init by operate).
	* [r1352] trunk/build/acx.m4:
	  Add flag -ansi to FCCPP flags. With this setting cpp recognizes only
	  /* */ as comments. The usual C++ comments (i.e. //) are not treated as
	  comments anymore.
	  
	  The need for this setting emerges when having lines like:
	  
	  call loct_parse_float(check_inp(trim(label)//'MeshMin'), CNST(0.0), sm%min)
	  
	  If cpp would view // as comment, the macro CNST would not be touched.
	* [r1351] trunk/src/scalar_mesh.F90:
	  Introduce labels (i.e. namespacing if more than one scalar mesh is used).

2005-08-30  xavier

	* [r1350] trunk/src/poisson_multigrid.F90:
	  Now multigrid works with curvilinear coordinates, for this i had to change
	  some things:
	  
	  - The multigrid scheme was changed from Correction Scheme (CS), the most
	  basic algortihm that only works for lineal operators, to Full Approximation
	  Scheme (FAS) which works for nonlinear operators and also accounts
	  differences in grid representations.
	  
	  - Gauss-Jacobi is used as a relaxation operator instead of Gauss-Seidel
	  (only for curvilinear coordinates).
	  
	  - Defaults values are selected according to the type of grid.
	  
	  Below is the input I have been using. Testing is welcome, I am not sure this
	  is going to work allways.
	  
	  --------------------------------
	  
	  CalculationMode = gs
	  fromScratch = yes
	  
	  Units = "eVA"
	  ConvAbsDens = 1e-4
	  
	  %Coordinates
	  "Na" | 0 | 0 | -1.54
	  "Na" | 0 | 0 | 1.54
	  %
	  
	  Spacing = 0.6
	  
	  CurvMethod = curv_gygi
	  CurvGygiA = 1.0
	  CurvGygiAlpha = 4.0
	  CurvGygiBeta = 7.0
	  
	  DerivativesStencil = stencil_starplus
	  DerivativesOrder = 3
	  
	  #PoissonSolver = cg_corrected
	  PoissonSolver = multigrid
	  
	  --------------------------------
	* [r1349] trunk/src/multigrid.F90:
	  Added variable MultigridLevels, very useful for debugging and comes with a
	  relaxation-only solver for free (MultigridLevels = 1), slow but stable.
	* [r1348] trunk/src/poisson.F90:
	  BUGFIX: One line of output was not shown.

2005-08-30  acastro

	* [r1347] trunk/share/variables.local, trunk/src/io.F90:
	  Yet another variable documented.
	* [r1346] trunk/libxc/Makefile.am:
	  Since the test.x program is all C, it is better to link with the C compiler.
	  Otherwise some Fortran compilers (i.e. the Intel 9.0 version) seem to have
	  problems with a duplicated "main" function.
	* [r1345] trunk/src/curv_gygi.F90:
	  The variables corresponding to the Gygi scheme of curvilinear coordinates
	  are also now documented in the code.
	* [r1344] trunk/share/variables.local, trunk/src/curvlinear.F90:
	  One more variable (CurvMethod) documented in the code (not yet in the
	  manual, though).

2005-08-29  lorenzen

	* [r1343] trunk/src/par_vec.F90:
	  vec_init uses now the same stencil description as type(nl_operator_type).
	  
	  I started testing the dvec_nl_operator routine but before they are usable,
	  par_vec must be able to handle boundary conditions. I am not sure how those
	  affect the vec_init and scatter/gather routines, so perhaps some bunch
	  of work comes in via the backdoor and wants to be done before non local
	  operations will work in parallel.

2005-08-26  marques

	* [r1342] trunk/src/par_vec.F90:
	  Just added an #ifdef as the code was not compiling without MPI

2005-08-26  lorenzen

	* [r1341] trunk/src/par_vec.F90, trunk/src/par_vec_inc.F90:
	  The par_vec routines are now pseudo-overloaded for real and
	  complex vectors except for dvec_nl_operator.
	  
	  Furthermore, a routine vec_op_pop is drafted to localize an
	  operator to a partition (or to parallelize it, depending on
	  the perspective). I am not sure, whether it is better to complete
	  the series of
	  dvec_nl_operator, zvec_nl_operator,
	  dvec_nl_operator_cmplx, zvec_nl_operator_cmplx
	  or to use vec_op_pop and the usual ?nl_operator_operate
	  routines.
	  I think, this is a question of runtime tests that I will
	  hopefully do next week.
	  Anyway, just parallelizing the operator and inserting parallelized
	  vectors makes the integration of the new routines more
	  seamlessly than using new routines (it should be
	  possible to take the old code and just insert some
	  lines packed into #if defined(HAVE_MPI) &&
	  defined(HAVE_METIS) ... #endif).
	* [r1340] trunk/src/Makefile.am, trunk/src/par_vec.F90:
	  First draft of a parallel vector library (module par_vec.F90).
	  
	  The module contains the following routines:
	  - vec_init(_default)
	  Takes a partitioned mesh and information about the stencil
	  being used in non-local operations and returns a parallelization vp
	  for vectors defined for all points of the mesh.
	  vp contains information about what points belong to what node
	  and about necessary ghost point exchange.
	  - vec_scatter
	  Scatter a vector to all nodes in vp.
	  - vec_gather
	  Inverse operation of vec_scatter.
	  - vec_ghost_update
	  Realizes the ghost point exchange for a vector
	  which has been scattered before.
	  - vec_end
	  Frees used memory of vp.
	  - vec_integrate
	  Sums over a scattered vector.
	  - vec_dnl_operator
	  Applies a a non-local operator op to a scattered and ghost
	  point updated vector.
	  (None of the routines is used in the rest of the code at the
	  moment)
	  
	  The first six routines are tested with small examples and seem to
	  work as far as I can see. I have not done any performance tests up
	  to now and it is perhaps necessary to optimize vec_ghost_update
	  (which will be frequently called, I guess).
	  The last routine is not tested yet. I am also not sure whether
	  it will be better to 'parallelize' an nl_operator_type operator
	  in such a way that the usual ?nl_operator_operate routines
	  can be called on a scattered vector (i. e. changing the i(:,:)
	  array, np and the order of weights(:,:) for non constant
	  weights). I have not evaluated this approach yet but it seems
	  quite promising. The outcome would be some routine like
	  vec_op_par(vp, op, pop) transforming op to a parallel
	  operator pop according to vp with the same type as op so that
	  a call ?nl_operator_operate(op, fi, fo) is possible.
	  
	  However, I decided to commit this draft so you can already comment
	  on it.
	  
	  An application of the routines written so far could look like this:
	  
	  integer :: np_local, np_ghost
	  FLOAT :: s
	  FLOAT :: u(np), v(np)
	  FLOAT, allocatable :: ul(:), vl(:), w(:)
	  type(pv_type) :: vp
	  type(mesh_type) :: m
	  
	  ! Fill u, v with sensible values.
	  ! ...
	  
	  ! Initialize parallelization with e. g.
	  ! m = sys%gr%m
	  ! stencil = op%stencil
	  ! np_stencil = op%n
	  call vec_init_default(m, stencil, np_stencil, vp, np_local, np_ghost)
	  
	  ! Allocate space for local vectors.
	  allocate(ul(np_local+np_ghost))
	  allocate(vl(np_local+np_ghost))
	  allocate(wl(np_local+np_ghost))
	  
	  ! Distribute vectors.
	  call vec_scatter(vp, u, ul)
	  call vec_scatter(vp, v, vl)
	  
	  ! Calculate scalar product s=<u, v>.
	  wl = ul*vl
	  ! vec_integrate ignores ghost points (i. e. wl(np_local+1:)).
	  s = vec_integrate(vp, wl)
	  
	  ! Compute some operator op: vl = op ul
	  call vec_ghost_update(vp, ul)
	  call vec_nl_operator(vp, op, ul, vl)
	  ! Gather result of op in one vector v.
	  call vec_gather(vp, v, vl)
	  
	  ! Clean up.
	  call vec_end(vp)

2005-08-25  lorenzen

	* [r1339] trunk/build/acx_metis.m4, trunk/liboct/oct_f.c, trunk/share/util/Makefile.am,
	  trunk/share/util/display_partitions.sh, trunk/src/mesh.F90, trunk/src/mesh_create.F90:
	  Rewritten code for mesh partitioning. The grid is directly converted into
	  a graph and then processed by METIS. This should work for any geometry.
	  Added field in type(mesh_type) to store mapping of points to partitions.
	  
	  The script display_partitions.sh can be used to create PNG images
	  of the partitions from debug output in debug/mesh_partition.

2005-08-23  xavier

	* [r1338] trunk/src/multigrid.F90:
	  Number of multigrid levels was miscalculated for grids with few points. Now
	  the levels are calculated in a different way.
	* [r1337] trunk/src/poisson_multigrid.F90:
	  BUGFIX: Array index variable was defined as FLOAT.

2005-08-22  xavier

	* [r1336] trunk/src/poisson_multigrid.F90:
	  * Now Gauss Seidel iteration uses the diagonal term of the laplacian as the
	  convergency factor. I have checked the formulation and in principle with
	  current changes it should work for curvilinear coordinates. (If grid
	  tranfers are right.)
	* [r1335] trunk/src/multigrid.F90:
	  BUGFIX: Fixed segfault in the Multigrid initialization when compiled with NAG on AMD64.

2005-08-22  appel

	* [r1334] trunk/liboct/oct_f.c, trunk/src/mesh_create.F90:
	  Interface for both, PartMeshDual and PartMeshNodal.

2005-08-19  appel

	* [r1333] trunk/src/Makefile.am, trunk/src/math.F90, trunk/src/ode_solver.F90,
	  trunk/src/root_solver.F90, trunk/src/root_solver_inc.F90:
	  Turn the ODE and Root-Solver into modules.
	* [r1332] trunk/src/casida.F90, trunk/src/eigen_cg.F90, trunk/src/eigen_evolution.F90,
	  trunk/src/h_inc.F90, trunk/src/mesh_create.F90, trunk/src/multigrid.F90,
	  trunk/src/nl_operator.F90, trunk/src/opt_control.F90, trunk/src/poisson3D.F90,
	  trunk/src/poisson_cg.F90, trunk/src/scalar_mesh.F90, trunk/src/td_calc.F90,
	  trunk/src/td_rti.F90, trunk/src/xc_OEP_x.F90:
	  remove unused variables.

2005-08-15  appel

	* [r1331] trunk/src/poisson_corrections.F90:
	  Fix compilation problems.

2005-08-11  acastro

	* [r1330] trunk/src/poisson.F90, trunk/src/poisson_corrections.F90,
	  trunk/src/poisson_multigrid.F90:
	  Added the conjugate-gradient method as a relaxation method for the
	  multigrid algorithm. Still not cleare wether or not it is better or not
	  than Gauss-Seidel, it seems that it is actually worse. But this way it permits
	  to use the multigrid method for adaptive coordinates.
	* [r1329] trunk/src/math_cg_inc.F90, trunk/src/poisson_cg.F90,
	  trunk/src/poisson_corrections.F90:
	  Now the conjugate_gradient procedure(s) in math module accept arbitrary
	  metrics: the dot product must be passed as an argument. Before it assumed
	  that an orthogonal base was being used (metric equal to unity).
	  This way we do not need the change of base in the Poisson solver.

2005-08-09  acastro

	* [r1328] trunk/src/derivatives.F90, trunk/src/derivatives_inc.F90:
	  I slightly changed the way in which the Laplacian is calculated in
	  derivatives_inc.F90, subroutine X(derivatives_lapl).
	  
	  The change only affects the case of adaptive coordinates == the weights
	  associated to each point are not constant. In this case, there is no need
	  to define and use a larger function (function + enlargement). One can just
	  make the coefficients of those points null, and make the index that points
	  to a grid point outside the original box, to point to a grid point
	  inside the box.
	* [r1327] trunk/src/epot.F90, trunk/src/epot_inc.F90:
	  Bug fixed.
	  It showed up in the NAG compiler.

2005-08-08  acastro

	* [r1326] trunk/src/h.F90, trunk/src/poisson_cg.F90, trunk/src/v_ks_inc.F90:
	  New (old) performance hack:
	  Both the conjugate gradient solvers were not using the "current" Hartree
	  potential as a starting point.
	  
	  This stopped being like that when we merged h%vhartree and h%vxc in
	  favour of h%vhxc. Since we did not use
	  it much, we just forgot about that detail. But now since the
	  conjugate gradient solver are bound to be used (specially with
	  curvilinear coordinates), or at least should be fairly compared to the
	  multigrid solver, I put back this feature -- for this purpose I had to
	  put back a h%vhartree component in the Hamiltonian data type.
	* [r1325] trunk/src/epot.F90, trunk/src/h_inc.F90, trunk/src/td_calc.F90,
	  trunk/src/td_exp_split.F90, trunk/src/td_rti.F90:
	  The way it was implemented, the calculation of the laser field took more
	  (which should be neglibible) was taking more time than the rest of the
	  parts of the Hamiltonian.
	  
	  In fact, I believe that a more extreme change should be made: now the
	  laser field is constructed explicitly for each of the orbitals -- it does
	  not make sense since it is the same for every orbital. However, this would
	  require more heavy changes; I will think about which way combines best
	  elegance and efficiency (suggestions wecome).

2005-08-06  rozzi

	* [r1324] trunk/src/scf.F90, trunk/src/states.F90, trunk/src/unocc.F90:
	  added variable BandsOutputMode to choose the band output format (currently 1 = gnuplot, 2
	  = xmgrace)

2005-08-05  acastro

	* [r1323] trunk/src/poisson.F90, trunk/src/poisson3D.F90:
	  It is not a good idea to give a variable the name of a module; the Intel
	  Fortran 9.0 on Itanium will not work.

2005-08-05  rozzi

	* [r1322] trunk/src/Makefile.am, trunk/src/grid.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/nl_operator.F90, trunk/src/stencil_cube.F90:
	  Bug fixed: in the mixed periodic/non-periodic configurations some mesh indices passed to
	  nl_operator_operate were erroneously 0.
	  The reason was that only the first value of n_ghost(:) was used to define m%enlarge. Now
	  enlarge -> enlarge(3) to be consistent in all the cases.

2005-08-05  appel

	* [r1321] trunk/src/mf_inc.F90:
	  Fix compilation problems from last night. The type of the result of
	  X(mf_integrate) was defined twice.

2005-08-04  rozzi

	* [r1320] trunk/src/poisson3D.F90:
	  bug fixed in the planar cutoff
	* [r1319] trunk/src/derivatives.F90:
	  bug fixed in the input check
	* [r1318] trunk/src/epot_inc.F90, trunk/src/f_inc.F90, trunk/src/linalg_basic_blas.F90,
	  trunk/src/mf_inc.F90, trunk/src/out_inc.F90:
	  mesh size of arrays made explicit in some calls to simplify debugging
	* [r1317] trunk/src/specie.F90:
	  the variables z, lloc, lmax are not used for the USDEF type

2005-08-02  appel

	* [r1316] trunk/src/scalar_mesh.F90:
	  One of the varinfo variables was doubly defined. The varinfo file got
	  therefore not installed and caused all tests from last night to fail.

2005-08-02  xavier

	* [r1315] trunk/src/multigrid.F90, trunk/src/poisson3D.F90, trunk/src/poisson_multigrid.F90:
	  * Fullweight restriction now uses the volume of the grid for the average.
	  
	  * Added an optional parameter to subroutine multigrid_fine2coarse that
	  selects restriccion method.
	  
	  * Added variable PoissonSolverMGRestrictionMethod that selects the
	  restriction method for multigrid solver.
	  
	  * Variable PoissonSolverCGMaxMultipole was renamed to
	  PoissonSolverMaxMultipole, and PoissonSolverMGThreshold was renamed to
	  PoissonSolverThreshold, because they are not only used for CG but also for
	  multigrid.
	  
	  * Documented some variables: PoissonSolverMGRestrictionMethod,
	  PoissonSolverMGMaxCycles, PoissonSolverMGPostsmoothingSteps,
	  PoissonSolverMaxMultipole, PoissonSolverThreshold.

2005-08-01  appel

	* [r1314] trunk/src/ode_solver_inc.F90, trunk/src/scalar_mesh.F90:
	  Fix some compilation problems with NAG compiler.
	* [r1313] trunk/src/Makefile.am:
	  Update makefile accordingly.
	* [r1312] trunk/src/scalar_mesh.F90:
	  Adding scalar_mesh class. It contains linear, log, sinh and Gauss-Legendre
	  meshes with corresponding integration routines. Also a double-log mesh as
	  used by the superconductivity people is included.
	  The class will be used to setup angular and energy meshes for the wave-
	  matching mode.
	* [r1311] trunk/src/math.F90:
	  Add ode_solver and root_solver types to math module.
	* [r1310] trunk/src/root_solver.F90, trunk/src/root_solver_inc.F90:
	  Adding root solver class. Currently it provides Laguerre's method and
	  an implementation of J. Comp. Phys., 8, (1971), p. 304-308. If time
	  permits I'll also put an implementation of the Jenkins-Traub method
	  (none of the three mentioned above is in GSL).
	  The solvers are used to find the zeros of finite difference polynomials
	  of arbitrary order. This allows to determine evanescent waves on the
	  grid very accurately.
	* [r1309] trunk/src/ode_solver.F90, trunk/src/ode_solver_inc.F90:
	  Adding ODE solver class. Besides the standard Runge-Kutta method it
	  provides higher order Fehlberg, Verner and Prince-Dormand solver. Adaptive
	  step size control is prepared but not included yet.

2005-08-01  acastro

	* [r1308] trunk/src/states.F90, trunk/src/td.F90, trunk/src/td_write.F90:
	  The calculation of the projections of the time-dependent Kohn-Sham states
	  onto the ground-state Kohn-Sham states was deactivated because it crashed.
	  I have put it back, although it is now done in a rather primitive way.
	* [r1307] trunk/src/unocc.F90:
	  The unocc_type was not used.

2005-07-31  xavier

	* [r1306] trunk/src/poisson_multigrid.F90:
	  Improvements in the multigrid poisson solver:
	  
	  * The module checks if it has been initialized.
	  
	  * Now the old solution is saved and is used as the starting point for the
	  next one. This speeds up things a lot.

2005-07-31  appel

	* [r1305] trunk/src/atomic.F90, trunk/src/blas.F90, trunk/src/broad.F90,
	  trunk/src/casida.F90, trunk/src/cf.F90, trunk/src/cf_inc.F90, trunk/src/crystal.F90,
	  trunk/src/curv_briggs.F90, trunk/src/curv_gygi.F90, trunk/src/curv_modine.F90,
	  trunk/src/curvlinear.F90, trunk/src/derivatives.F90, trunk/src/derivatives_inc.F90,
	  trunk/src/eigen.F90, trunk/src/eigen_arpack.F90, trunk/src/eigen_cg.F90,
	  trunk/src/eigen_evolution.F90, trunk/src/eigen_plan.F90, trunk/src/eigen_trlan.F90,
	  trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/f.F90, trunk/src/f_inc.F90,
	  trunk/src/fftw2.F90, trunk/src/fftw3.F90, trunk/src/geom_opt.F90, trunk/src/geometry.F90,
	  trunk/src/global.F90, trunk/src/grid.F90, trunk/src/gs.F90, trunk/src/h.F90,
	  trunk/src/h_inc.F90, trunk/src/h_so.F90, trunk/src/hgh.F90, trunk/src/hs_from_acc.F90,
	  trunk/src/hs_from_mult.F90, trunk/src/io.F90, trunk/src/lasers.F90, trunk/src/lcao.F90,
	  trunk/src/liboct.F90, trunk/src/liboct_parser.F90, trunk/src/libxc.F90,
	  trunk/src/linalg_adv_lapack.F90, trunk/src/linalg_basic_blas.F90,
	  trunk/src/linalg_basic_int.F90, trunk/src/linear_response.F90,
	  trunk/src/linear_response_inc.F90, trunk/src/logrid.F90, trunk/src/make_st.F90,
	  trunk/src/math.F90, trunk/src/math_cg_inc.F90, trunk/src/math_inc.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/messages.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90,
	  trunk/src/mix.F90, trunk/src/multigrid.F90, trunk/src/nl_operator.F90,
	  trunk/src/opt_control.F90, trunk/src/out.F90, trunk/src/out_inc.F90, trunk/src/pes.F90,
	  trunk/src/pes_mask.F90, trunk/src/pes_rc.F90, trunk/src/phonons.F90,
	  trunk/src/poisson.F90, trunk/src/poisson1D.F90, trunk/src/poisson2D.F90,
	  trunk/src/poisson3D.F90, trunk/src/poisson_cg.F90, trunk/src/poisson_corrections.F90,
	  trunk/src/poisson_multigrid.F90, trunk/src/ps.F90, trunk/src/pulpo.F90,
	  trunk/src/restart_inc.F90, trunk/src/rotational_strength.F90, trunk/src/run.F90,
	  trunk/src/scf.F90, trunk/src/simul_box.F90, trunk/src/sparskit.F90,
	  trunk/src/sparskit_driver.F90, trunk/src/sparskit_inc.F90, trunk/src/specie.F90,
	  trunk/src/spectrum.F90, trunk/src/spline.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/states_kpoints.F90, trunk/src/static_pol.F90,
	  trunk/src/static_pol_lr.F90, trunk/src/stencil_cube.F90, trunk/src/stencil_star.F90,
	  trunk/src/stencil_starplus.F90, trunk/src/stencil_variational.F90,
	  trunk/src/strength_function.F90, trunk/src/string.F90, trunk/src/syslabels.F90,
	  trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_exp.F90,
	  trunk/src/td_exp_split.F90, trunk/src/td_init.F90, trunk/src/td_rti.F90,
	  trunk/src/td_write.F90, trunk/src/tm.F90, trunk/src/units.F90, trunk/src/unocc.F90,
	  trunk/src/v_ks.F90, trunk/src/v_ks_inc.F90, trunk/src/varinfo.F90,
	  trunk/src/wave_matching.F90, trunk/src/xc.F90, trunk/src/xc_KLI.F90, trunk/src/xc_OEP.F90,
	  trunk/src/xc_OEP_SIC.F90, trunk/src/xc_OEP_inc.F90, trunk/src/xc_OEP_x.F90,
	  trunk/src/xc_axc.F90, trunk/src/xc_functl.F90, trunk/src/xc_fxc.F90, trunk/src/xc_vxc.F90,
	  trunk/src/xyz_adjust.F90, trunk/src/xyz_file.F90:
	  o Improving debug output. Now the string argument of push_sub
	  has the format filename.routinename (filename without F90).
	  By looking at the debug output you can see now directly in which
	  file you will find the prominent piece of code which caused
	  octopus to crash.
	  
	  o Removing trailing spaces from all files.
	* [r1304] trunk/src/f_inc.F90, trunk/src/sparskit_driver.F90, trunk/src/systm.F90,
	  trunk/src/td.F90, trunk/src/td_write.F90:
	  Use consistently single quotes for push_sub calls, i.e. (' ') and not (" ").
	  Single quotes were holding by far the majority, only these few double ones
	  were left.
	* [r1303] trunk/src/hgh.F90, trunk/src/logrid.F90, trunk/src/tm.F90:
	  kill_logrid sounds a bit scary ... :)
	* [r1302] trunk/src/atomic.F90, trunk/src/crystal.F90, trunk/src/derivatives.F90,
	  trunk/src/eigen_trlan.F90, trunk/src/io.F90, trunk/src/td_exp_split.F90,
	  trunk/src/xc_vxc.F90:
	  A few MPI cleanups. Replacing stop ' .... ' by a call to write_fatal. This
	  ensures that MPI_FINALIZE is called.

2005-07-30  acastro

	* [r1301] trunk/src/epot_inc.F90:
	  A new little performance hack.
	* [r1300] trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/h_inc.F90,
	  trunk/src/h_so.F90, trunk/src/nl_operator.F90:
	  A performance hack.
	  
	  Now project computes tha action of a sum of projectors, not only one. This
	  way one can significantly speed up its calculation since the mesh of the
	  projectors due to the same atom are equal.
	  This performance hack was already done before, but I temporarily removed it
	  when changing the nonlocal_op data type to the projector.
	  
	  Otherwise, in some occassions the calculation of the non-local projectors
	  may take 90% of the computational time, specially if the spin-orbit term
	  is calculated.

2005-07-28  acastro

	* [r1299] trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/f_inc.F90, trunk/src/h.F90,
	  trunk/src/h_inc.F90, trunk/src/h_so.F90, trunk/src/lcao.F90, trunk/src/td_exp_split.F90:
	  Now the spin-orbit coupling term also works with curvilinear coordinates.
	  Note, however, that I am not too sure wether or not it is OK when using
	  TM pseudopotentials.
	  
	  Also, the calculation of the forces was badly done with curvlinear
	  coordinates. Not it is OK.
	  
	  To get those two things, I did some rearrangements. The "nonlocal_op" type
	  that held the Kleinmann-Bylander projectors and the Goedeckers' projectors
	  is substituted in favour of a "projector" type, which is simpler. The spin-
	  orbit term and the normal term are split -- no longer in the same
	  nonlocal_op projector. Also, there are some "dp" projectors in the epot
	  data type which hold the gradient of the projector, so that the forces
	  can be calculated from them.
	  
	  For the moment, the spin-orbit term is neglected when calculating the
	  forces.

2005-07-27  xavier

	* [r1298] trunk/src/grid.F90, trunk/src/multigrid.F90, trunk/src/poisson3D.F90,
	  trunk/src/poisson_multigrid.F90:
	  More multigrid improvements:
	  - Number of levels is calculated from the number of points in the mesh.
	  - Fullweight Restriction is used instead of Injection for fine to coarse
	  transfer.
	  - More cleaning.
	* [r1297] trunk/src/poisson.F90, trunk/src/poisson3D.F90, trunk/src/poisson_multigrid.F90:
	  Multigrid improvements:
	  - Added poisson_multigrid_init and poisson_multigrid_end subroutines.
	  - Now it stops when the residue goes below a threshold (the same variable
	  PoissonSolverCGThreshold from CG is used).
	  - 3 new input variables that control multigrid process.
	  - Code is cleaner.
	* [r1296] trunk/src/poisson_multigrid.F90:
	  BUGFIX: Removed the ' characters from comments which causes problems in some
	  systems.

2005-07-26  xavier

	* [r1295] trunk/src/Makefile.am, trunk/src/poisson.F90, trunk/src/poisson3D.F90,
	  trunk/src/poisson_multigrid.F90:
	  Added the Multigrid solver for Poisson equation (PoissonSolver = multigrid).
	  It works for a simple case, but it needs some work for curvilinear
	  coordinates. Don't expect it to be very fast right now, currently only uses
	  a fixed number of cycles (10, which is much more than actually needed) and
	  there are many things to improve.

2005-07-25  acastro

	* [r1294] trunk/src/derivatives.F90:
	  Bug fixed.
	  Another one of those that only shows up in some architectures, and for
	  some cases...
	  It was a wrong initialization of the auxiliary non-local operator that is
	  used to symmetrize properly the gradient and the Laplacian.
	* [r1293] trunk/src/eigen.F90, trunk/src/ps.F90:
	  Bugs fixed.
	  (*) The runs with HGH pseudopotentials were giving wrong numbers in my
	  opteron with the NAG compiler. The reason is that it seems that it
	  gets screwed up with arrays (or maybe with pointer arrays) whose lower
	  bound is 0 instead of 1. In general, I think that in those cased it is
	  good practice to specify bound explicitly.
	  (*) The second one is just aesthetics: one of the messages in stdout was
	  giving the wrong message (the eigensolver information), because the
	  message(1) variable was overwritten.

2005-07-24  acastro

	* [r1292] trunk/src/hgh.F90:
	  Bug fixed. Apparently, this bug was only causing a problem to the NAG
	  compiler in the opteron. But it was wrong anyways.
	* [r1291] trunk/src/nl_operator.F90:
	  This message, rather cryptic for a user, should only show up in debug mode,
	  I think.
	* [r1290] trunk/src/stencil_starplus.F90:
	  Bug fixed.

2005-07-21  micael

	* [r1289] trunk/src/xc.F90, trunk/src/xc_axc.F90:
	  *) Bug fixes: some variables were not initialized.
	  
	  CDFT is *almost* working :)

2005-07-21  marques

	* [r1288] trunk/src/stencil_starplus.F90:
	  there was an undefined variable
	* [r1287] trunk/src/xc_KLI.F90:
	  small cleaning.
	* [r1286] trunk/src/xc_KLI.F90, trunk/src/xc_OEP_x.F90:
	  Now most communication is done with blocking recv/send. This simplifies a bit the code.

2005-07-21  acastro

	* [r1285] trunk/src/derivatives.F90, trunk/src/stencil_starplus.F90:
	  Changed the "starplus" stencil for the gradient. Before, it was equal to
	  the one used for the Laplacian, which involved huge memory requirements.
	  Now it is much lower (although still much larger than when using uniform
	  coordinates).
	  Incidentally, also corrected one bug: the Gradient had before the opposite
	  sign.

2005-07-20  marques

	* [r1284] trunk/src/xc_KLI.F90, trunk/src/xc_OEP_x.F90:
	  There were some problems with the parallel version of these routines.
	  *) Mpi_I(recv/send) must be followed by MPI_Wait (or similar, otherwise
	  it will not free the request (and we get a beautiful memory leak ;)
	  *) The routines are all done with non-blocking commands. I think that most
	  of the communication can be blocking, which will make easier the code.
	  Tomorrow I will try to change it.

2005-07-20  acastro

	* [r1283] trunk/src/derivatives.F90, trunk/src/poisson_cg.F90:
	  The transponse of the Laplacian is no longer needed, since now the
	  biconjugate gradient routine does not need to be used in poisson_cg2
	  (normal conjugate gradient is enough).
	  I leave most of the machinery, though, in case we ever need it. When
	  the developing process is more mature, maybe some code should be gone.
	* [r1282] trunk/src/derivatives.F90, trunk/src/nl_operator.F90:
	  Sorry, I committed wrong versions of the files... these ones are more
	  polished.
	* [r1281] trunk/src/derivatives.F90, trunk/src/nl_operator.F90:
	  Symmetrization of the differential operators defined on curvilinear
	  coordinates, so that the Laplacian is Hermitian, and the gradient
	  is skew-Hermitian.
	  
	  This change is so easy that I am almost embarrassed of myself.
	  All the difficulties associated to the non-Hermiticity of
	  the Hamiltonian are gone (namely the horrible convergence problems
	  in the ground state, and the possible-to-come difficulties in the
	  propagation).
	  
	  The way this is achieved is outrageously simple; had I thought about
	  this half a year ago and we would have been using curvilinear
	  coordinates since then. I will explain it in our next meeting
	  (in anycase, from outside, it is a sheer change of value of the
	  coefficients, so you need not worry about it, nothing should have
	  been broken).
	  
	  The next big problem is the enourmous memory requirements. I think
	  that this can be alleviated by refining the stencils.

2005-07-20  marques

	* [r1280] trunk/src/messages.F90:
	  some messages were being printed by all nodes :(
	* [r1279] trunk/doc/mdate-sh:
	  This file is automatically created by autoreconf -si, so it should not be in cvs
	* [r1278] trunk/src/casida.F90, trunk/src/mf_inc.F90, trunk/src/systm.F90, trunk/src/td.F90,
	  trunk/src/td_write.F90, trunk/src/xc_KLI.F90, trunk/src/xc_OEP_SIC.F90,
	  trunk/src/xc_OEP_inc.F90:
	  IMPORTANT: as vol_pp is now defined from 1:m%np_tot, some implicit sums like
	  sum(f(:)*vol_pp(:)) were segfaulting in some machines. I added 1:m%np in all
	  places I could find.
	* [r1277] trunk/liboct/Makefile.am:
	  added "-f" to the link command.

2005-07-19  marques

	* [r1276] trunk/liboct/Makefile.am:
	  The config.h was not being regenerated.
	* [r1275] trunk/liboct/varinfo.c:
	  Apparently I forgot to commit this file some time ago. It is an innocuous
	  change that allows options to have a negative sign.

2005-07-18  marques

	* [r1274] trunk/src/Makefile.am, trunk/src/grid.F90, trunk/src/main.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/multigrid.F90, trunk/src/poisson.F90,
	  trunk/src/poisson2D.F90, trunk/src/poisson3D.F90, trunk/src/poisson_multigrid.F90,
	  trunk/src/xc_OEP_x.F90:
	  Initial support for multigrids. We can now generate the coarser grids, transfer
	  functions between the fine and coarse grids and vice-versa, and calculate
	  derivatives in all grids. In poisson_multigrid.F90 there is just a test, not
	  the poisson solver yet ;)

2005-07-18  acastro

	* [r1273] trunk/expokit/expokit.f, trunk/src/eigen_evolution.F90:
	  * Bug fixed.
	  The code did not compile with --enable-complex, as noted by Carlo ;)
	  * Also, I removed a lot of unused code in file expokit.f
	* [r1272] trunk/src/casida.F90, trunk/src/eigen_evolution.F90, trunk/src/linalg_basic.F90,
	  trunk/src/linalg_basic_blas.F90, trunk/src/math.F90:
	  * I implemented the a different orthonormalization scheme for the
	  "evolution in imaginary time" eigensolver method, as suggested by
	  Aichinger and Krotscheck (ref in a comment). It permits faster
	  convergence (not spectacular, but noticeable).
	  
	  Still poor convergence for curvilinear coordinates; however it converges
	  with a little bit of patience, if you want to try. I already did
	  calculations for molecules such as CO2. Did not try the time evolution,
	  though (it crashes).
	  
	  I think we now probably are now in a state similar to the state that
	  Gygi achieved, unless he had a better diagonalizer (I wrote him an
	  email, no response yet). Maybe after implementing a multigrid algorithm
	  we will be even better.
	  
	  * Polished the sorting algorithm. I changed the casida routine so that
	  now it uses the sort in math.
	  
	  * Extended the interface to the BLAS X(gemm) routine, so that it can
	  be called fro three-dimensional matrices (the first two dimensions are
	  in fact only one inside the routine).

2005-07-16  acastro

	* [r1271] trunk/src/eigen.F90, trunk/src/eigen_cg.F90, trunk/src/eigen_evolution.F90,
	  trunk/src/math.F90, trunk/src/math_inc.F90:
	  Put a proper ordering algorithm in the math modul (I put the shell method,
	  easier to implemente than the quicksort, and of comparable speed for
	  the typical numbers that we use).
	  The eigensolvers now call this routine. The casida algorithm also needs
	  sorting, so I will eventually remove the algorithm that it now uses so that
	  it calls sort instead.
	* [r1270] trunk/src/Makefile.am, trunk/src/eigen.F90, trunk/src/eigen_cg.F90,
	  trunk/src/eigen_cg2.F90, trunk/src/eigen_cg3.F90, trunk/src/eigen_trlan.F90:
	  Some rationalization in the names of the files, which had no relation to
	  the contents.

2005-07-15  acastro

	* [r1269] trunk/src/Makefile.am:
	  Duplicated the LIB_BLAS and LIB_LAPACK in the linking line to make sure
	  that it links in the cluster... This is not too orthodox, maybe I find a
	  better way to put it.
	* [r1268] trunk/expokit/Makefile.am:
	  Bug fixed.

2005-07-14  acastro

	* [r1267] trunk/expokit/Makefile.am, trunk/src/eigen.F90, trunk/src/eigen_evolution.F90:
	  Now the evolution in imaginary time eigensolver method seems to work
	  properly also for more than one eigenvector.
	  It works also for the non-symmetric case (i.e. with curvilinear coordinates)
	  and seems to be much faster than arpack. But much slower still than cg
	  for the regular grid cases.
	* [r1266] trunk/src/eigen_evolution.F90:
	  Bug fixed.
	  The code did not compile in the complex mode.
	  Thanks, Carlo.
	* [r1265] trunk/src/Makefile.am, trunk/src/eigen.F90, trunk/src/eigen_evolution.F90:
	  The evolution in imaginary time is now implemented in octopus.
	  It can be set with "EigenSolver = evolution" in the input file (evolution = 7).
	  I did not test it for more than one eigenstate, and did not try it yet
	  with curvilinear coordinates. Also, there are a few things that should
	  be fine-tuned, so expect changes in the following days.
	* [r1264] trunk/src/td_exp.F90:
	  The calls to the expokit routines had to be changed accordingly.
	* [r1263] trunk/expokit/Makefile.am:
	  Added a proper $Id$ to the file.
	* [r1262] trunk/Makefile.am, trunk/configure.ac, trunk/expokit, trunk/expokit/Makefile.am,
	  trunk/expokit/expokit.f, trunk/src/Makefile.am, trunk/src/expokit_inc.F90,
	  trunk/src/math.F90, trunk/src/td_exp.F90:
	  Added the directory expokit, where the expokit.f file is placed exactly
	  as it is in the expokit distribution. A library libexpokit.a is built now
	  and linked to the octopus executable. Before the routines were included
	  in the math module. However, this involved changing the routines to adapt
	  them to Fortran 90, which was not as obvious as it seemed.
	  
	  The expokit.f file is large -- maybe we could remove some unused routines.
	  
	  I am touching this since soon I am experiencing with a new method do
	  get the eigenvectors of the Hamiltonian: propagation in imaginary time.

2005-07-13  rozzi

	* [r1261] trunk/src/mf_inc.F90, trunk/src/restart_inc.F90:
	  removed some complains from the -C compiler flag
	* [r1260] trunk/src/out_inc.F90:
	  missing error status in some functions
	* [r1259] trunk/src/curvlinear.F90:
	  chi(:) and x(:) are passed from subroutine curvlinear_chi2x() as 3-dimensional, and not
	  sb%dim-ensional arrays
	* [r1258] trunk/src/simul_box.F90:
	  the rlat and klat vectors are built also for non-periodic directions (to avoid a
	  zero-determinant crash in the crystal module)
	* [r1257] trunk/src/specie.F90:
	  the variable jradius is only used in for JELLI and POINT types

2005-07-12  micael

	* [r1256] trunk/testsuite/finite_systems_3d/so.test:
	  *) Disabled the spin-orbit test. Latter I will fix it.

2005-07-11  acastro

	* [r1255] trunk/libxc/test.c, trunk/src/xyzanim.F90:
	  The xyzanim utility was broken, at least in the IBM machines. I put
	  an emergency fix. If I get time I will take a look at the utilities, see how
	  the system labels affect them, and make up some tests for them.
	  
	  Also, the IBM preprocessor had problems with the // comments in C files..

2005-07-11  appel

	* [r1254] trunk/testsuite/oct-run_testsuite:
	  Sending mails was broken. I'll run the testsuite today manually since
	  the new tests of Micael seem to give some FAIL's (I guess precision
	  issues).
	  Tonight the testsuite should again run automatically.

2005-07-10  micael

	* [r1253] trunk/testsuite/finite_systems_3d/restart.test,
	  trunk/testsuite/finite_systems_3d/so.test, trunk/testsuite/finite_systems_3d/spinors.test:
	  *) Added two new tests. One checks the spin-orbit coupling. The other one
	  checks the ground state and time-dependent restarts.
	  *) Changed the spinors test in order to make it faster.

2005-07-08  appel

	* [r1252] trunk/src/io.F90:
	  Forgot to commit this one (flush_messages migration).
	* [r1251] trunk/src/nl_operator.F90:
	  just cosmetics.
	* [r1250] trunk/src/crystal.F90, trunk/src/states.F90, trunk/src/states_kpoints.F90:
	  remove more unused variables.
	* [r1249] trunk/src/global.F90, trunk/src/messages.F90:
	  move flush_messages from global to messages module.
	* [r1248] trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/geometry.F90,
	  trunk/src/run.F90:
	  move variable "only_user_def" out of global.F90

2005-07-07  appel

	* [r1247] trunk/src/crystal.F90:
	  Forgot the .d-xx expressions ...
	* [r1246] trunk/src/crystal.F90:
	  Replace all .d0 expressions by their CNST() counterparts.
	* [r1245] trunk/src/atomic.F90, trunk/src/eigen.F90, trunk/src/eigen_arpack.F90,
	  trunk/src/eigen_cg2.F90, trunk/src/eigen_plan.F90, trunk/src/epot.F90,
	  trunk/src/epot_inc.F90, trunk/src/geom_opt.F90, trunk/src/geometry.F90, trunk/src/h.F90,
	  trunk/src/h_inc.F90, trunk/src/lcao.F90, trunk/src/liboct_parser.F90,
	  trunk/src/linalg_basic_blas.F90, trunk/src/linalg_basic_int.F90, trunk/src/logrid.F90,
	  trunk/src/math_inc.F90, trunk/src/mesh.F90, trunk/src/mf_inc.F90,
	  trunk/src/opt_control.F90, trunk/src/pes.F90, trunk/src/pes_mask.F90,
	  trunk/src/pes_rc.F90, trunk/src/poisson.F90, trunk/src/poisson1D.F90,
	  trunk/src/poisson2D.F90, trunk/src/ps.F90, trunk/src/scf.F90, trunk/src/specie.F90,
	  trunk/src/spline.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/states_kpoints.F90, trunk/src/systm.F90, trunk/src/td_exp.F90,
	  trunk/src/td_exp_split.F90, trunk/src/td_rti.F90, trunk/src/td_write.F90,
	  trunk/src/tm.F90, trunk/src/xc_OEP_inc.F90, trunk/src/xyz_adjust.F90:
	  Improve readability. Replace all intent(IN) by intent(in). out and inout
	  were already lowercase in all places.
	* [r1244] trunk/src/eigen_arpack.F90, trunk/src/epot.F90, trunk/src/h_inc.F90,
	  trunk/src/run.F90, trunk/src/sparskit_driver.F90, trunk/src/sparskit_inc.F90,
	  trunk/src/stencil_starplus.F90, trunk/src/td.F90, trunk/src/td_exp_split.F90,
	  trunk/src/td_rti.F90:
	  remove unused variables.

2005-07-07  marques

	* [r1243] trunk/src/mesh_create.F90:
	  Let's see...

2005-07-07  rozzi

	* [r1242] trunk/src/crystal.F90:
	  the blas call was not consistent with the interface

2005-07-07  marques

	* [r1241] trunk/src/fftw2.F90, trunk/src/fftw3.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90:
	  Adress error seems to be solved.

2005-07-07  rozzi

	* [r1240] trunk/src/Makefile.am:
	  I use the output module to debug the Hartree potential. It shouldn't hurt.
	* [r1239] trunk/testsuite/oct-run_testsuite:
	  bug fixed: the -p option did not set the prefix variable
	* [r1238] trunk/src/crystal.F90, trunk/src/states_kpoints.F90:
	  just cosmetics
	* [r1237] trunk/src/epot.F90, trunk/src/math.F90, trunk/src/poisson3D.F90:
	  updating the cutoff stuff for periodic systems

2005-07-06  marques

	* [r1236] trunk/src/states_inc.F90:
	  Hopefully this will fix the mpi compilation.

2005-07-05  marques

	* [r1235] trunk/liboct/varinfo.c, trunk/src/messages.F90, trunk/src/run.F90,
	  trunk/src/string.F90, trunk/src/varinfo.F90:
	  *) Added function messages_print_var_option, etc. that allow to print
	  information about an option of an input variable (see run.F90#263 for an
	  example) Please use this function, as it keeps the code cleaner.
	  *) Corrected a bug in varinfo.c that gave a segfault
	  
	  P.S. It does pass all tests this time ;)
	* [r1234] trunk/src/h_inc.F90, trunk/src/simul_box.F90:
	  This should solve the problems with the complex test suite. There was no problem
	  with the compiler: the specific section of the code that was giving problems
	  was only compiled with --enable-complex.
	  
	  Note that there is still a small bug in liboct/varinfo.c that I will fix when I
	  commit a couple of changes I made to that part.
	* [r1233] trunk/src/h_inc.F90:
	  Let's see if now this fixes the compilation in the opteron!

2005-07-04  marques

	* [r1232] trunk/src/h.F90:
	  Hopefully, the code will compile now. I really don't undrestand how it could
	  compile in my machine!!
	* [r1231] trunk/share/util/mf.cfg, trunk/share/util/mf.net:
	  This was not working properly. Note that I also changed slightly the CMSP package.

2005-07-03  marques

	* [r1230] trunk/src/Makefile.am, trunk/src/cf.F90, trunk/src/cf_inc.F90,
	  trunk/src/curv_briggs.F90, trunk/src/curv_gygi.F90, trunk/src/curv_modine.F90,
	  trunk/src/curvlinear.F90, trunk/src/derivatives.F90, trunk/src/derivatives_inc.F90,
	  trunk/src/eigen.F90, trunk/src/eigen_arpack.F90, trunk/src/epot.F90,
	  trunk/src/epot_inc.F90, trunk/src/f.F90, trunk/src/f_inc.F90, trunk/src/fftw2.F90,
	  trunk/src/fftw3.F90, trunk/src/geom_opt.F90, trunk/src/geometry.F90, trunk/src/global.F90,
	  trunk/src/global.h, trunk/src/grid.F90, trunk/src/gs.F90, trunk/src/h.F90,
	  trunk/src/h_inc.F90, trunk/src/lasers.F90, trunk/src/lcao.F90, trunk/src/make_st.F90,
	  trunk/src/mesh.F90, trunk/src/mesh_create.F90, trunk/src/mf_inc.F90,
	  trunk/src/nl_operator.F90, trunk/src/opt_control.F90, trunk/src/out.F90,
	  trunk/src/phonons.F90, trunk/src/poisson.F90, trunk/src/poisson2D.F90,
	  trunk/src/poisson3D.F90, trunk/src/rotational_strength.F90, trunk/src/run.F90,
	  trunk/src/scf.F90, trunk/src/simul_box.F90, trunk/src/specie.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/static_pol.F90, trunk/src/static_pol_lr.F90,
	  trunk/src/stencil_cube.F90, trunk/src/stencil_star.F90, trunk/src/stencil_starplus.F90,
	  trunk/src/stencil_variational.F90, trunk/src/systm.F90, trunk/src/td.F90,
	  trunk/src/td_calc.F90, trunk/src/td_exp.F90, trunk/src/td_exp_split.F90,
	  trunk/src/td_init.F90, trunk/src/td_rti.F90, trunk/src/td_write.F90, trunk/src/unocc.F90,
	  trunk/src/v_ks.F90, trunk/src/v_ks_inc.F90, trunk/src/xc.F90, trunk/src/xc_OEP_SIC.F90,
	  trunk/src/xc_axc.F90, trunk/src/xc_functl.F90, trunk/src/xc_vxc.F90:
	  Now conf%dim -> simul_box%dim. I think that this is the right place to have it.
	  This implied changing a lot of things, some of them I am still not happy with.
	  In any case there are still some more movings to be done ;)

2005-07-02  marques

	* [r1229] trunk/src/eigen.F90, trunk/src/eigen_arpack.F90, trunk/src/eigen_cg2.F90,
	  trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/fftw2.F90, trunk/src/fftw3.F90,
	  trunk/src/h_inc.F90, trunk/src/poisson.F90, trunk/src/scf.F90, trunk/src/simul_box.F90,
	  trunk/src/states.F90, trunk/src/td_exp_split.F90:
	  *) Hopefully eigen_arpack will now compile
	  *) Created function simul_box_is_periodic

2005-07-01  marques

	* [r1228] trunk/src/Makefile.am, trunk/src/casida.F90, trunk/src/cf_inc.F90,
	  trunk/src/derivatives.F90, trunk/src/eigen.F90, trunk/src/eigen_cg2.F90,
	  trunk/src/eigen_plan.F90, trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/f.F90,
	  trunk/src/fftw2.F90, trunk/src/fftw3.F90, trunk/src/global.F90, trunk/src/global.h,
	  trunk/src/grid.F90, trunk/src/gs.F90, trunk/src/h.F90, trunk/src/h_inc.F90,
	  trunk/src/lcao.F90, trunk/src/linear_response.F90, trunk/src/linear_response_inc.F90,
	  trunk/src/make_st.F90, trunk/src/mesh.F90, trunk/src/mesh_create.F90,
	  trunk/src/opt_control.F90, trunk/src/out.F90, trunk/src/out_inc.F90, trunk/src/pes.F90,
	  trunk/src/pes_mask.F90, trunk/src/poisson.F90, trunk/src/poisson2D.F90,
	  trunk/src/poisson3D.F90, trunk/src/ps.F90, trunk/src/restart.F90,
	  trunk/src/restart_inc.F90, trunk/src/run.F90, trunk/src/scf.F90, trunk/src/simul_box.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/states_kpoints.F90,
	  trunk/src/static_pol_lr.F90, trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_calc.F90,
	  trunk/src/td_exp.F90, trunk/src/td_exp_split.F90, trunk/src/td_init.F90,
	  trunk/src/td_rti.F90, trunk/src/td_write.F90, trunk/src/unocc.F90, trunk/src/v_ks.F90,
	  trunk/src/v_ks_inc.F90, trunk/src/xc_OEP.F90, trunk/src/xc_OEP_SIC.F90,
	  trunk/src/xc_OEP_inc.F90, trunk/src/xc_OEP_x.F90:
	  *) periodic_dim is now a part of simul_box and not of conf (as I think it should
	  be)
	  *) defined a macro NP = gr%m%np in global.h to ease a bit the writing
	  *) there is now a function simul_box::simul_box_is_periodic
	  
	  I am trying to get the variables out of conf. The next one to go will be
	  conf%dim, and will go to simul_box. So please expect some large change sets
	  in the next couple of days. Also I am thinking about doing the following
	  changes to improve readibility:
	  m -> mesh
	  h -> hamilt
	  gr -> grid
	  sb -> simul_box
	  and to avoid repetitions to add _mod to the name of the modules.
	* [r1227] trunk/src/casida.F90, trunk/src/geom_opt.F90, trunk/src/grid.F90,
	  trunk/src/gs.F90, trunk/src/lcao.F90, trunk/src/opt_control.F90, trunk/src/phonons.F90,
	  trunk/src/run.F90, trunk/src/scf.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/static_pol.F90, trunk/src/static_pol_lr.F90, trunk/src/systm.F90,
	  trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_rti.F90, trunk/src/td_write.F90,
	  trunk/src/unocc.F90, trunk/src/v_ks.F90, trunk/src/v_ks_inc.F90:
	  *) geometry is now a part of system
	  *) several cleanings
	* [r1226] trunk/src/Makefile.am, trunk/src/casida.F90, trunk/src/curvlinear.F90,
	  trunk/src/derivatives.F90, trunk/src/epot.F90, trunk/src/f.F90, trunk/src/f_inc.F90,
	  trunk/src/geom_opt.F90, trunk/src/grid.F90, trunk/src/gs.F90, trunk/src/h_inc.F90,
	  trunk/src/make_st.F90, trunk/src/mesh.F90, trunk/src/mesh_create.F90,
	  trunk/src/mf_inc.F90, trunk/src/nl_operator.F90, trunk/src/opt_control.F90,
	  trunk/src/phonons.F90, trunk/src/poisson1D.F90, trunk/src/poisson2D.F90,
	  trunk/src/run.F90, trunk/src/scf.F90, trunk/src/simul_box.F90, trunk/src/states.F90,
	  trunk/src/states_kpoints.F90, trunk/src/static_pol.F90, trunk/src/static_pol_lr.F90,
	  trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_exp_split.F90,
	  trunk/src/td_rti.F90, trunk/src/unocc.F90:
	  I am restructuring octopus, in order to implement multigrid methods.
	  Unfortunately, the changes are quite invasive :(
	  
	  *) Added two new structures
	  -) simul_box includes details concerning the simulation box
	  -) grid includes the simulation box, the mesh, the "multi_mesh", and (later)
	  the geometry
	  *) deleted mesh_x, mesh_y, mesh_z, and mesh_xyz. Their use was inconsistent,
	  and it's faster anyway to access m%x
	  
	  Further cleaning will follow.

2005-06-30  appel

	* [r1225] trunk/src/syslabels.F90:
	  Forgot this initialization.
	* [r1224] trunk/src/derivatives.F90, trunk/src/eigen.F90, trunk/src/nl_operator.F90,
	  trunk/src/stencil_star.F90, trunk/src/stencil_variational.F90:
	  Add possibility to have complex nl operators (will be necessary for
	  wave-matching).
	* [r1223] trunk/src/main.F90, trunk/src/syslabels.F90:
	  allow for more runs than syslabels are defined. permits to run a periodic
	  calculation only once when equivalent leads are used.
	* [r1222] trunk/src/out_inc.F90:
	  luns are already assigned inside io_open. this statement was
	  using up all luns (showed up in multi-subsys mode).
	* [r1221] trunk/src/crystal.F90:
	  Bug fixed. This was the wrong index.

2005-06-30  marques

	* [r1220] trunk/libxc/util.h:
	  There were a couple of misspells in function names

2005-06-17  appel

	* [r1219] trunk/testsuite/Makefile.am:
	  Install tests for periodic systems during make install.

2005-06-16  appel

	* [r1218] trunk/testsuite/finite_systems_1d/helium.test,
	  trunk/testsuite/finite_systems_3d/sodium.test,
	  trunk/testsuite/finite_systems_3d/spinors.test,
	  trunk/testsuite/oct-run_regression_test.pl,
	  trunk/testsuite/periodic_systems_1d/cosine_potential.test,
	  trunk/testsuite/periodic_systems_1d/free_electrons.test:
	  Adding $Id$ tags to all tests. Modify Perl script to add tags
	  when a template is created with oct-run_regression_test.pl -c
	* [r1217] trunk/testsuite/periodic_systems_1d,
	  trunk/testsuite/periodic_systems_1d/cosine_potential.test,
	  trunk/testsuite/periodic_systems_1d/free_electrons.test:
	  Adding regression tests to validate the band structure of non-interacting
	  electrons in 1D.
	* [r1216] trunk/src/sparskit.F90, trunk/src/sparskit_driver.F90, trunk/src/sparskit_inc.F90:
	  Generalizing the Sparskit interface to complex matrices and
	  vectors. Since the Sparskit library offers only routines for
	  real arithmetic I'm essentially stacking real and imaginary
	  parts of the vectors, i.e. for
	  
	  (A+iB)(f+ig)=h+iv
	  
	  with A, B \in R^{NxN}, f,g,h,v \in R^{N} I'm solving
	  
	  (A -B)(f) (h)
	  =
	  (B A)(g) (v)
	  
	  This system is by construction non-symmetric. For the test
	  matrices I was using only the stabilized Bi-Conjugate Gradient
	  method and some of the GMRES flavors were giving accurate
	  results for a reasonable number of iterations.

2005-06-14  acastro

	* [r1215] trunk/src/eigen_cg2.F90:
	  Bug fixed.
	  It showed up when doing spin-polarized calculations. It has been there
	  for a while...
	* [r1214] trunk/src/stencil_starplus.F90:
	  Rewrote the "starplus" stencil. Finally I found one way of choosing the
	  points and the polynomials that seems to be a good compromise: not as
	  unmanageable as the cubic stencil, and not as inaccurate as the star
	  stencil for curvilinear coordinates.

2005-06-12  acastro

	* [r1213] trunk/src/eigen_arpack.F90:
	  Bug fixed.

2005-06-11  acastro

	* [r1212] trunk/src/stencil_starplus.F90:
	  The new "starplus" stencil is now operative also in 3D.
	* [r1211] trunk/share/variables.local, trunk/src/eigen.F90, trunk/src/eigen_arpack.F90:
	  A new iteration for the arpack support. Now it does not support bi-spinors,
	  or complex wavefunctions.

2005-06-11  appel

	* [r1210] trunk/src/mesh_create.F90:
	  Bug fixed. Free electron bands seem to come out again in head.
	* [r1209] trunk/testsuite/finite_systems_1d/helium.test:
	  Setting Dimensions = 2. That is what I was originally intending
	  with the test: 2 _interacting_ electrons in 1D (== 1 electron in 2D
	  with appropriate potential). Just forgot initially the Dimensions
	  variable :).

2005-06-10  acastro

	* [r1208] trunk/share/variables.local, trunk/src/Makefile.am, trunk/src/derivatives.F90,
	  trunk/src/stencil_starplus.F90:
	  It seems that to use curvilinear coordinates, the star stencil was not
	  enough (too inaccurate), and the cubic stencil is too expensive (too
	  many points). So I have put an intermediate stencil, some kind
	  of star + some off-diagonal points. For the moment I have only put it
	  in 2D, adding four points.
	* [r1207] trunk/testsuite/Makefile.am, trunk/testsuite/finite_systems_1d/helium.test:
	  The Helium test was not really one-dimensional; I added the
	  Dimension = 1 option. So I had to change the eigenvalue number.

2005-06-10  appel

	* [r1206] trunk/src/sparskit.F90:
	  Fix compilation errors on x86_64.
	* [r1205] trunk/configure.ac:
	  Forgot this one. Add call to m4 macro for sparskit library.
	* [r1204] trunk/debian/rules:
	  Add sparskit library to configure calls for the Debian packages.
	* [r1203] trunk/acinclude.m4, trunk/build/acx_sparskit.m4, trunk/src/Makefile.am,
	  trunk/src/sparskit.F90, trunk/src/sparskit_inc.F90:
	  Adding interface module for sparskit library. The library contains
	  ten different solver for sparse linear systems. Preconditioning is
	  supported by the solvers but not yet implemented in the interface.

2005-06-08  acastro

	* [r1202] trunk/src/Makefile.am:
	  Changed the order of io.F90. The dependency tree should take care of this,
	  but the dependency tree that we have basicly only takes carer of the
	  #includes. The result was an annoying linking warning (changed size of
	  modules, or something like that).

2005-06-07  acastro

	* [r1201] trunk/libxc/Makefile.am, trunk/libxc/xc_f.c:
	  I forgot to change also this when I changed the config.h stuff.
	* [r1200] trunk/src/eigen_arpack.F90:
	  The bug reported by the cron robot is fixed.

2005-06-06  acastro

	* [r1199] trunk/build/acx_arpack.m4, trunk/src/eigen_arpack.F90:
	  Next step towards having the ARPACK diagonalizers for non-Hermitian cases.
	  Now I have to change the normalization of all functions, so that the
	  dot product is the canonical one...

2005-06-05  acastro

	* [r1198] trunk/configure.ac, trunk/liboct/grammar.c, trunk/liboct/oct_f.c,
	  trunk/liboct/oct_gsl_f.c, trunk/liboct/recipes.c, trunk/liboct/varia.c,
	  trunk/liboct/varinfo.c, trunk/liboct/write_iter.c, trunk/liboct_parser/Makefile.am,
	  trunk/liboct_parser/grammar.c, trunk/liboct_parser/parser_f.c, trunk/src/Makefile.am,
	  trunk/src/config.h.in:
	  Just "maintenance" changes.
	  
	  We can finally get rid of config.h.in. It involved a couple of apparantly
	  unrelated changes:
	  
	  o Moved grammar.c from liboct to liboct_parser, where it belongs. I also
	  eliminated grammar.y from the Makefile.am, so there will be no attempt
	  to regenerate it automatically. I think it is better this way since, for
	  example, I do not have bison.
	  o Now config.h will be in the parent directory. It has to be included
	  with <config.h> instead of "config.h". Also, I changed the rule that
	  generates config_F90.h in src, to avoid getting C comments.

2005-06-05  appel

	* [r1197] trunk/src/io.F90:
	  Remove debug write statement.
	* [r1196] trunk/src/out_inc.F90:
	  This compiled before with NAG but seems to cause problems with
	  Intel. In this way it compiles with both.
	* [r1195] trunk/src/broad.F90, trunk/src/crystal.F90, trunk/src/curv_briggs.F90,
	  trunk/src/curvlinear.F90, trunk/src/derivatives.F90, trunk/src/eigen.F90,
	  trunk/src/eigen_arpack.F90, trunk/src/eigen_cg2.F90, trunk/src/eigen_cg3.F90,
	  trunk/src/epot.F90, trunk/src/global.F90, trunk/src/h.F90, trunk/src/h_inc.F90,
	  trunk/src/h_so.F90, trunk/src/hgh.F90, trunk/src/hs_from_acc.F90,
	  trunk/src/hs_from_mult.F90, trunk/src/lasers.F90, trunk/src/libxc.F90, trunk/src/main.F90,
	  trunk/src/mix.F90, trunk/src/nl_operator.F90, trunk/src/out_inc.F90,
	  trunk/src/phonon_spectrum.F90, trunk/src/ps.F90, trunk/src/spectrum.F90,
	  trunk/src/stencil_cube.F90, trunk/src/td.F90, trunk/src/td_write.F90,
	  trunk/src/xc_KLI.F90, trunk/src/xc_OEP.F90, trunk/src/xc_OEP_SIC.F90,
	  trunk/src/xc_OEP_inc.F90, trunk/src/xyzanim.F90:
	  Removing unused variables. Now we are getting close to a point where
	  we actually can extract useful infromation from the compiler warnings:
	  
	  Warning: td_exp_split.F90, line 201: Symbol UVPSI referenced but never set
	  detected at ZEXP_VNLPSI@<end-of-statement>
	  Warning: td_exp_split.F90, line 201: Symbol P2 referenced but never set
	  detected at ZEXP_VNLPSI@<end-of-statement>
	  
	  It seems that these variables are used for calculations but don't carry
	  any value. Any ideas why the lines above were uncommented?
	* [r1194] trunk/src/messages.F90:
	  Loop variable got lost during last rename.
	* [r1193] trunk/src/messages.F90:
	  Variable ierr for MPI_FINALIZE was missing for parallel octopus flavours.
	* [r1192] trunk/src, trunk/src/.cvsignore:
	  Adding messages.std*, semantic.cache, *.pbs
	* [r1191] trunk/src/Makefile.am, trunk/src/atomic.F90, trunk/src/broad.F90,
	  trunk/src/casida.F90, trunk/src/centergeom.F90, trunk/src/crystal.F90,
	  trunk/src/curv_briggs.F90, trunk/src/curv_gygi.F90, trunk/src/curv_modine.F90,
	  trunk/src/derivatives.F90, trunk/src/eigen.F90, trunk/src/epot.F90,
	  trunk/src/expokit_inc.F90, trunk/src/f.F90, trunk/src/fftw2.F90, trunk/src/fftw3.F90,
	  trunk/src/geom_opt.F90, trunk/src/geometry.F90, trunk/src/global.F90, trunk/src/gs.F90,
	  trunk/src/h.F90, trunk/src/hgh.F90, trunk/src/hs_from_acc.F90, trunk/src/hs_from_mult.F90,
	  trunk/src/io.F90, trunk/src/lasers.F90, trunk/src/lcao.F90, trunk/src/liboct_parser.F90,
	  trunk/src/linalg_adv.F90, trunk/src/linalg_adv_lapack.F90, trunk/src/linalg_basic_int.F90,
	  trunk/src/linear_response.F90, trunk/src/main.F90, trunk/src/make_st.F90,
	  trunk/src/math.F90, trunk/src/mesh.F90, trunk/src/mesh_create.F90, trunk/src/messages.F90,
	  trunk/src/mf.F90, trunk/src/mix.F90, trunk/src/opt_control.F90, trunk/src/out.F90,
	  trunk/src/phonon_spectrum.F90, trunk/src/phonons.F90, trunk/src/poisson.F90,
	  trunk/src/poisson_cg.F90, trunk/src/poisson_corrections.F90, trunk/src/ps.F90,
	  trunk/src/pulpo.F90, trunk/src/restart.F90, trunk/src/rotational_strength.F90,
	  trunk/src/run.F90, trunk/src/scf.F90, trunk/src/specie.F90, trunk/src/spectrum.F90,
	  trunk/src/states.F90, trunk/src/static_pol.F90, trunk/src/static_pol_lr.F90,
	  trunk/src/stencil_cube.F90, trunk/src/stencil_star.F90, trunk/src/stencil_variational.F90,
	  trunk/src/strength_function.F90, trunk/src/syslabels.F90, trunk/src/systm.F90,
	  trunk/src/td.F90, trunk/src/td_exp.F90, trunk/src/td_exp_split.F90, trunk/src/td_rti.F90,
	  trunk/src/tm.F90, trunk/src/units.F90, trunk/src/unocc.F90, trunk/src/v_ks.F90,
	  trunk/src/wave_matching.F90, trunk/src/xc.F90, trunk/src/xc_OEP.F90,
	  trunk/src/xc_functl.F90, trunk/src/xyz_adjust.F90, trunk/src/xyz_file.F90,
	  trunk/src/xyzanim.F90:
	  I've broken the global module in several parts. Since global was used in many
	  places, the changes affect most of the files. Here a changelog:
	  
	  o The io module now contains a "use global", i.e. the module _knows_ about MPI
	  and the node numbers (_very_ important to clean up IO in parallel runs).
	  
	  o There is a new module called messages which contains now the write_{info,
	  warning,fatal} functions and corresponding variables like message(:), stars,
	  hyphens. I was not sure about the push_sub, pop_sub functions, so I put them
	  also in the messages module. Perhaps they belong in a own debug module ...
	  
	  o I modified the write_* functions in order to _really_ flush output in e.g.
	  MPI runs. For that purpose I've introduced a new variable "FlushMessages".
	  If set to "yes" (default is no), octopus opens the files messages.{stdout,stderr}
	  and appends messages for every call of write_*. At the end of the write_* calls
	  the files are closed so that the output is written to disk. Even if the operating
	  system or a queuing system buffers the ordinary stdout and stderr you will get
	  with a tail -f messages.* immediate feedback what octopus does. Of course in MPI
	  runs only node 0 writes.
	  
	  On a SMP machine with two octopus MPI processes it is in this context instructive
	  to monitor the output pattern by running
	  
	  strace -e open -p <pid of first process>
	  strace -e open -p <pid of second process>
	  
	  o The new module syslabels contains all the stuff that is required to run
	  multiple subsystems. Apart from this module and a few init calls the system
	  label support reduces now to a single line in io.F90:
	  
	  before:
	  write(wpath, '(3a)') trim(work_dir), "/", trim(path)
	  
	  now:
	  write(wpath, '(4a)') trim(work_dir), "/", trim(current_label), trim(path)
	  
	  All the old current_label stuff has been removed.
	  
	  o A "use global" is now in many cases accompanied by a "use messages" and a
	  "use syslabels" (the price we have to pay to clean up global).
	  
	  o Added some more $Id$ tags that I forgot in the first round.
	  
	  o The utility programs compile but I didn't check if they produce proper output.
	  Perhaps we should add checks to the testsuite for them as well?
	* [r1190] trunk/debian/rules:
	  Add calls to autoheader.
	* [r1189] trunk/debian/rules:
	  o Fixing build errors. Replacing the triple
	  
	  aclocal-1.8
	  automake-1.8 --add-missing
	  autoconf
	  
	  by
	  
	  aclocal-1.8
	  automake-1.8 --add-missing
	  autoreconf -i
	  
	  o Adding arpack library.

2005-06-03  acastro

	* [r1188] trunk/liboct/config.h.in:
	  This file is generated automatically by autoheader when doing
	  autoreconf. So we do need it in the cvs.
	  src/config.h.in is hard-coded, however, so it stays. [I do not know why
	  it is hard-coded, maybe it is possible to do it properly and remove it]

2005-06-02  acastro

	* [r1187] trunk/acinclude.m4, trunk/build/acx_arpack.m4, trunk/build/acx_jdqz.m4,
	  trunk/configure.ac, trunk/src/Makefile.am, trunk/src/config.h.in, trunk/src/eigen.F90,
	  trunk/src/eigen_arpack.F90, trunk/src/eigen_jdqz.F90:
	  After some experimenting and reading, I found out that the Jacobi-Davidson
	  scheme would in fact be slower than the Arnoldi/Lanczos iteration
	  eigensolver. So I changed the dummy interface to JDQZ by an interface
	  to the ARPACK library.
	  For now, only the real symmetric case is implemented. Of course the idea
	  is to put the complex non-Hermitian case, since for the normal case
	  the conjugate gradients seems to be faster.

2005-06-02  appel

	* [r1186] trunk/debian/rules:
	  Configure the Debian packages with the jdqz library.

2005-06-01  acastro

	* [r1185] trunk/acinclude.m4, trunk/build/acx_jdqz.m4, trunk/configure.ac,
	  trunk/liboct/config.h.in, trunk/src/Makefile.am, trunk/src/config.h.in,
	  trunk/src/eigen.F90, trunk/src/eigen_jdqz.F90:
	  Added the basic infrastructure to allow for the inclusion of the
	  JDQZ package as a diagonalizer. It is a diagonalizer that is able to cope
	  with complex non-Hermitian operators. It already was in an ancient
	  version of octopus (back when we were young), but was removed because it
	  did not improve on the cg stuff. However it could be an option to put
	  the curvilinear coordinates stuff back working.
	  
	  Note that it is not yet done, I just wrote the autoconf macros and figured
	  out how to call the library.

2005-06-01  appel

	* [r1184] trunk/build/latest_cvs_commit.sh, trunk/src/Makefile.am, trunk/src/global.F90,
	  trunk/src/main.F90:
	  Octopus now prints at startup below the version and build info also rcs
	  info's about the latest cvs changes that are included in the executable
	  at hand.
	  
	  This was Alberto's idea and we hacked the code in a corporative effort to
	  include the feature. Inside latest_cvs_commit.sh we are using GNU'isms for
	  this. If the build platform doesn't support the GNU extensions the rcs
	  info string will be empty.

2005-05-31  appel

	* [r1183] trunk/debian/rules:
	  There was another \ missing.
	* [r1182] trunk/testsuite/oct-run_testsuite:
	  Clean up after testsuite finished.
	* [r1181] trunk/testsuite/oct-run_regression_test.pl:
	  Filename should be out.log not log.
	* [r1180] trunk/testsuite/oct-run_testsuite:
	  Improve script a bit to include output logs of a run in the mail
	  reports (preparing to start daily reports ...).

2005-05-31  acastro

	* [r1179] trunk/src/eigen.F90, trunk/src/eigen_cg2.F90:
	  I finally commit the eigen solver that I built for the quantum dots code.
	  It is very similar to the one that we already had, or so it looks,
	  one difference being that the one that we had had several steps that I did
	  not understand very well, and was bit less clear.
	  
	  For the moment, I have left both, and they will stay for a while until I make
	  sure that the new one works fine in all cases (complex wavefunctions, etc).
	  Afterwards, the old one will be substituted (now the new one may be chosen
	  by setting EigenSolver = 6). The default keeps being cg = 5 (the old one).
	  
	  The reason for changing it is that I will try to build a bi-conjugate gradients
	  extension for the non-Hermitian case, and it will be easier with this new
	  one which is much more clear.
	  
	  Eventually we should add preconditioning through multigrid.

2005-05-31  appel

	* [r1178] trunk/testsuite/oct-run_regression_test.pl:
	  o Search also for octopus_cmplx flavours.
	  o The program list of a test doesn't need to include the "_debug"
	  flavours. If e.g. octopus_cmplx is specified in this list the test
	  will also be vaild for octopus_cmplx_debug.
	  o add option -l to copy the output of a run to the local directory.
	* [r1177] trunk/src/math.F90:
	  Reverted by mistake both files to the same file. Back to revision 1.32 ...
	* [r1176] trunk/src/math.F90, trunk/src/wave_matching.F90:
	  Sorry. These two slipped in on mistake. Reverting to previous revison.
	* [r1175] trunk/src/broad.F90, trunk/src/casida.F90, trunk/src/centergeom.F90,
	  trunk/src/geom_opt.F90, trunk/src/hgh.F90, trunk/src/lasers.F90, trunk/src/main.F90,
	  trunk/src/math.F90, trunk/src/opt_control.F90, trunk/src/phonon_spectrum.F90,
	  trunk/src/phonons.F90, trunk/src/restart_inc.F90, trunk/src/spectrum.F90,
	  trunk/src/static_pol_lr.F90, trunk/src/td.F90, trunk/src/unocc.F90,
	  trunk/src/wave_matching.F90, trunk/src/xyzanim.F90:
	  Add more system_labels for multi_subsystem mode (I bet I still did not catch
	  all of them).
	  
	  I'm adding the labels in this way, although I believe that the only clean way
	  would be to handle the labels inside the io module (i.e. inside the io_mkdir and
	  io_open functions).
	  This however would require a "use global" inside the io module which in turn
	  would cause a circular dependency. Something like a "super global" module
	  is missing here .. :)
	  Actually the same need for such a module appears if we want to clean up the use
	  of file descriptors for MPI runs (which is still _not_ MPI clean). The io module
	  should know something about the node number (mpiv%node) which again would cause
	  via "use global" a circular dependency.
	  This "super global" module should only contain the MPI variables which are
	  currently in global.F90 and also the system labels (perhaps something else
	  comes to your mind?).
	  
	  Your opinion on this?

2005-05-30  acastro

	* [r1174] trunk/src/mesh_create.F90:
	  The argument enarge was totally useless in that subroutine, so I removed it.
	  Besides, I removed a horribly outdated comment in the begining of the file.

2005-05-29  appel

	* [r1173] trunk/debian/rules:
	  missing some line continuations ...
	* [r1172] trunk/debian/rules:
	  My last commit still didn't fix the segfault. Let's try this one ...
	* [r1171] trunk/debian/changelog, trunk/debian/dirs, trunk/debian/rules:
	  Changing libraries for the build of the x86_64 Debian package. I'm now not
	  linking to the system blas and lapack libraries anymore, but use my "home
	  compiled" versions instead. This fixes the segfault bug that I mentioned
	  last Friday in the IRC. The spinors.test is now running properly also on
	  x86_64 with nag5. Also thanks to Alberto for helping with the testing ...

2005-05-29  acastro

	* [r1170] trunk/share/variables.local, trunk/src/global.F90, trunk/src/main.F90,
	  trunk/src/run.F90:
	  Added CalculationMode variable to the list of commented variables.
	  Also a couple of cosmetic changes.

2005-05-29  marques

	* [r1169] trunk/src/xc_KLI.F90:
	  By some strange reason this was not working... Now it does ;)

2005-05-28  marques

	* [r1168] trunk/share/Makefile.am:
	  Now both variables and varinfo are cleaned with make clean
	* [r1167] trunk/build/mk_varinfo.pl, trunk/liboct/varinfo.c, trunk/share/variables,
	  trunk/share/variables.local, trunk/src/varinfo.F90:
	  The file share/variables are now updated automatically. Note that the data
	  contained in share/variables.local is added to share/variables. In the future
	  I hope to be able to remove *everything* from share/variables.local.
	* [r1166] trunk/src/global.F90, trunk/src/run.F90, trunk/src/v_ks.F90:
	  *) MPI code now only runs for modes td and casida (the ones that are parallelized)
	  *) Added description of Variable SICorrection
	  *) Added keyword 'Section' to variables description
	* [r1165] trunk/src/xc_KLI.F90:
	  Memory leak fixed in KLI procedure.
	  I took the change to clean a little bit the routine.

2005-05-27  marques

	* [r1164] trunk/share/Makefile.am, trunk/share/varinfo:
	  There is no need to keep the file varinfo. Now it is automatically generated.
	  Note that it will not be regenerated, as I did not include any dependences.

2005-05-27  acastro

	* [r1163] trunk/src/geometry.F90, trunk/src/mesh_create.F90, trunk/src/opt_control.F90,
	  trunk/src/states.F90, trunk/src/systm.F90:
	  Some little cleaning that I wanted to do since a long time ago.
	  By the way, it is the first time I use the testsuite to validate the
	  changes :)

2005-05-27  appel

	* [r1162] trunk/src/global.F90, trunk/src/states.F90:
	  Need to know the number of states of "neighboring" systems (in multi_system
	  mode) for wave matching.
	* [r1161] trunk/src/mesh_create.F90:
	  Allow also for box_shape == PARALLELEPIPED in 1D.

2005-05-26  marques

	* [r1160] trunk/Makefile.am, trunk/build/mk_varinfo.pl, trunk/liboct/Makefile.am,
	  trunk/liboct/oct_f.c, trunk/liboct/varia.c, trunk/liboct/varinfo.c,
	  trunk/share/Makefile.am, trunk/share/varinfo, trunk/src/Makefile.am, trunk/src/global.F90,
	  trunk/src/liboct.F90, trunk/src/run.F90, trunk/src/string.F90, trunk/src/v_ks.F90,
	  trunk/src/varinfo.F90, trunk/src/xc_OEP_x.F90:
	  This is an attempt to force us, lazy programmers, to take better care of the
	  documentation. The idea is, the input variables can be documented abywhere
	  in the code, that there will be a script reading it, and putting the information
	  in share/varinfo. This information should also be included automatically in the
	  manual (this is still not done). Please look at the variable Dimensions, or
	  NonInteractingElectrons for an example. If you like it, we should start
	  moving things from the manual to the code ;)

2005-05-25  marques

	* [r1159] trunk/share/variables, trunk/src/cf_inc.F90, trunk/src/epot.F90,
	  trunk/src/f_inc.F90, trunk/src/geometry.F90, trunk/src/out_inc.F90, trunk/src/v_ks.F90,
	  trunk/src/v_ks_inc.F90, trunk/src/xc_OEP.F90, trunk/src/xc_OEP_inc.F90:
	  Added the Amaldi correction to the xc potential. You can now try, Alberto, and
	  see if it helps with your enormous calculations. On the way I found a couple of
	  problems:
	  
	  *) Micael, lines 143-150 of v_ks_inc make me think that non-collinear
	  magnetism does not work when using non-linear core corrections. In this
	  case, rho(:,3:4) will never be initialized!!!
	  
	  *) There is a bug showing in mf2cf when using cubic meshes. Apparently the
	  indices ix, iy, and iz are out of range

2005-05-25  acastro

	* [r1158] trunk/src/systm.F90, trunk/src/v_ks.F90, trunk/src/xc.F90, trunk/src/xc_OEP.F90:
	  The "nlcc" component of xc was no longer used, so it may be removed...

2005-05-24  marques

	* [r1157] trunk/src/main.F90:
	  By some strange reason, the pathscale compiler didn't like it...

2005-05-24  appel

	* [r1156] trunk/src/derivatives.F90:
	  Neither Alberto, nor I understand why the code crashes if (1:conf%dim) is
	  missing as argument to der%m%h in the call of
	  
	  call stencil_star_coeff_lapl(der%m%h(1:conf%dim), der%order, der%lapl)
	* [r1155] trunk/debian/rules:
	  Thanks to the "long lines" macro Alberto was adding yesterday, we can
	  now include also the _debug executables in the Debian Package.

2005-05-24  marques

	* [r1154] trunk/src/xc_OEP_x.F90:
	  Finally, exact exchange appears to work in parallel.

2005-05-23  acastro

	* [r1153] trunk/build/acx.m4, trunk/configure.ac, trunk/liboct/config.h.in,
	  trunk/src/config.h.in, trunk/src/global.h:
	  Added a macro in build/acx.m4, that checks wether the compiler is able
	  to tackle with long lines (about 150 characters).
	  
	  This is called in configure.ac, and defines the preprocessor macro
	  LONG_LINES to 1.
	  
	  This is in turn used in global.h: if no long lines are possible, the
	  assertion sanity check is not defined (this check involves very long lines,
	  and so with the compilers that do not allow this, the code will not compile
	  in debug mode).
	  
	  In general, for this compilers, a macro definition should not expand
	  arbitrarily to any length, or it will not work.

2005-05-23  appel

	* [r1152] trunk/liboct_parser/parser_f.c:
	  Adapt interface to revised parse_init.
	* [r1151] trunk/src/global.h:
	  In my last commit this one was slipping in. Undo changes.
	* [r1150] trunk/src/global.h, trunk/src/restart_inc.F90, trunk/src/specie.F90:
	  Two more places where simultaneous writes were made.
	* [r1149] trunk/liboct_parser/liboct_parser.h, trunk/liboct_parser/parse.c,
	  trunk/src/global.F90, trunk/src/liboct_parser.F90:
	  The Octopus parser was not MPI clean (all nodes were writing simultaneously to
	  out.oct).
	  Cleaning up parser calls. Now only node 0 writes to out.oct.

2005-05-22  appel

	* [r1148] trunk/testsuite/oct-run_testsuite:
	  Yet another renaming missing
	* [r1147] trunk/doc/Makefile.am, trunk/doc/octopus.pod:
	  Adding man page for the octopus executable. Currently it's very brief,
	  feel free to update it ...
	* [r1146] trunk/testsuite/oct-run_regression_test.pl,
	  trunk/testsuite/oct-run_regression_test.pl.pod, trunk/testsuite/oct-run_testsuite:
	  Forgot some renames inside the files.

2005-05-22  acastro

	* [r1145] trunk/doc/img/elf.eps, trunk/doc/img/laser.eps, trunk/doc/img/pi02.eps,
	  trunk/doc/img/pi03.eps, trunk/doc/img/pi04.eps, trunk/doc/img/spacing.eps,
	  trunk/doc/pdf/tutorial.pdf, trunk/doc/tutorial.tex:
	  I had forgot to substitute the old "tutorial.tex" by the new one. Also added
	  the image files, and updated the pdf.
	  Now the new tutorial also has the Helium example.

2005-05-21  appel

	* [r1144] trunk/testsuite/Makefile.am, trunk/testsuite/oct-run_regression_test.pl,
	  trunk/testsuite/oct-run_regression_test.pl.pod, trunk/testsuite/oct-run_testsuite,
	  trunk/testsuite/run_regression.pl, trunk/testsuite/run_regression.pl.pod,
	  trunk/testsuite/run_testsuite:
	  > Heiko, maybe we should rename the script to oct-run-testsuit. Imagine
	  > that it gets installed in /usr/bin, it would be quite hard to realize
	  > that it had something to do with octopus with such general name. What do
	  > you think?
	  
	  :). Came also to my mind when I installed the debs yesterday on our cluster.
	  Of course you are right. The same holds true for the perl script.

2005-05-20  acastro

	* [r1143] trunk/src/td.F90:
	  The record-length bug is also now fixed in the head version as well.
	  Note: I did not modify the io_open subroutine to do it, adding a possible
	  recl optional variable, because it gets compilicated (it would not be valid
	  for unformatted files...). This way it is easier.

2005-05-20  appel

	* [r1142] trunk/testsuite/Makefile.am, trunk/testsuite/run_testsuite:
	  Adding wrapper script which runs all tests. The script is member of bin_SCRIPTS
	  and will therefore be installed to /usr/bin. This is especially useful for
	  packaged versions of Octopus (rpm's, deb's) since the user has in this case no
	  makefiles available.
	  
	  If some tests fail a report can be sent to a given mail address using the -m flag.
	  
	  run_testsuite -f -m octopus-devel@tddft.org
	  
	  This is also useful for crontab entries (i.e. we could run tests nightly and send
	  reports to octopus-devel if some of them fail).
	* [r1141] trunk/testsuite, trunk/testsuite/.cvsignore:
	  Adding .cvsignore file.
	* [r1140] trunk/testsuite/finite_systems_1d/helium.test,
	  trunk/testsuite/finite_systems_3d/sodium.test,
	  trunk/testsuite/finite_systems_3d/spinors.test, trunk/testsuite/run_regression.pl:
	  Adding "Programs" as new field to the *.test files. We can now
	  distinguish between different executables, or specify several
	  for a given test.
	  Updating exiting tests accordingly.
	* [r1139] trunk/debian/changelog, trunk/debian/rules:
	  Provide all four binaries (ocotpus, octopus_cmplx, octopus-mpi,
	  octopus_cmplx-mpi) in the Debian package.

2005-05-20  micael

	* [r1138] trunk/liboct/config.h.in, trunk/src/epot.F90, trunk/src/epot_inc.F90,
	  trunk/src/h_inc.F90:
	  *) We can now have a static electric field.

2005-05-19  appel

	* [r1137] trunk/src/wave_matching.F90:
	  Remove obsolete comments.
	* [r1136] trunk/debian/changelog, trunk/debian/control, trunk/debian/rules:
	  Update Debian directory.
	* [r1135] trunk/src/casida.F90, trunk/src/cf.F90, trunk/src/crystal.F90,
	  trunk/src/derivatives.F90, trunk/src/derivatives_inc.F90, trunk/src/eigen_plan.F90,
	  trunk/src/epot.F90, trunk/src/f.F90, trunk/src/f_inc.F90, trunk/src/geometry.F90,
	  trunk/src/h_inc.F90, trunk/src/h_so.F90, trunk/src/lasers.F90, trunk/src/lcao.F90,
	  trunk/src/math_cg_inc.F90, trunk/src/mix.F90, trunk/src/opt_control.F90,
	  trunk/src/poisson.F90, trunk/src/poisson2D.F90, trunk/src/poisson_cg.F90,
	  trunk/src/poisson_corrections.F90, trunk/src/ps.F90, trunk/src/restart_inc.F90,
	  trunk/src/run.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/states_kpoints.F90, trunk/src/td.F90, trunk/src/td_exp.F90,
	  trunk/src/td_exp_split.F90, trunk/src/td_rti.F90, trunk/src/td_write.F90,
	  trunk/src/tm.F90, trunk/src/unocc.F90, trunk/src/xc.F90, trunk/src/xc_OEP.F90,
	  trunk/src/xc_OEP_inc.F90, trunk/src/xc_fxc.F90, trunk/src/xc_vxc.F90:
	  Remove unused variables.

2005-05-17  marques

	* [r1134] trunk/src/xc_OEP_x.F90:
	  I fixed some bugs, but it is still not working in parallel :((
	* [r1133] trunk/src/h_inc.F90:
	  Small bug that would only be seen with non uniform meshes.

2005-05-17  micael

	* [r1132] trunk/src/td.F90:
	  *) Bug fixed: the stopping of time-dependent runs was not done properly.
	* [r1131] trunk/testsuite/finite_systems_3d/spinors.test:
	  *) Reduced the precision in the local magnetic moments.

2005-05-17  appel

	* [r1130] trunk/src, trunk/src/.cvsignore:
	  Add Makefile.local to .cvsignore file.
	* [r1129] trunk/share/variables:
	  Add wave_matching to the known variables.
	* [r1128] trunk/src/Makefile.am, trunk/src/run.F90, trunk/src/wave_matching.F90:
	  Add new run mode wave-matching. Up to now the mode is not very
	  functional, though :)

2005-05-17  micael

	* [r1127] trunk/testsuite/finite_systems_3d/spinors.test:
	  *) Added spinors test.
	  
	  Right now the test is done even if the code was compiled for real wavefuntions.
	  Of course, in that case it fails. Maybe this should be changed...

2005-05-17  appel

	* [r1126] trunk/src/main.F90, trunk/src/run.F90:
	  Move some more parser calls from global.F90 to run.F90. Otherwise it would not
	  be possible to run e.g. subsystem #1 with PeriodicDimensions = 2 and subsystem #2
	  with PeriodicDimensions = 1.

2005-05-17  micael

	* [r1125] trunk/src/states.F90:
	  *) Program should die when trying to use spinors with an executable compiled
	  for real wavefunctions.

2005-05-17  appel

	* [r1124] trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/global.F90,
	  trunk/src/run.F90:
	  Avoid pseudopotential stuff during a run if the input file
	  contains OnlyUserDef = yes
	* [r1123] trunk/src/crystal.F90:
	  write only warning if zero determinant is found (always the case for 1D
	  and 2D)
	* [r1122] trunk/src/Makefile.am:
	  Add hook to include a user defined local Makefile (called Makefile.local) which
	  is not included in the octopus distribution. If the file is provided by the user
	  it'll be sourced by Makefile.am otherwise it is ignored.
	* [r1121] trunk/Makefile.am, trunk/acinclude.m4, trunk/build/acx.m4, trunk/build/acx_fft.m4,
	  trunk/configure.ac, trunk/doc/Makefile.am, trunk/doc/pdf/Makefile.am,
	  trunk/liboct/Makefile.am, trunk/liboct/grammar.c, trunk/liboct/oct_f.c,
	  trunk/liboct/oct_gsl_f.c, trunk/liboct/recipes.c, trunk/liboct/varia.c,
	  trunk/liboct/varia.h, trunk/liboct/write_iter.c, trunk/liboct/ylm.c,
	  trunk/liboct_parser/Makefile.am, trunk/liboct_parser/grammar.y,
	  trunk/liboct_parser/gsl_userdef.c, trunk/liboct_parser/gsl_userdef.h,
	  trunk/liboct_parser/liboct_parser.h, trunk/liboct_parser/parse.c,
	  trunk/liboct_parser/parse_exp.c, trunk/liboct_parser/parser_f.c,
	  trunk/liboct_parser/string_f.c, trunk/liboct_parser/string_f.h,
	  trunk/liboct_parser/symbols.c, trunk/liboct_parser/symbols.h, trunk/libxc/Makefile.am,
	  trunk/share/Makefile.am, trunk/share/PP/HGH/Makefile.am, trunk/share/PP/Makefile.am,
	  trunk/share/PP/TM2/Makefile.am, trunk/share/recipes/Makefile.am,
	  trunk/share/recipes/en/Makefile.am, trunk/share/recipes/es/Makefile.am,
	  trunk/share/recipes/it/Makefile.am, trunk/share/samples/Makefile.am,
	  trunk/share/util/Makefile.am, trunk/src/Makefile.am, trunk/src/atomic.F90,
	  trunk/src/blas.F90, trunk/src/broad.F90, trunk/src/casida.F90, trunk/src/centergeom.F90,
	  trunk/src/cf.F90, trunk/src/cf_inc.F90, trunk/src/complex.F90, trunk/src/curv_briggs.F90,
	  trunk/src/curv_gygi.F90, trunk/src/curv_modine.F90, trunk/src/curvlinear.F90,
	  trunk/src/derivatives.F90, trunk/src/derivatives_inc.F90, trunk/src/eigen.F90,
	  trunk/src/eigen_cg2.F90, trunk/src/eigen_cg3.F90, trunk/src/eigen_plan.F90,
	  trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/f.F90, trunk/src/f_inc.F90,
	  trunk/src/fft.F90, trunk/src/fftw2.F90, trunk/src/fftw3.F90, trunk/src/geom_opt.F90,
	  trunk/src/geometry.F90, trunk/src/global.F90, trunk/src/global.h, trunk/src/gs.F90,
	  trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/h_so.F90, trunk/src/hgh.F90,
	  trunk/src/hs_from_acc.F90, trunk/src/hs_from_mult.F90, trunk/src/lasers.F90,
	  trunk/src/lcao.F90, trunk/src/liboct.F90, trunk/src/liboct_parser.F90,
	  trunk/src/libxc.F90, trunk/src/linalg_adv.F90, trunk/src/linalg_basic.F90,
	  trunk/src/linalg_basic_blas.F90, trunk/src/linear_response.F90,
	  trunk/src/linear_response_inc.F90, trunk/src/logrid.F90, trunk/src/main.F90,
	  trunk/src/make_st.F90, trunk/src/math.F90, trunk/src/math_cg_inc.F90,
	  trunk/src/math_inc.F90, trunk/src/mesh.F90, trunk/src/mesh_create.F90, trunk/src/mf.F90,
	  trunk/src/mf_inc.F90, trunk/src/mix.F90, trunk/src/nl_operator.F90,
	  trunk/src/oct_test.F90, trunk/src/opt_control.F90, trunk/src/out.F90,
	  trunk/src/out_inc.F90, trunk/src/pes.F90, trunk/src/pes_mask.F90, trunk/src/pes_rc.F90,
	  trunk/src/phonon_spectrum.F90, trunk/src/phonons.F90, trunk/src/poisson.F90,
	  trunk/src/poisson1D.F90, trunk/src/poisson2D.F90, trunk/src/poisson3D.F90,
	  trunk/src/poisson_cg.F90, trunk/src/poisson_corrections.F90, trunk/src/ps.F90,
	  trunk/src/pulpo.F90, trunk/src/real.F90, trunk/src/restart.F90, trunk/src/restart_inc.F90,
	  trunk/src/rotational_strength.F90, trunk/src/run.F90, trunk/src/scf.F90,
	  trunk/src/specie.F90, trunk/src/spectrum.F90, trunk/src/spline.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/states_kpoints.F90, trunk/src/static_pol.F90,
	  trunk/src/static_pol_lr.F90, trunk/src/stencil_cube.F90, trunk/src/stencil_star.F90,
	  trunk/src/stencil_variational.F90, trunk/src/strength_function.F90, trunk/src/string.F90,
	  trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_exp.F90,
	  trunk/src/td_exp_split.F90, trunk/src/td_init.F90, trunk/src/td_rti.F90,
	  trunk/src/td_write.F90, trunk/src/tm.F90, trunk/src/undef.F90, trunk/src/units.F90,
	  trunk/src/unocc.F90, trunk/src/v_ks.F90, trunk/src/v_ks_inc.F90, trunk/src/xc.F90,
	  trunk/src/xc_KLI.F90, trunk/src/xc_OEP.F90, trunk/src/xc_OEP_SIC.F90,
	  trunk/src/xc_OEP_inc.F90, trunk/src/xc_OEP_x.F90, trunk/src/xc_axc.F90,
	  trunk/src/xc_functl.F90, trunk/src/xc_fxc.F90, trunk/src/xc_vxc.F90,
	  trunk/src/xyz_adjust.F90, trunk/src/xyz_file.F90, trunk/src/xyzanim.F90,
	  trunk/testsuite/Makefile.am:
	  Add $Id$ tags to most of the files (right below the GPL header). At every
	  commit cvs is replacing these tags with lines of the following form
	  
	  $Id$
	  
	  In this way it is easy to see who was the last person changing the file, which
	  cvs revision the file has and at what date the last change was made.
	  
	  Miguel: Is there a reason why the *.c files in libxc/ don't have a GPL header?

2005-05-12  appel

	* [r1120] trunk/src/poisson.F90:
	  Setting poisson_solver = -99 in poisson_end. This was the show stopper
	  for the cf%fft bug.
	  The new multi_subsystem mode is now working properly.

2005-05-12  acastro

	* [r1119] trunk/testsuite/Makefile.am:
	  In this way, we make sure that the regression_test.pl runs with the
	  proper octopus_whatever. Also, "make check" triggers the test.

2005-05-12  marques

	* [r1118] trunk/testsuite/Makefile.am, trunk/testsuite/finite_systems_1d/helium.test,
	  trunk/testsuite/run_regression.pl:
	  Some very small changes in order for the tests to run in my machine. Now if
	  ../src/octopus[_debug] exists, then it is used to run the tests.

2005-05-11  acastro

	* [r1117] trunk/src/Makefile.am:
	  Compilation was broken when doing "make check".

2005-05-10  appel

	* [r1116] trunk/testsuite/Makefile.am, trunk/testsuite/finite_systems_1d/helium.test,
	  trunk/testsuite/finite_systems_3d/sodium.test, trunk/testsuite/run_regression.pl:
	  - adding entry in *.test files to enable/disable a regression test.
	  - installing testsuite files (during make install).
	  - improving the regression script a bit.
	* [r1115] trunk/share/variables:
	  add multi_subsystem to the list of variables
	* [r1114] trunk/src/Makefile.am, trunk/src/broad.F90, trunk/src/casida.F90,
	  trunk/src/cf_inc.F90, trunk/src/curv_briggs.F90, trunk/src/curv_gygi.F90,
	  trunk/src/curv_modine.F90, trunk/src/curvlinear.F90, trunk/src/derivatives.F90,
	  trunk/src/eigen.F90, trunk/src/eigen_cg3.F90, trunk/src/epot.F90, trunk/src/f.F90,
	  trunk/src/fftw2.F90, trunk/src/fftw3.F90, trunk/src/geom_opt.F90, trunk/src/geometry.F90,
	  trunk/src/global.F90, trunk/src/gs.F90, trunk/src/h.F90, trunk/src/hs_from_acc.F90,
	  trunk/src/hs_from_mult.F90, trunk/src/lasers.F90, trunk/src/linear_response.F90,
	  trunk/src/main.F90, trunk/src/make_st.F90, trunk/src/math.F90, trunk/src/mesh_create.F90,
	  trunk/src/mix.F90, trunk/src/opt_control.F90, trunk/src/out.F90, trunk/src/pes.F90,
	  trunk/src/pes_rc.F90, trunk/src/phonons.F90, trunk/src/poisson.F90,
	  trunk/src/poisson2D.F90, trunk/src/poisson3D.F90, trunk/src/restart.F90,
	  trunk/src/rotational_strength.F90, trunk/src/run.F90, trunk/src/scf.F90,
	  trunk/src/specie.F90, trunk/src/states.F90, trunk/src/states_kpoints.F90,
	  trunk/src/static_pol.F90, trunk/src/static_pol_lr.F90, trunk/src/strength_function.F90,
	  trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_exp.F90, trunk/src/td_init.F90,
	  trunk/src/td_rti.F90, trunk/src/td_write.F90, trunk/src/units.F90, trunk/src/unocc.F90,
	  trunk/src/v_ks.F90, trunk/src/xc.F90, trunk/src/xc_OEP.F90, trunk/src/xc_functl.F90,
	  trunk/src/xyz_adjust.F90, trunk/src/xyz_file.F90, trunk/src/xyzanim.F90:
	  Octopus can now treat several "subsystems" in a single run (a
	  prerequisite for transport, surfaces, etc.). A simple example
	  for the input file in such a run would be
	  
	  ---------------------------------
	  CalculationMode = multi_subsystem
	  fromScratch = yes
	  
	  %SystemLabels
	  "Soup" | "Dessert" | "Sodium"
	  %
	  
	  %SystemRunModes
	  recipe | recipe | gs
	  %
	  
	  %SystemRunOrder
	  3 | 1 | 2
	  %
	  
	  %Coordinates
	  "Na" | 0 | 0 | -1.54
	  "Na" | 0 | 0 | 1.54
	  %
	  DesertSpacing = 0.3
	  SodiumSpacing = 0.4
	  Radius = 8.0
	  ---------------------------------
	  
	  In this case we run a "calculation" for three subsystems. Of course the
	  "Dessert" system will be treated first :). The systems are distinguished
	  by namespace (SystemLabels), e.g. output directories will have the system
	  label as prefix. In the input you can prepend all of the usual variables
	  with a corresponding system label. If no variable with system label is
	  found the fallback will be the bare variable name without prefix (in the
	  above example the same Radius will be used for all subsystems). This
	  ensures also backward compatibility to the input files used so far.
	  
	  In oder to keep the scheme consistent for all variables I had to change
	  the parser calls from
	  
	  loct_parse_*('SomeVariable', ...)
	  
	  to
	  
	  loct_parse_*(check_inp('SomeVariable'), ...)
	  
	  (This is partly the reason for the large number of files I had to touch.)
	  The function check_inp takes care of label prepending and fallback to default
	  values. Please use the function if you introduce new input variables.
	  
	  As you can imagine there are still some problems with the memory management
	  when running in multi_subsystem mode (e.g. Assertion "associated(cf%fft)"
	  failed in line 89 in file "cf_inc.F90"). Nevertheless, single subsystems
	  should run as usual (with the usual input file syntax).

2005-05-05  appel

	* [r1113] trunk/testsuite/Makefile.am:
	  correcting filenames.
	* [r1112] trunk/Makefile.am, trunk/configure.ac, trunk/tests, trunk/testsuite,
	  trunk/testsuite/Makefile.am, trunk/testsuite/finite_systems_1d,
	  trunk/testsuite/finite_systems_1d/helium.test, trunk/testsuite/finite_systems_3d,
	  trunk/testsuite/finite_systems_3d/sodium.test, trunk/testsuite/run_regression.pl,
	  trunk/testsuite/run_regression.pl.pod:
	  This is a basic infrastructure for Octopus regression testing.
	  I've written a man page for the Perl script that controls the
	  regression tests. After a make in the testsuite direcory you
	  can read the man page with "man -l run_regression.pl.1" or after
	  you did make install simply by "man run_regression.pl" if your
	  MANPATH ist set properly.
	  
	  To start the regression test type "make regression_test" in the testsuite
	  directory. This will search recursively for files with extension .test
	  and run the corresponding regression for each of them. A summary of
	  the regression test can be found in regression_test.log.
	  
	  If we plan to run the regression tests nightly the cron job could check
	  if there's a FAIL in this logfile and send it to octopus-devel.
	  
	  I've added two simple tests. Please use the -c option of the Perl
	  script to add own tests. This facilitates the generation of tests
	  considerably.

2005-04-28  marques

	* [r1111] trunk/src/io.F90:
	  Sorry, there was a small bug here.
	* [r1110] trunk/src/broad.F90, trunk/src/casida.F90, trunk/src/geometry.F90,
	  trunk/src/hgh.F90, trunk/src/io.F90, trunk/src/lasers.F90, trunk/src/opt_control.F90,
	  trunk/src/out_inc.F90, trunk/src/pes_mask.F90, trunk/src/pes_rc.F90,
	  trunk/src/phonon_spectrum.F90, trunk/src/phonons.F90, trunk/src/ps.F90,
	  trunk/src/restart_inc.F90, trunk/src/scf.F90, trunk/src/specie.F90,
	  trunk/src/spectrum.F90, trunk/src/static_pol.F90, trunk/src/static_pol_lr.F90,
	  trunk/src/td.F90, trunk/src/tm.F90, trunk/src/unocc.F90, trunk/src/xyz_file.F90:
	  Following the complain of Francesco, action is no longer optional in calling
	  io_open.

2005-04-25  marques

	* [r1109] trunk/src/states.F90, trunk/src/td.F90, trunk/src/xc_OEP_x.F90:
	  exact exchange is working (apparently) in parallel. I will have to do a couple
	  more tests tomorrow, as I am getting sometimes some funny behavior.

2005-04-22  acastro

	* [r1108] trunk/src/xc_KLI.F90:
	  Bug fixed.
	  The MPI implementation of the KLI did not work with the NAG compiler.
	* [r1107] trunk/src/td_write.F90:
	  NAG compiler emits a segfault when an empty string is passed to the
	  C interface. I tried to figure out why, but I could not, so I decided
	  to put a dash there, which avoids the problem.
	* [r1106] trunk/src/states.F90:
	  Removed one line of code.
	  The line was, however, absolutely correct, a fine
	  tautology, as in "I am who I am" (God).

2005-04-21  acastro

	* [r1105] trunk/src/xc_OEP_SIC.F90:
	  Bug fixed.
	  Now it seems that the SIC/KLI total energy behaves well (the bug did not
	  affect the evolution itself, only the total energy number). There is
	  still an annoying error in the 9th digit or so, but I hope it is only
	  numerical.

2005-04-14  marques

	* [r1104] trunk/src/xc_OEP_x.F90:
	  There were some conjg that apparently disappeared some time ago.
	* [r1103] trunk/src/v_ks.F90, trunk/src/xc.F90, trunk/src/xc_OEP.F90:
	  Information about the OEP was not being printed to stdout
	* [r1102] trunk/src/xc_OEP.F90:
	  Stupid bug fixed.
	* [r1101] trunk/src/poisson2D.F90, trunk/src/poisson3D.F90, trunk/src/v_ks.F90,
	  trunk/src/xc_OEP.F90, trunk/src/xc_OEP_inc.F90:
	  I think the OEP is working now. In any case, it only works for the ground-state
	  (the generalization to TD is not obvious), and you should be careful with the
	  convergence.

2005-04-13  marques

	* [r1100] trunk/src/linear_response.F90, trunk/src/linear_response_inc.F90,
	  trunk/src/static_pol_lr.F90, trunk/src/xc_OEP.F90, trunk/src/xc_OEP_inc.F90:
	  some more changes. Still does not converge fast enough for my taste, but I
	  think I understood why.
	* [r1099] trunk/src/scf.F90:
	  I forgot to recalculate the energy before printing it...

2005-04-13  micael

	* [r1098] trunk/src/restart_inc.F90, trunk/src/td.F90:
	  *) Bug fixed: each node was only reading the occupations and eigenvalues of the
	  states assigned to it, but the occupations and eigenvalues were all writen by the
	  first node. This means the data writen to the "occs" file at the end of a TD run
	  was wrong.
	  *) The potentials form previous TD iterations were writen by all the nodes. Even if
	  it was not causing any porblem in my machine, I think only the first node should
	  output.

2005-04-13  marques

	* [r1097] trunk/src/linear_response.F90, trunk/src/linear_response_inc.F90,
	  trunk/src/static_pol_lr.F90, trunk/src/xc_OEP.F90, trunk/src/xc_OEP_inc.F90:
	  Some more changes in the OEP. But it's still not fully OK.

2005-04-12  acastro

	* [r1096] trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/td_write.F90:
	  Bug fixed.
	  The calculation of the projection of the TDKS determinant onto the
	  ground-state KS determinant was broken, both in serial and in parallel.
	* [r1095] trunk/src/td_write.F90:
	  Bug fixed.
	  The calculation of the projection onto the ground state was broken.

2005-04-11  acastro

	* [r1094] trunk/src/casida.F90:
	  Bug fixed.
	  The MPI version of the casida file did not compile.
	  [I have not actually tested that it works, at least now it compiles ;) ]
	* [r1093] trunk/src/casida.F90:
	  Just trying to do the linear response a bit informative in the output.
	* [r1092] trunk/src/eigen.F90, trunk/src/eigen_cg2.F90, trunk/src/scf.F90,
	  trunk/src/unocc.F90:
	  I changed a little bit the unoccupied mode, to get a more informative
	  output as it runs (I got tired of the way it was done). Also, it no longer
	  does a number of iterations (it does not make much sense to have an iterative
	  procedure inside another iterative procedure). Moreover, now it no longer
	  touches the occupied states.

2005-04-11  marques

	* [r1091] trunk/share/variables:
	  Having "verbose" at the same time as a variable name and as a parameter was
	  not a good idea ;) I added "_mode" to the parameters.
	* [r1090] trunk/src/scf.F90:
	  Octopus now outputs the total energy at every iteration during scf.

2005-04-11  acastro

	* [r1089] trunk/share/samples/Na2, trunk/src/derivatives.F90, trunk/src/nl_operator.F90,
	  trunk/src/stencil_cube.F90, trunk/src/stencil_star.F90, trunk/src/stencil_variational.F90:
	  The Octopus Laboratory for Desperate Solutions has produced a
	  modification of the Maragakis et al. variational discretization. It
	  incorporates to the Laplacian a high-frequency filter. This permits to
	  reduce the norm of the Hamiltonian, which facilitates the work of the
	  propagators, and, consequently, speed-up the evolution.
	  The drawback is that applying a filter is only justified when the problem
	  is well converged with respect to the grid-spacing.

2005-04-08  acastro

	* [r1088] trunk/src/specie.F90:
	  Bug fixed.
	  I added defaults for the filter parameters. Otherwise the code crashed
	  when the element was not read from the "defaults" file, and the filtering
	  parameters were not present in the Species block -- if FilterPotentials
	  was set to yes.
	* [r1087] trunk/src/ps.F90:
	  Bug fixed.
	  This bug showed up only when using TM pseudos with nonlocal components,
	  and the l=1 or higher component was used as local.
	  It all boiled down to a couple of lines, that I screwed up (sorry!) when I
	  did the filtering stuff. Difficult (and long) to hunt this one, though.

2005-04-07  marques

	* [r1086] trunk/src/Makefile.am, trunk/src/linear_response.F90,
	  trunk/src/linear_response_inc.F90, trunk/src/out_inc.F90, trunk/src/static_pol_lr.F90,
	  trunk/src/xc.F90, trunk/src/xc_KLI.F90, trunk/src/xc_OEP.F90, trunk/src/xc_OEP_inc.F90:
	  Full OEP seems to work (at least it converges). However, it needs some clening
	  and some more work to make it faster. Stay tuned for more info.

2005-04-07  micael

	* [r1085] trunk/share/variables:
	  *) Added xc-cdft variables.

2005-04-07  marques

	* [r1084] trunk/src/Makefile.am, trunk/src/linear_response.F90,
	  trunk/src/linear_response_inc.F90, trunk/src/static_pol_lr.F90, trunk/src/v_ks.F90,
	  trunk/src/xc_OEP.F90:
	  *) Sorry, there was a small bug that make the code not compile
	  *) Moved linear_response
	  
	  Rgarding this reorganization, I would still like to do 2 things
	  1) "upgrade" states_dim to dimensions, and include it directly in sys
	  2) include also h in sys
	  
	  In this way, the variable sys contains *all* information that has to be passed
	  around in high level routines. Please let me know if you disagree.
	* [r1083] trunk/src/h_xc_OEP.F90:
	  Forgot to remove this file. It is now calles xc_OEP.F90
	* [r1082] trunk/src/Makefile.am, trunk/src/casida.F90, trunk/src/fftw2.F90,
	  trunk/src/fftw3.F90, trunk/src/geom_opt.F90, trunk/src/gs.F90, trunk/src/h.F90,
	  trunk/src/h_inc.F90, trunk/src/libxc.F90, trunk/src/opt_control.F90,
	  trunk/src/phonons.F90, trunk/src/run.F90, trunk/src/scf.F90, trunk/src/static_pol.F90,
	  trunk/src/static_pol_lr.F90, trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_rti.F90,
	  trunk/src/unocc.F90, trunk/src/v_ks.F90, trunk/src/v_ks_inc.F90, trunk/src/xc.F90,
	  trunk/src/xc_OEP.F90, trunk/src/xc_OEP_inc.F90, trunk/src/xc_axc.F90,
	  trunk/src/xc_functl.F90, trunk/src/xc_fxc.F90, trunk/src/xc_pot.F90, trunk/src/xc_vxc.F90:
	  Big restructuring
	  *) dependencies in Makefile.am now only include the #includes. More than
	  this would mean a lot of compilation time.
	  *) I created the new modules v_ks and xc_OEP. The second is obvious. The
	  objective of the first is to hold all information necessary to create
	  the Kohn-Sham potential. For now, it is missing the external potential.
	  
	  This was done, in order for the OEP to be able to use the linear_response
	  module (S. Kuemmel's algorithm is absically teh same as the calculation of
	  the static polarization.

2005-04-06  marques

	* [r1081] trunk/libxc/lca_lch.c, trunk/libxc/lca_omc.c:
	  LOL! Calculating derivatives is always a hassle, even if only of simple functions ;)))
	  Please recheck them.

2005-04-06  micael

	* [r1080] trunk/src/f_inc.F90, trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/libxc.F90,
	  trunk/src/xc.F90, trunk/src/xc_functl.F90, trunk/src/xc_pot.F90:
	  *) Octopus can now use the new CDFT functional. This implied some "funny" changes
	  in the xc modules. All of this still needs to be properly tested.
	* [r1079] trunk/libxc/Makefile.am, trunk/libxc/lca.c, trunk/libxc/lca_lch.c,
	  trunk/libxc/lca_omc.c, trunk/libxc/util.h, trunk/libxc/xc.h, trunk/libxc/xc_f.c:
	  *) Added the Vignale-Rasolt functional for CDFT to libxc. Two parametrizations
	  are available. This has *not* been tested carefully yet.
	* [r1078] trunk/src/mix.F90, trunk/src/scf.F90:
	  *) Bug fixed. Some time ago all arrays of the form (3, m%np) where changed
	  to the form (m%np, 3). This was not taken into account in the scf and
	  mixing modules.

2005-04-05  acastro

	* [r1077] trunk/src/td_exp.F90:
	  Some cleaning of the lanczos routine.

2005-04-04  micael

	* [r1076] trunk/src/Makefile.am, trunk/src/atoms_magnet.F90:
	  *) Removed oct-atoms-magnet utility. Some recent changes made it useless.
	* [r1075] trunk/src/derivatives.F90, trunk/src/derivatives_inc.F90, trunk/src/f.F90,
	  trunk/src/f_inc.F90:
	  *) Added routines to compute the curl of a vector field. For now it only
	  works in real space.

2005-04-04  acastro

	* [r1074] trunk/libxc/mgga_c_tpss.c, trunk/src/nl_operator.F90:
	  [*] A small change in the "nl_operator_operate" subroutines, which,
	  specially in the complex case, seems to speed up things significantly.
	  But most likely it does so only in some architecutures/compilers. In the
	  case of the Portland compiler for opterons, the speedup is rather
	  spectacular, probably because before the type conversion was very
	  slow (the opteron was running slower that my laptop!)
	  [*] In mgga_c_tpss, some Portland C compilers complained about those
	  array definitions, I think it is more correct now.

2005-04-01  acastro

	* [r1073] trunk/src/epot.F90, trunk/src/td.F90, trunk/src/td_init.F90:
	  A first try to speedup the re-generation of the ionic potential for
	  molecular-dynamics simulations, which has shown up to be rather relevant
	  (specially since it is not parallelized). What I have done is the following:
	  
	  (i) The td_type variable now contains an integer, epot_regenerate, which
	  decides when a "fast regeneration" is wanted: every epot_regenerate
	  iterations, the usual "slow regeneration" is done; otherwise, a fast
	  regeneration is done.
	  (ii) This is done by passing an extra optional variable to epot_generate,
	  "fast_generation".
	  (iii) And what is a "fast regeneration"?, you are probably wondering. Well,
	  in principle it could be anything -- for example just do nothing, just
	  use the previous potential. However, I have been more conservative for the
	  moment, and I have noticed that most of the time seems to be used in figuring
	  out the points in the non-local spheres. So I have removed that part in the
	  "fast regenerations": in those cases, the previous sphere is used directly.
	  In this way the potential is actually regenerated, the only difference is
	  that maybe some points are missing in the spheres.
	  
	  I have defaulted the input variable (which I have called TDFastEpotGeneration)
	  to one, so that by default nothing changes.
	  
	  For Na2 in my laptop, it reduces the time from 1.00s to 0.34s. This 0.34s is
	  now mainly used in getting the local potential. If more savings are needed,
	  we could think about changing what a "fast regeneration" is.
	* [r1072] trunk/src/Makefile.am, trunk/src/expokit_inc.F90, trunk/src/math.F90,
	  trunk/src/td_exp.F90, trunk/src/td_rti.F90:
	  After all, I removed the Lanczos expokit implementation, since I do
	  not like their finish criterion. I will leave the expokit routine
	  for dense matrices, though, since that is clearly better than mine.
	  I have rewritten my own Lanczos routine.
	  Remember that to profit from the Lanczos routine, one should increase
	  the TDExpOrder (for example, to 20 or 30), and increase the time-step.
	  One should however do a previous small run with a small time step to make
	  sure that it is going allright.

2005-03-31  acastro

	* [r1071] trunk/src/restart_inc.F90:
	  "/lib/cpp -C" complains when it finds an unterminated '
	  in a comment. I do not know if this can be avoided with preprocessor options,
	  but in any case probably the best idea is to avoid putting quotation
	  marks in comments.

2005-03-30  marques

	* [r1070] trunk/src/casida.F90, trunk/src/h_xc_OEP.F90, trunk/src/td.F90,
	  trunk/src/td_init.F90, trunk/src/xc.F90, trunk/src/xc_OEP_SIC.F90, trunk/src/xc_fxc.F90,
	  trunk/src/xc_pot.F90:
	  Now, both polarized and unpolarized versions of teh xc potential are
	  initialized. This will be needed in casida soon.
	* [r1069] trunk/share/variables:
	  Added a variable for casida run_mode
	* [r1068] trunk/src/Makefile.am, trunk/src/casida.F90, trunk/src/excitations.F90,
	  trunk/src/linear.F90, trunk/src/restart_inc.F90, trunk/src/run.F90, trunk/src/unocc.F90,
	  trunk/src/xc_pot.F90:
	  *) excitations is no longer a separated programs, but a run_mode (9)
	  *) excitations.F90 and linear.F90 merged to casida.F90
	  I think "linear.F90" was quite misleading.
	  *) Spring cleaning of casida routines

2005-03-30  acastro

	* [r1067] trunk/src/xc_OEP_x.F90:
	  Bug fixed.
	  A conjugate was missing.

2005-03-29  micael

	* [r1066] trunk/src/Makefile.am:
	  *) Bug fixed: a filename was mistyped.

2005-03-29  acastro

	* [r1065] trunk/src/static_pol_lr.F90, trunk/src/xc_OEP_x.F90:
	  (*) By making use of the new zpoisson_solve for complex functions, one
	  can clean up the code in xc_OEP_x.F90 and save some lines of code.
	  (*) The code did not compile with --enable-complex because of some
	  lines in static_pol_lr.F90 and xc_OEP_x.F90.

2005-03-29  micael

	* [r1064] trunk/src/h.F90, trunk/src/h_so.F90:
	  *) Spin-orbit is working for uniform grids.
	* [r1063] trunk/src/atoms_magnet.F90, trunk/src/excitations.F90, trunk/src/geom_opt.F90,
	  trunk/src/geometry.F90, trunk/src/gs.F90, trunk/src/opt_control.F90,
	  trunk/src/phonons.F90, trunk/src/scf.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/static_pol.F90, trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_init.F90,
	  trunk/src/td_rti.F90, trunk/src/td_write.F90, trunk/src/unocc.F90:
	  *) Cleaned the routines to calculate the magnetic moments (total and local).
	  *) Local magnetic moments are now written to static/info file.
	  *) When using non-collinear spin, the total and local magnetic moments are written
	  during the SCF cycle (this helps a lot understanding how the system is converging).
	  *) It is now possible to output the local magnetic moments during the time-propagation.
	  *) Changed the name of some subroutines.

2005-03-29  marques

	* [r1062] trunk/src/Makefile.am:
	  reference to linear_response_inc.F90 was missing in Makefile

2005-03-28  acastro

	* [r1061] trunk/libxc/Makefile.am, trunk/libxc/lda.c, trunk/libxc/lda_x.c, trunk/libxc/xc.h,
	  trunk/libxc/xc_f.c:
	  A pretty sick performance hack.
	  
	  The idea is the following: instead of calculating the LDA functionals
	  everytime, one can "spline" them at the beginning, and then interpolate
	  every time, since they are very smooth functions. Some comments:
	  
	  (*) The calculation of the LDA exchange and correlation functionals do
	  not take a significant calculation time, *except* if one wants to use the
	  SIC+LDA within the OEP/KLI approximation for a big molecule.
	  (*) This commit is still experimental, and in fact the code is still
	  exactly the same as it was, if you do not compile adding the LDA_SPEEDUP
	  preprocessor variable (by doing CFLAGS="-O3 -DLDA_SPEEDUP", for example).
	  So you do not have to worry at all about this for the moment...
	  I will make sure that it works well and that it makes sense before making
	  it definive.
	* [r1060] trunk/doc/octopus.info, trunk/doc/octopus.texi, trunk/doc/pdf/octopus.pdf,
	  trunk/share/samples/Na2, trunk/src/excitations.F90:
	  Little bug fixed.
	  The variable that fixes the number of unoccupied states is
	  from now on "NumberUnoccStates". I updated the samples file
	  (variables UnoccConv and UnoccMaximumIter are now gone) and the manual.

2005-03-22  marques

	* [r1059] trunk/src/Makefile.am, trunk/src/h_inc.F90, trunk/src/linear.F90,
	  trunk/src/linear_response.F90, trunk/src/linear_response_inc.F90, trunk/src/poisson.F90,
	  trunk/src/static_pol_lr.F90, trunk/src/xc_OEP_SIC.F90, trunk/src/xc_OEP_x.F90:
	  first steps into Sternheimer approach.
	  Now we have a zpoisson_solve. Alberto, would you mind using this function
	  in xc_OEP_x.F90 (as you wre working on sthis stuff recently, it must be fresh
	  in yout mind ;)? It would save at least 30 lines of code.

2005-03-22  acastro

	* [r1058] trunk/src/expokit_inc.F90, trunk/src/math.F90, trunk/src/td_exp.F90:
	  Added the zhexpv subroutine of expokit, that considers the case where
	  the matrix is Hermitian, which is faster. In fact, I modified it a little
	  because our matrix is not Hermitian, but anti-Hermitian (i times the
	  Hamiltonian). It works, and is indeed faster.
	  Now the lanczos method is only working for Hermitian Hamiltonians. I will
	  put back the general mode whenever I have time -- that is why I have
	  left the previous zgexpv subroutine.
	  
	  One can gain significant speed with the Lanczos method over the standard
	  scheme, but only using the proper TDExpOrder and TDLanczosTol, which
	  now only I know how :)) . I will try to make it user-friendly in the
	  future.

2005-03-21  marques

	* [r1057] trunk/src/Makefile.am:
	  Some reference to fxc.F90 was still around in the Makefile

2005-03-21  acastro

	* [r1056] trunk/src/xc_KLI.F90:
	  A little performace hack to speed up the calculation of the KLI/OEP
	  scheme.

2005-03-21  appel

	* [r1055] trunk/src/config.h.in:
	  my cpp didn't like the backtick `
	* [r1054] trunk/src/poisson_cg.F90:
	  need to call now explicitely the d(..) version of conjugate_gradients

2005-03-20  appel

	* [r1053] trunk/src/math.F90, trunk/src/math_cg_inc.F90:
	  add complex valued version of CG and BiCG solver.
	  
	  (Note: Both work only with hermitean operators. This is a property of
	  the CG algorithm. A comment on this can be found in chapter 4.1 of
	  ftp://ftp.netlib.org/templates/templates.ps)
	* [r1052] trunk/src/out.F90, trunk/src/out_inc.F90:
	  add MeshIndex to fuction output_fill_how
	* [r1051] trunk/src/mesh_create.F90:
	  box_offset was missing in fuction in_mesh()

2005-03-18  marques

	* [r1050] trunk/src/Makefile.am, trunk/src/config.h.in, trunk/src/fxc.F90,
	  trunk/src/linear_response.F90, trunk/src/static_pol.F90, trunk/src/static_pol_lr.F90:
	  Now, also the static polarization calculation uses libxc to get fxc.
	  In this way I could remove the file fxc.F90.
	* [r1049] trunk/src/xc_fxc.F90:
	  I had forgotten this file...

2005-03-17  marques

	* [r1048] trunk/libxc/xc_f.c:
	  This file was missing from the previous commit.
	* [r1047] trunk/src/atomic.F90, trunk/src/excitations.F90, trunk/src/geometry.F90,
	  trunk/src/hgh.F90, trunk/src/io.F90, trunk/src/libxc.F90, trunk/src/linear.F90,
	  trunk/src/out_inc.F90, trunk/src/specie.F90, trunk/src/tm.F90, trunk/src/xc.F90,
	  trunk/src/xc_functl.F90:
	  *) Updated the libxc interfaces
	  *) Removed "relativistic" LDA
	  *) excitations now uses libxc to get fxc. All LDAs are now available (and
	  not only PZ). Also, adding spin now is quite easy, as fxc is spin
	  dependent (I did not do it, though). I did not do much testing though...

2005-03-17  micael

	* [r1046] trunk/src/h.F90, trunk/src/h_inc.F90:
	  *) Implemented the effective-mass model. It should be usefull to perform
	  quantum dot calculations.
	* [r1045] trunk/src/poisson2D.F90:
	  *=) I think this line was for debuging purposes, so I removed it.

2005-03-17  marques

	* [r1044] trunk/libxc/lda.c:
	  Just a small rearrangement.
	* [r1043] trunk/libxc/gga_lb.c, trunk/libxc/gga_pbe.c, trunk/libxc/lda.c,
	  trunk/libxc/lda_c_pw.c, trunk/libxc/lda_funcs.c, trunk/libxc/lda_x.c,
	  trunk/libxc/mgga_x_tpss.c, trunk/libxc/test.c, trunk/libxc/util.h, trunk/libxc/xc.h,
	  trunk/libxc/xc_f.c:
	  *) Removed "relativistic exchange", as, I am not mistaken, the potential was wrong.
	  *) Added support for LDA fxc. For now, fxc for exchange and Perdew Wang
	  correlation are analytical, while the rest is calculated through finite
	  differences. Honestly, from the tests I've made, I am inclined to believe
	  that it is actually better to get the numerical derivative. (However, I
	  would not throw away the work of a full day, would I ;)

2005-03-17  acastro

	* [r1042] trunk/liboct/oct_gsl_f.c, trunk/src/fftw3.F90, trunk/src/liboct.F90,
	  trunk/src/math.F90, trunk/src/poisson.F90, trunk/src/poisson2D.F90,
	  trunk/src/poisson3D.F90:
	  I put one FFT Poisson Solver in 2D, by popular demand. It is the
	  "spherical cutoff" method, but in 2D (to use it, just put
	  "PoissonSolver = fft" as usual). I ported it from the quantum
	  dots code of Benasque.
	  
	  It is way faster than the direct summation that we had. The caveat now
	  is that the initialization step (the construction of the Fourier transform
	  of the screened Coulomb interaction) is rather slow (it involves some funny
	  Bessel functions, instead of the easy cosines in 3d). Maybe there is a way
	  to speed that up, but for the moment I will leave it as it is, and only
	  think about that if it is a real problem.

2005-03-17  appel

	* [r1041] trunk/share/samples/Na2:
	  update sample file
	* [r1040] trunk/doc/octopus.info, trunk/doc/octopus.texi:
	  add OutputGnuplotMode and OutputMeshIndex to the manual.
	* [r1039] trunk/share/util/Makefile.am, trunk/share/util/display_mesh_index.gp:
	  small Gnuplot script to display internal mesh numbering. Set OutputMeshIndex = yes
	  to produce appropriate data files.
	* [r1038] trunk/src/out.F90, trunk/src/out_inc.F90:
	  new output modes
	  
	  - OutputGnuplotMode
	  If set to yes, extra newline characters will be inserted in the output of
	  Plane{X,Y,Z}. This allows to contour the data in Gnuplot. Disturbing line
	  connections of splot are also avoided in this way.
	  
	  - OutputMeshIndex
	  Generates output files of a given quantity (Density, Wfs, ...) which include
	  the internal numbering of mesh points. Since this mode produces large datafiles
	  this is only useful for small meshes and debugging purposes.
	* [r1037] trunk/src/io.F90:
	  create user supplied WorkDir if not present (will not harm if WorkDir is
	  already there)

2005-03-15  acastro

	* [r1036] trunk/src/expokit_inc.F90:
	  The NAG compiler complained about the interface to the DZNRM2 blas function.
	* [r1035] trunk/src/io.F90:
	  Bug fixed. Just a parenthesis missing.

2005-03-15  marques

	* [r1034] trunk/src/math.F90:
	  It did not compile.
	* [r1033] trunk/src/string.F90:
	  Separated out some routines that handled strings. it's cleaner like that.
	* [r1032] trunk/src/Makefile.am, trunk/src/atoms_magnet.F90, trunk/src/broad.F90,
	  trunk/src/excitations.F90, trunk/src/geom_opt.F90, trunk/src/geometry.F90,
	  trunk/src/global.F90, trunk/src/gs.F90, trunk/src/hgh.F90, trunk/src/io.F90,
	  trunk/src/lasers.F90, trunk/src/linear.F90, trunk/src/main.F90, trunk/src/make_st.F90,
	  trunk/src/opt_control.F90, trunk/src/out_inc.F90, trunk/src/pes_mask.F90,
	  trunk/src/pes_rc.F90, trunk/src/phonon_spectrum.F90, trunk/src/phonons.F90,
	  trunk/src/ps.F90, trunk/src/restart_inc.F90, trunk/src/scf.F90, trunk/src/specie.F90,
	  trunk/src/spectrum.F90, trunk/src/static_pol.F90, trunk/src/static_pol_lr.F90,
	  trunk/src/td.F90, trunk/src/td_write.F90, trunk/src/tm.F90, trunk/src/unocc.F90,
	  trunk/src/xyz_file.F90, trunk/src/xyzanim.F90:
	  Added the suggestion of Sergey Lisenkov. There is now an input variable
	  WorkDir that determines where the files should be read/write. For that,
	  (almost) all files now should be opened with io_open, AND NOT with the
	  regular open. io_open takes care automatically of the working directory.

2005-03-15  acastro

	* [r1031] trunk/src/expokit_inc.F90:
	  This is the file where the expokit routines are included.
	* [r1030] trunk/src/Makefile.am, trunk/src/math.F90, trunk/src/math_inc.F90,
	  trunk/src/oct_test.F90, trunk/src/run.F90, trunk/src/td_exp.F90, trunk/src/td_rti.F90:
	  The Lanczos algorithm to perform the exponential was not working. In order
	  to put it back, I thought that may be we could rely on the expokit
	  package subroutines, which are, I hope, better and more sophisticated
	  than my own poor man's lines. I removed the code in math_inc that did
	  the exponential of dense matrices, also.
	  The code is now a bit ugly, but I will polish it as I find out how.
	  
	  The license of expokit does not seem to cause any problem, but I wrote
	  the author, to be polite.

2005-03-14  acastro

	* [r1029] trunk/src/static_pol_lr.F90:
	  Bug fixed.
	  The code did not compile in complex mode.

2005-03-14  marques

	* [r1028] trunk/src/mesh_create.F90:
	  The bug that was annoying Micael is gone. A 2 that should be a 3 ;)

2005-03-08  acastro

	* [r1027] trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/geometry.F90:
	  The nonlocal projectors that are null (that is, the ones within the TM
	  whose l number is the one chosen as local) are no longer considered. Before
	  they were built and applied everytime, which was a waste of time.
	  The waste of time was not relevant if these projectors are well localized.
	  But if one filters them, they are no longer so well localized, and then it
	  is may be significant.
	* [r1026] trunk/share/samples/Na2:
	  The sample Na2 file was thought for the 1.4 version.
	* [r1025] trunk/share/variables:
	  Just added some more mnemonics to the variables file.

2005-03-04  marques

	* [r1024] trunk/src/global.F90, trunk/src/mesh.F90, trunk/src/mix.F90,
	  trunk/src/restart_inc.F90, trunk/src/scf.F90, trunk/src/td_rti.F90, trunk/src/unocc.F90,
	  trunk/src/xc.F90:
	  Calculation of unoccupied states was not working.
	  Also added some of the typos and suggestions of Del Marshall.

2005-03-03  acastro

	* [r1023] trunk/src/mesh.F90, trunk/src/specie.F90:
	  * In mesh_write_info, a small bug was corrupting the output.
	  * In specie.F90, I removed the debugging calls from a couple of functions
	  that are called for every mesh point, which is very inconvenient.
	* [r1022] trunk/src/math_inc.F90:
	  Bug fixed.
	  Since a lot of time (I think july 2004) this extrapolation routine was
	  wrong, which caused almost all of the propagators to go wrong.

2005-03-01  acastro

	* [r1021] trunk/src/xc_OEP_SIC.F90:
	  Bug fixed.

2005-02-28  acastro

	* [r1020] trunk/src/h_xc_OEP.F90, trunk/src/xc.F90, trunk/src/xc_KLI.F90,
	  trunk/src/xc_OEP_SIC.F90, trunk/src/xc_OEP_x.F90:
	  Bugs fixed.
	  [*] The pointer lxc in data type oep is now only real. It should be
	  defined as either real or complex, depending on wether we have real or
	  complex wavefunctions, i.e.: oep%X(lxc), as usual. This little thing
	  is the reason why the time propagation of OEP-functionals was not stable.
	  (It has taken me months to figure this out...)
	  [*] The arguments in xc_oep_analyzeeigen and xc_oep_spinfactor had
	  a small bug (the intent(out) should be intent(inout)). This was a problem
	  for some compilers only.
	* [r1019] trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/h_xc_OEP.F90, trunk/src/mesh.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/td.F90, trunk/src/xc.F90,
	  trunk/src/xc_KLI.F90, trunk/src/xc_OEP_SIC.F90, trunk/src/xc_pot.F90:
	  Parallelization of the OEP functionals up to the KLI level (full
	  OEP not yet). The code is now rather ugly, but I will try to clean
	  it up. The parallelization just follows the model that we have not
	  (on states), which means that it is only done in the td part. In fact,
	  it is possible to put this part also in parallel for the
	  ground state part.

2005-02-25  acastro

	* [r1018] trunk/share/variables, trunk/src/Makefile.am, trunk/src/cf.F90,
	  trunk/src/eigen.F90, trunk/src/oct_test.F90, trunk/src/poisson.F90,
	  trunk/src/poisson3D.F90, trunk/src/poisson_cg.F90, trunk/src/poisson_corrections.F90:
	  I thought that the FFT methods were enough mess, so I added yet
	  another method ;)
	  
	  In fact it is nothing else that applying the corrections idea that I put
	  for the CG scheme to the FFT methodology. I believe that now this method
	  is the fastest: it does not require any kind of double box. The overall
	  speed depends on the parameter PoissonSolverCGMaxMultipole, which specifies
	  the order of the corrections. It defaults to two.
	  It only works for finite systems. It works setting PoissonSolver = fft_corrected
	  in the input file. Of course, take it as experimental for the moment...
	  
	  [The reason for doing this is that I am just trying to speed up the calculation
	  of the KLI-SIC staff -- next step is the parallelization of this
	  procedure]

2005-02-24  acastro

	* [r1017] trunk/doc/octopus-devel.info, trunk/doc/octopus-devel.texi, trunk/src/td_init.F90:
	  Temporarily disabled the Verlet algorithm, since it does not start or
	  restart properly. The velocity algorithm works fine. Eventually we should
	  put the Verlet algorithm back. Now it emits a warning, and switches
	  to velocity Verlet.

2005-02-23  acastro

	* [r1016] trunk/src/xc_pot.F90:
	  Bug fixed.
	  The SIC-OEP-KLI did not work with unpolarized systems because of this line.
	* [r1015] trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/xc.F90, trunk/src/xc_OEP_SIC.F90,
	  trunk/src/xc_functl.F90, trunk/src/xc_pot.F90:
	  Some code simplifications.

2005-02-22  acastro

	* [r1014] trunk/libxc/lda_funcs.c, trunk/src/xc_functl.F90:
	  Bug fixed.
	  A small bug in the definition of the Slater Xalpha potential.
	  (Before it just added again the excahnge fucntional)
	  
	  Also, I have changed the definition of the alpha constant, to meet the
	  usual definition in the literature:
	  
	  E_{xc}^{Xalpha} = (3/2)*alpha*E_x^{LDA}
	  
	  which means that the Xalpha correlation potential should be defined as:
	  
	  E_{c}^{Xalpha} = ( (3/2)*alpha - 1)*E_x^{LDA}
	  
	  I have set the default to alpha = 1. In any case, the logical thing would
	  be to define this functional as a exchange functional, rather than as a
	  correlation part to be added to the exchange. But it is not worthed to
	  loose too much time with this functional anyway...
	* [r1013] trunk/doc/octopus-devel.info, trunk/doc/octopus-devel.texi,
	  trunk/doc/octopus.texi, trunk/doc/version.texi:
	  When two texi files use the version.texi file, one should give them
	  different names, it seems. So I called them vers-octopus-devel.texi
	  and vers-octopus.texi. In any case, one does not need them to include
	  them in the cvs tree since they are generated automatically by the
	  mdate-sh script.

2005-02-18  marques

	* [r1012] trunk/configure.ac, trunk/src/Makefile.am, trunk/src/global.F90:
	  flush is now performed for the systems that allow it. To get it working with the ifc
	  compiler, I just added in the ./configure FCEXTRALIBS="-lPEPCF90".

2005-02-17  acastro

	* [r1011] trunk/doc/octopus.info, trunk/doc/octopus.texi, trunk/doc/pdf/octopus.pdf,
	  trunk/share/variables:
	  * I have put the manual of octopus-1.4 into the head version. It is more
	  updated.
	  * Added the XC variables to variables file. Updated in the manual the section
	  dedicated to the XC -- it was only valid for the 1.4 version.

2005-02-15  marques

	* [r1010] trunk/share/util/mf.cfg, trunk/share/util/mf.net:
	  Added some nice things. Please take a look, and see if it works...

2005-02-15  acastro

	* [r1009] trunk/src/xc.F90, trunk/src/xc_functl.F90, trunk/src/xc_pot.F90:
	  The variable ispin is not necessary in xc_functl module; it only needs
	  to know about spin_channels.

2005-02-15  micael

	* [r1008] trunk/src/atoms_magnet.F90, trunk/src/eigen.F90, trunk/src/eigen_cg2.F90,
	  trunk/src/eigen_cg3.F90, trunk/src/epot_inc.F90, trunk/src/excitations.F90,
	  trunk/src/geom_opt.F90, trunk/src/gs.F90, trunk/src/h_inc.F90, trunk/src/h_xc_OEP.F90,
	  trunk/src/lcao.F90, trunk/src/linear_response.F90, trunk/src/make_st.F90,
	  trunk/src/opt_control.F90, trunk/src/pes_mask.F90, trunk/src/pes_rc.F90,
	  trunk/src/phonons.F90, trunk/src/scf.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/static_pol.F90, trunk/src/static_pol_lr.F90, trunk/src/td.F90,
	  trunk/src/td_calc.F90, trunk/src/td_rti.F90, trunk/src/td_write.F90, trunk/src/unocc.F90:
	  *) Removed the duplicated data in the states type.

2005-02-15  acastro

	* [r1007] trunk/doc/Makefile.am, trunk/doc/mdate-sh, trunk/doc/octopus-devel.info,
	  trunk/doc/octopus-devel.texi, trunk/doc/pdf/Makefile.am, trunk/doc/pdf/octopus-devel.pdf,
	  trunk/doc/version.texi, trunk/libxc/xc_f.c, trunk/src/atomic.F90, trunk/src/h.F90,
	  trunk/src/h_inc.F90, trunk/src/h_xc_OEP.F90, trunk/src/libxc.F90, trunk/src/xc_functl.F90:
	  I have put the embryo of what could be the octopus developer's guide.
	  It just contains the description of one module, which is lib_xc, the
	  interface to Miguel's C library that contains the LDA, GGA and mGGA
	  functionals. And in fact it is not even complete.
	  
	  In the way, I have decided to simplify a little bit the interface
	  to the library, so that it is a little bit more user friendly.

2005-02-14  acastro

	* [r1006] trunk/doc/Makefile.am, trunk/doc/cosine.eps, trunk/doc/gaussian.eps,
	  trunk/doc/img/cosine.eps, trunk/doc/img/gaussian.eps, trunk/doc/img/octosex.eps,
	  trunk/doc/img/octosex.jpg, trunk/doc/img/ramp.eps, trunk/doc/octopus.texi,
	  trunk/doc/octosex.eps, trunk/doc/octosex.jpg, trunk/doc/ramp.eps:
	  Moved the in the doc directory to the doc/img directory, where they
	  belong.

2005-02-14  micael

	* [r1005] trunk/src/Makefile.am, trunk/src/atoms_magnet.F90:
	  *) The oct-atoms-magnet utility now works for spin-polarized calculations
	  and is compiled for both real and complex wavefunctions. This means it
	  is also compile with MPI. If someone kows how to fix this, feel free to
	  do it.

2005-02-14  acastro

	* [r1004] trunk/configure.ac, trunk/doc/Makefile.am, trunk/doc/octopus.info,
	  trunk/doc/octopus.pdf, trunk/doc/pdf, trunk/doc/pdf/Makefile.am,
	  trunk/doc/pdf/octopus.pdf, trunk/doc/pdf/tutorial.pdf, trunk/doc/tutorial.pdf:
	  Some maintainace operations in the doc directory....
	* [r1003] trunk/doc/octosex.eps:
	  Used a better converter program (img2eps) to transform the jpg octosex.jpg
	  to octosex.eps. This way it is one fourth of the size, with the same quality.
	  I am also doing serious work, in case you are wondering ;)

2005-02-14  micael

	* [r1002] trunk/doc/octopus.info, trunk/doc/octopus.pdf, trunk/doc/octopus.texi,
	  trunk/share/variables, trunk/src/systm.F90:
	  *) The way the guess magnetization density was set not was very clear. I think now
	  it is better. Also updated the manual.

2005-02-11  micael

	* [r1001] trunk/src/h.F90:
	  *) Bug fixed: some use statements where missing.

2005-02-09  acastro

	* [r1000] trunk/src/cf.F90, trunk/src/derivatives.F90, trunk/src/eigen.F90,
	  trunk/src/epot.F90, trunk/src/f.F90, trunk/src/geometry.F90, trunk/src/gs.F90,
	  trunk/src/lcao.F90, trunk/src/math.F90, trunk/src/mf.F90, trunk/src/opt_control.F90,
	  trunk/src/out.F90, trunk/src/out_inc.F90, trunk/src/poisson_cg.F90, trunk/src/pulpo.F90,
	  trunk/src/run.F90, trunk/src/scf.F90, trunk/src/specie.F90, trunk/src/states.F90,
	  trunk/src/static_pol.F90, trunk/src/static_pol_lr.F90, trunk/src/systm.F90,
	  trunk/src/td.F90, trunk/src/td_exp_split.F90, trunk/src/unocc.F90, trunk/src/xyz_file.F90:
	  "Privatization" of most of the modules, in a (futile) attempt to make
	  octopus compile in San Sebastian cluster. Since I think that it is a good
	  practice, I commit it anyway. So do not worry about the large amount
	  of files, it is only use and private or public statementes.
	  
	  Incidentally, I also patched output module so that it would compile
	  when using the 2.96 gcc preprocessor, which is still running in
	  not properly maintained machines (before it did not work when the
	  netcdf stuff was not included)

2005-02-08  micael

	* [r999] trunk/src/lcao.F90:
	  *) Pathscale compiler did not like the array bounds defined like this...

2005-02-04  acastro

	* [r998] trunk/src/geom_opt.F90, trunk/src/gs.F90, trunk/src/h.F90, trunk/src/out.F90,
	  trunk/src/out_inc.F90, trunk/src/phonons.F90, trunk/src/restart.F90, trunk/src/scf.F90,
	  trunk/src/static_pol.F90, trunk/src/static_pol_lr.F90, trunk/src/td.F90:
	  One preprocessor definition in file out_inc.F90 usually translated
	  to very long lines, usually beyond the limit accepted by the Fortran 90/95
	  standard. Some compilers do not accept this, and so I have removed it.
	  This means that now there are quite a few more lines of the code.
	  [Eventually, the subroutines in out_inc could probably be simplified]
	  
	  In the way, I have "privatized" more modules (that is why so many
	  files are changed, but it is just "use" statements)

2005-02-03  acastro

	* [r997] trunk/doc/Makefile.am:
	  Bug fixed.
	  The compilation attempted to regenerate the pdf, by making
	  texi2dvi -pdf octopus.dvi
	  and it failed (texi2dvi -pdf cannot handle figures properly).
	  The pdf should be fixed in the distribution, not made at compile time.

2005-02-02  appel

	* [r996] trunk/liboct, trunk/liboct/.cvsignore, trunk/libxc, trunk/libxc/.cvsignore:
	  now we are complete.
	* [r995] trunk, trunk/.cvsignore, trunk/build, trunk/build/.cvsignore,
	  trunk/debian/changelog, trunk/debian/control, trunk/src, trunk/src/.cvsignore:
	  adding cvsignore files to get a proper update list

2005-02-01  micael

	* [r994] trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/geom_opt.F90,
	  trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/lasers.F90, trunk/src/phonons.F90,
	  trunk/src/run.F90, trunk/src/static_pol.F90, trunk/src/td.F90, trunk/src/td_calc.F90,
	  trunk/src/td_exp_split.F90, trunk/src/td_rti.F90, trunk/src/td_write.F90:
	  *) Some cleaning and reorganization of the external fields.
	  *) Added the interaction between the external static magnetic field and the spin.

2005-02-01  marques

	* [r993] trunk/liboct_parser/gsl_userdef.c, trunk/src/h.F90:
	  heaviside function is now properly defined
	  xc is also defined for 1D

2005-02-01  appel

	* [r992] trunk/debian/README.Debian, trunk/debian/changelog, trunk/debian/control,
	  trunk/debian/copyright, trunk/debian/dirs, trunk/debian/rules:
	  update debian directory. package building is now possible for
	  i386 and amd64.
	* [r991] trunk/liboct_parser/Makefile.am, trunk/liboct_parser/gsl_userdef.c,
	  trunk/liboct_parser/gsl_userdef.h, trunk/liboct_parser/symbols.c:
	  add heavyside step function (useful for Kronig-Penney potentials).
	  user defined species can now contain something like "-step(-r+1)" in
	  the inputfile.
	* [r990] trunk/src/Makefile.am:
	  - add support for exuberant ctags (http://ctags.sourceforge.net).
	  - actually pass user defined CPPFLAGS to the preprocessor.
	* [r989] trunk/src/states_kpoints.F90:
	  - correct parser calls.
	  - add push_sub()/pop_sub() calls.
	* [r988] trunk/src/mesh_create.F90:
	  fix parser calls for box shape PARALLELEPIPED (code wasn't running with
	  this shape anymore).
	  add possibility to shift the simulation box away from the origin. the
	  shifts are read from the block BoxOffset.
	* [r987] trunk/src/mesh.F90:
	  add box_offset(3) to mesh_type. the array contains shifts
	  of the origin in the respective direction.
	* [r986] trunk/src/h.F90:
	  LDA in 1D is not implemented. stop the code if the user
	  tries to run with NonInteractingElectrons = yes.
	* [r985] trunk/src/global.F90:
	  make debug stack more readable.
	* [r984] trunk/src/epot.F90, trunk/src/specie.F90:
	  add push_sub()/pop_sub() calls.

2005-01-31  marques

	* [r983] trunk/src/excitations.F90:
	  Mismatch in filename (the same as the bug found by Del Marshall in 1.4)

2005-01-28  marques

	* [r982] trunk/share/util/mf.cfg, trunk/share/util/mf.net:
	  Small bug fixed.

2005-01-27  marques

	* [r981] trunk/Makefile.am, trunk/src/static_pol_lr.F90:
	  RPMs are now generated in my home directory, and not in /usr/src/redhat
	* [r980] trunk/build/octopus.spec.in:
	  The right way to make rpms in the main branch too.
	* [r979] trunk/share/util/mf.cfg, trunk/share/util/mf.net:
	  Added some neat stuff to be used with periodic systems. Basically you can
	  replicate the unit cell, and "cycle".
	  Note: you *have* to upgrade to the new version of the chemistry package in
	  order to use this program.

2005-01-26  acastro

	* [r978] trunk/doc/Makefile.am, trunk/doc/tutorial.pdf:
	  By popular demand, I setup to start writing a tutorial. I have placed it
	  in the doc directory (tutorial.pdf). It is installed, along with
	  octopus.pdf, in SHARE/octopus/doc. Some comments:
	  (*) As it is obvious if you look at it, I just committed what I have up to
	  now (8 pages), there is still some way to go.
	  (*) I have just realized that there was already a tutorial.tex. I will
	  merge both materials, since there was interesting stuff there (notably
	  the Helium atom model).
	  (*) The tutorial is based in the 1.4 version. After completing it, I will
	  update it for the new version -- or for the current state of the new
	  version. One reason for this is that the first people that will use it
	  are using the 1.4 version.

2005-01-24  acastro

	* [r977] trunk/doc/Makefile.am, trunk/doc/octopus.dvi, trunk/doc/octopus.info-1,
	  trunk/doc/octopus.info-2, trunk/doc/octopus.info-3, trunk/doc/octopus.pdf:
	  [*] Removed doc/octopus-info-1/2/3 which were old and doing nothing there.
	  [*] Removed octopus.dvi in favour of octopus.pdf, which is a better format.
	  [*] Changed the doc/Makefile.am so that on installation, a directory
	  called SHARE/octopus/doc is created with the documentation -- now just
	  octopus.pdf is copied there. The idea is that after the "make install"
	  process, every useful stuff should be installed and one can just delete
	  the sources.
	* [r976] trunk/src/curv_briggs.F90, trunk/src/curv_gygi.F90, trunk/src/curv_modine.F90,
	  trunk/src/derivatives.F90, trunk/src/eigen.F90, trunk/src/epot.F90, trunk/src/f.F90,
	  trunk/src/fxc.F90, trunk/src/geometry.F90, trunk/src/global.F90, trunk/src/h.F90,
	  trunk/src/h_inc.F90, trunk/src/lasers.F90, trunk/src/lcao.F90, trunk/src/libxc.F90,
	  trunk/src/linear.F90, trunk/src/linear_response.F90, trunk/src/main.F90,
	  trunk/src/mesh.F90, trunk/src/mf.F90, trunk/src/nl_operator.F90, trunk/src/poisson.F90,
	  trunk/src/poisson_cg.F90, trunk/src/run.F90, trunk/src/scf.F90, trunk/src/states.F90,
	  trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_exp_split.F90, trunk/src/td_rti.F90,
	  trunk/src/units.F90, trunk/src/xc.F90, trunk/src/xc_functl.F90, trunk/src/xyz_adjust.F90,
	  trunk/src/xyz_file.F90:
	  Don't get scared, the changes are small, although they affect a lot
	  of files.
	  
	  [*] Whenever a module is not declared public, all the modules that it
	  uses are passed to the caller. I think that this should not happen, and
	  that a good programming practice should be declaring all modules as
	  private, and then explicitly declaring what types, variables and
	  procedures are public. In that way, a caller to a module has access to
	  those explicitly public things, and not to the modules that the module
	  itself uses. I have done so with a few modules, and as a consequence
	  I have had to include quite a few use statements in other modules.
	  I believe that in this way the compilers will not get confused so often,
	  and hopefully the "Internal compiler error" message should not appear
	  that often.
	  A first consequence is that the size of the octopus executable in my
	  laptop is reduced from 3500mb to 2800mb.
	  [I have not gone all the way with this idea; lots of modules are still
	  public by default.]
	  
	  [*] Some aesthetic changes in the way the some messages are cast.

2005-01-22  acastro

	* [r975] trunk/src/derivatives.F90, trunk/src/derivatives_inc.F90,
	  trunk/src/nl_operator.F90, trunk/src/poisson.F90, trunk/src/poisson3D.F90,
	  trunk/src/poisson_cg.F90:
	  The CG_CORRECTED (PoissonSolver = 5) method is now able to work with
	  curvilinear coordinates. The code will stop and complain if any other
	  Poisson solver is to be used with curvilinear coordinates.
	  
	  However, it does not work with Gygy scheme, only
	  with Modine's and Brigg's. I do not know why, but I thought it was about
	  time to commit. In any case, I think there is a bug in the Gygy's
	  implementation (the grid generated for one single atom in the center
	  looks weird, with higher density of points in the border of the mesh).

2005-01-21  acastro

	* [r974] trunk/src/oct_test.F90:
	  Emptied the oct-test program.

2005-01-20  acastro

	* [r973] trunk/src/poisson.F90, trunk/src/poisson3D.F90, trunk/src/poisson_cg.F90:
	  Major modifications in the new (and incidentally, also in the old one)
	  CG Poisson solver to make it *much* faster. The cost is the use of more
	  memory, and some overhead in the initialization part. However, I think
	  it is necessary if we want to run octopus with CG at realistic speed.
	  Moreover, now two more variables may be set:
	  PoissonSolverCGMaxMultipole (default = 4), which is the maximum order
	  of the multipole correction for the new method, and of the multipoles
	  to consider to build the multipole expansion for the old method;
	  PoissonSolverCGThreshold (default = 1.0e-5), which is the criterion to
	  stop the CG procedure.
	  Until we are not done modifying the Poisson solver, I will not update
	  the manual.
	* [r972] trunk/src/poisson_cg.F90:
	  Both CG Poisson solvers now make use of the conjugate_gradients
	  procedure in math module, instead of making their own. Note that the
	  change of base to allow for curvilinear coordinates is not yet
	  activated (it is trivial, though). If I find that our traditional
	  CG solver is slower than the new one, I will just remove it. I have
	  to make some benchmarks, though.
	  
	  Eventually, the CG thing should be done with preconditioning, which
	  in a real space scheme basicly means multigrid, I think.
	* [r971] trunk/src/Makefile.am, trunk/src/math.F90, trunk/src/math_cg_inc.F90:
	  Added a procecudre to the math module (in file math_cg_inc.F90) that
	  solves a general Ax=b problem through the conjugate gradients. In fact,
	  two procedures with a common interface, either for symmetric or
	  non-symmetric A. The form of A is passed through an interface.
	  
	  Essentially, it is the Numerical Recipe without the possibility of using
	  a preconditioner. This could be easily added.

2005-01-14  marques

	* [r970] trunk/src/linear_response.F90, trunk/src/static_pol.F90,
	  trunk/src/static_pol_lr.F90:
	  For what I can see, the linear response static polarizability now works.
	  I tested it with Na2 only, however ;)

2005-01-12  micael

	* [r969] trunk/liboct/config.h.in, trunk/src/td.F90:
	  *) Bug fixed: when restarting a td calculation, wrong iteration number and
	  time were writen to the output files like the multipoles file.
	  
	  This should also be fixed in the 1.4 version.

2005-01-10  marques

	* [r968] trunk/src/geometry.F90, trunk/src/mesh_create.F90, trunk/src/systm.F90:
	  Bug reported by Qin Rao (RandomVelocityTemp not working) fixed.
	* [r967] trunk/src/geometry.F90, trunk/src/mesh_create.F90, trunk/src/specie.F90:
	  small bug fized: the default spacing was not correct, as there was a j that
	  should be an i. I took the opportunity to clean a little bit the routine
	  read_from_default_file
	* [r966] trunk/share/samples/bench-gs:
	  *** empty log message ***

2004-12-17  acastro

	* [r965] trunk/src/nl_operator.F90:
	  I added a subroutine call nl_operator_transpose that gives back
	  the transpose of a non-local operator (the ones that define the
	  differential operators). Obviously it is completely useless for rectangular
	  regular grids, where these operators are symmetric.
	  [It is needed for the generalized conjugate gradients routine that solves
	  linear systems with non-symmetric matrices, which I do not commit
	  because it is not working yet]

2004-12-15  marques

	* [r964] trunk/libxc/mgga_c_tpss.c, trunk/libxc/mgga_x_tpss.c, trunk/src/xc_pot.F90:
	  A couple of bugs solved, but I still get non-sense. This functiona is too
	  sensitive to numerical erors in the calculation of derivatives, I think...

2004-12-09  micael

	* [r963] trunk/src/td.F90:
	  *) Another bug in the TD restart. The density and the xc-potential were not computed
	  after reading the wavefunctions. This means the first line of the multipoles file
	  was wrong as well as the propagation from iteration 0 to 1 (and probably some other
	  things).
	* [r962] trunk/src/liboct.F90:
	  *) Bug fixed. Nothing special...

2004-12-08  acastro

	* [r961] trunk/src/poisson_cg.F90:
	  Just code cleaning.
	* [r960] trunk/liboct/oct_gsl_f.c, trunk/share/variables, trunk/src/liboct.F90,
	  trunk/src/oct_test.F90, trunk/src/out.F90, trunk/src/poisson.F90, trunk/src/poisson3D.F90,
	  trunk/src/poisson_cg.F90, trunk/tests/test2.sh:
	  [1] Bug fixed.
	  For some reason, in the CG method to solve Poisson's equation, the
	  mult variable was allocated to 2*l+1 instead of (l+1)**2, as it should.
	  Amazingly, it did not seg-fault, and was not causing big problems, at
	  least with the Intel compiler.
	  [2] Added another CG method to solve Poisson's equation, cg_corrected (probably
	  I will change the name eventually, or even remove the previous method
	  completely if I see that it is not worthed). It does not require the
	  compuation of ghost points, but substracts an auxiliary charge that matches
	  exactly the multipoles of the problem density (Eq. 6 of our Can J. Phys 81,
	  15 (2003)).
	  
	  I have to work on the performance on the method, but for the moment I will
	  move on to the problem of using improving the conjugate gradient method
	  for non-Hermitian Laplacians...
	* [r959] trunk/liboct/ylm.c:
	  Bug fixed.
	  This bug was already warned by Eugene. I made some week ago some tests,
	  and I did not find it (it is a factor sqrt(2) that is only missing
	  for l>2, m.ne.0). Now I think that it is correct.
	  I am still not sure wether we should put a (-1)^m "Condon-Shortley" factor,
	  or it is already included. In any case, I think that it is an irrelevant
	  phase.

2004-12-07  marques

	* [r958] trunk/src/Makefile.am, trunk/src/h_inc.F90, trunk/src/h_xc_OEP.F90,
	  trunk/src/libxc.F90, trunk/src/xc.F90, trunk/src/xc_OEP_SIC.F90, trunk/src/xc_functl.F90,
	  trunk/src/xc_pot.F90:
	  meta-GGA "runs" but giove non-sense!
	* [r957] trunk/libxc/mgga.c, trunk/libxc/mgga_c_tpss.c, trunk/libxc/xc_f.c:
	  MGGA "runs" but gives non-sense!
	* [r956] trunk/libxc/gga_pbe.c, trunk/libxc/mgga.c, trunk/libxc/mgga_c_tpss.c,
	  trunk/libxc/test.c, trunk/libxc/util.h:
	  Bug fixed in correlation PBE (yes, there was a serious bug there)
	  TPSS correlation is apparently working for spin-unpolarized systems. I still
	  did not check the spin-polarized functionals (neither x nor c).

2004-12-06  acastro

	* [r955] trunk/src/linalg_adv_lapack.F90:
	  Bug fixed.
	  Description: apparantely, subroutines ddet and zdet did not give the proper
	  sign.
	* [r954] trunk/Makefile.am, trunk/configure.ac, trunk/src/Makefile.am,
	  trunk/src/oct_test.F90, trunk/tests, trunk/tests/Makefile.am, trunk/tests/test1.sh,
	  trunk/tests/test2.sh:
	  Added the first step towards building a test suite for octopus.
	  Currently, typing "make check" will launch a couple of empty
	  steps that will always succeed. This gives the executer a reassuring
	  feeling of comfort but it is completely useless. Eventually we should
	  fill the scripts in the tests directory. Probably we will also need
	  some perl scripts to analyze results.
	  Moreover, make check will build an empty program "oct-test" that it is
	  in turned launched by test2.sh. This I have done because for developing
	  it is nice to have an auxiliary program for testing purposes.

2004-12-04  acastro

	* [r953] trunk/share/samples/Na2, trunk/src/libxc.F90, trunk/src/xc_functl.F90:
	  Bug fixed.
	  One should pass a POINTER_SIZE to xc_info_refs, I think, so that
	  it also works in 64 bits machines.
	  The expert in C should check this, however.
	* [r952] trunk/src/epot.F90, trunk/src/fftw2.F90:
	  Bugs fixed
	  [*] The fftw2 interace had a bug (from time to time it is worth to try
	  to compile with FFTW2 to keep compatibility)
	  [*] A compiler bug in the Intel compiler:
	  Intel(R) Fortran Itanium(R) Compiler for Itanium(R)-based applications
	  Version 7.1, Build 20030814
	  did not permit compiling an apparently harmless line in epot.F90. A stupid
	  change makes it work, Gods know why.

2004-12-03  micael

	* [r951] trunk/src/td.F90:
	  *) TD calculation restart was not working.
	* [r950] trunk/src/td_write.F90:
	  *) I do not know why, but this change solved a segfault.
	* [r949] trunk/src/restart_inc.F90:
	  *) Another bug fixed.

2004-12-02  micael

	* [r948] trunk/src/gs.F90:
	  *) Bug fixed: a routine call was missing the X() preprocessor directive.

2004-12-01  micael

	* [r947] trunk/src/h_inc.F90:
	  *) Bug fixed: code was not compiling with complex wavefunctions.

2004-12-01  marques

	* [r946] trunk/libxc/gga_lb.c, trunk/libxc/gga_pbe.c, trunk/libxc/lda_c_amgb.c,
	  trunk/libxc/lda_c_pw.c, trunk/libxc/lda_c_pz.c, trunk/libxc/lda_c_vwn.c,
	  trunk/libxc/lda_funcs.c, trunk/libxc/lda_x.c, trunk/libxc/mgga.c,
	  trunk/libxc/mgga_c_tpss.c, trunk/libxc/mgga_x_tpss.c, trunk/libxc/test.c,
	  trunk/libxc/util.h, trunk/libxc/xc.h, trunk/libxc/xc_f.c:
	  code now compiles and runs with -ansi flag. Hope this solves your problems, Alberto.

2004-11-30  micael

	* [r945] trunk/src/td.F90, trunk/src/td_init.F90:
	  *) The states should be distributed among the nodes before allocating and reading
	  the wavefunctions.
	* [r944] trunk/src/states_inc.F90:
	  *) Somehow I did not commit this change during the last bug fix to this file.
	* [r943] trunk/src/restart_inc.F90:
	  *) Bug fixed. Reading of the occupations and eigenvalues was not done when
	  using MPI.

2004-11-29  micael

	* [r942] trunk/src/eigen_plan.F90:
	  *) Just some cleaning of the lanczos routine.
	* [r941] trunk/src/eigen.F90:
	  *) This change seems to make the filter of the lanczos eigensolver work. At
	  least it looks to be consistent with the previous version of the code
	  (before the implementation of the curvilinear coordinates).

2004-11-23  micael

	* [r940] trunk/src/eigen.F90, trunk/src/eigen_plan.F90:
	  *) Fixed the lanczos solver. Everything seems to be working, but I am not sure
	  I fixed the filter properly. Could someone who really understands the way the filter
	  works look at it, please?
	  The solver should also work with curvilinear coordinates now.
	* [r939] trunk/src/linalg_adv_lapack.F90:
	  *) Arguments of routines calling LAPACK where defined like this a(:,:)
	  to avoid arrays to be copied into memory. Unfortunately, since these routines
	  call the LAPACK passing the first element of the array those copies may be
	  necessary, like when passing parts of arrays to the routines defined in this module.

2004-11-23  marques

	* [r938] trunk/libxc/Makefile.am, trunk/libxc/mgga.c, trunk/libxc/mgga_c_tpss.c,
	  trunk/libxc/mgga_x_tpss.c, trunk/libxc/test.c, trunk/libxc/util.h, trunk/libxc/xc.h:
	  I am implementing the TPSS meta-GGA. The exchange part is probably working,
	  the correlation is still a first draft.

2004-11-23  micael

	* [r937] trunk/src/states_inc.F90:
	  *) Bug fixed in the calculation of the magnetization using MPI.

2004-11-19  marques

	* [r936] trunk/src/libxc.F90, trunk/src/xc_OEP_x.F90:
	  Exact exchange cleaned. The double sum over states is now done one for j>=i
	  and not for all i,j. This should leed to a factor of two speed up for large
	  systems.
	* [r935] trunk/src/xc_functl.F90:
	  Forgot this file...
	* [r934] trunk/src/Makefile.am, trunk/src/h.F90, trunk/src/h_inc.F90,
	  trunk/src/h_xc_OEP.F90, trunk/src/libxc.F90, trunk/src/xc.F90, trunk/src/xc_KLI.F90,
	  trunk/src/xc_OEP_SIC.F90, trunk/src/xc_OEP_x.F90, trunk/src/xc_pot.F90:
	  Apparently, SIC-KLI is working again (some years after the last time it worked).
	  I had to change a great deal in the xc part, and there were a couple of bugs...

2004-11-18  micael

	* [r933] trunk/src/liboct.F90:
	  *) Small bug fix.

2004-11-11  marques

	* [r932] trunk/configure.ac, trunk/src/ps.F90:
	  Small bug in ps.F90, and changes to configure.ac to make it compile under FC3

2004-11-10  acastro

	* [r931] trunk/share/PP/defaults:
	  For some reason that I have not discovered yet, the filtering only
	  eliminates the eggbox effect if lloc=0. So I have changed the defaults
	  so that all elements have that default. I will try to find out why...
	* [r930] trunk/src/hgh.F90, trunk/src/ps.F90, trunk/src/specie.F90, trunk/src/tm.F90:
	  Added a subroutine that recalculates the radius of the non-local projector
	  sphere. This needs to be done after filtering, because cutting frequencies
	  in Fourier space implies extending the function in real space. Once that
	  this error is corrected, the filtering seems to be working fine (the eggbox
	  effect of, for example, the formaldimine molecule, is almost eliminated).
	  Now I have to see how this influences the conservation of energy in an
	  evolution....
	* [r929] trunk/src/geometry.F90, trunk/src/ps.F90, trunk/src/specie.F90,
	  trunk/src/systm.F90:
	  Reshuffled a bit the way the debugging information is organized. I still
	  have to get rid of the "pseudos" directory (all information should go
	  to "debug"). Now there is a debug/geometry, and a debug/geometry/X, for
	  each specie X. Eventually, we can put a debug/mesh, etc.

2004-11-08  acastro

	* [r928] trunk/share/PP/defaults, trunk/src/geometry.F90, trunk/src/ps.F90,
	  trunk/src/specie.F90:
	  Added some defaults for the filtering parameters in default file.
	  Added the corresponding variables in specie data type, and
	  modified ps_filter and specie_filter in order to use them.
	  Still some cleaning and testing needs to be done, but essentially
	  everything is done. Now we just have to put proper values in default
	  value (now every element has the same values, those that are good
	  for Carbon).
	* [r927] trunk/src/geometry.F90, trunk/src/main.F90, trunk/src/specie.F90:
	  [1]. Changed the way in which the information about the species is read.
	  In the way that it is done now, part of the information may be read
	  from the Species block, and whatever is missing is read from the
	  default file. That is, one can write:
	  %Species
	  "Na" | 23.0 | tm2
	  %
	  and the lmax and lloc are read from the default file. I have done this
	  so that the parameters that define the filtering are placed in the default
	  file, and the user does not have to worry about such gory details. But
	  in case of necessity, these can be also placed in the input files.
	  
	  [2]. When in debugging mode, a directory called "debug" is created. There
	  some of the variables should be damped for debugging purposes. I will
	  move the "pseudos" directory in following commits. Now part of the contents
	  of each specie variable is written there.

2004-11-05  acastro

	* [r926] trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/ps.F90, trunk/src/specie.F90:
	  1. Now the input variables LocalPotentialSpace and NonlocalPotentialSpace
	  are no longer used. If the problem is a finite system, the real space is
	  always used. The eggbox effect may be eliminated with the filtering. If
	  the problem is periodic, the filtering is also done, but then one has to
	  use Fourier space nevertheless.
	  
	  2. The routine get_fourier_local_tm is now gone, in favour of the
	  call to the spline library.
	  
	  3. vlocal no longer exists, in favor of vl, which now holds the local part
	  of the pseudopotential, vl(r), and not r*vl(r)+z. The localized part of
	  the local part is now in ps%vlocalized, and is vl(r) + ps%z_val*erf(ps%a_erf*r).
	  Its Fourier transform is held in ps%vlocal_f.

2004-11-04  acastro

	* [r925] trunk/src/systm.F90:
	  Stupid bug fixed.
	  Thanks, Miguel.
	* [r924] trunk/src/ps.F90, trunk/src/specie.F90:
	  Now the derivatives of the pseudopotential functions are done outside
	  ps_init, so that they can be redone after filtering. Also, they are done
	  now thought the spline library, and not throught the function
	  "derivate_in_log_grid" of logrid module. It seems that it is actually
	  even a bit better.
	* [r923] trunk/src/ps.F90:
	  Bug fixed.
	  Description: The l=0 nonlocal TM pseudopotential functions had some
	  error for small values of r which was very large in the case of the
	  derivative (although negligible in the function itself). As a result,
	  if a nucleus traversed the vicinity of a mesh point, the force due
	  to that component had probably a big error.
	  In fact, the error was a bad sampling of the atomic pseudowavefunctions,
	  used to build the KB projectors themselves.
	  Now I think that it is OK, and cleaner (except for an add-hoc
	  "extrap" function which should be generalized and moved to the math
	  module sometime).
	  I am still not very confident with the forces nearby the mesh points,
	  I have observed some weird things.

2004-11-03  acastro

	* [r922] trunk/liboct/oct_gsl_f.c:
	  Forgot to commit this file.
	* [r921] trunk/src/spline.F90:
	  Added a function to calculate derivatives of functions in the spline
	  "representation." This is for the forces. However, these derivatives do
	  not coincide with the ones calculated directly on the logarithmic grid,
	  and I remember that for a long time we had problems related to this
	  ("bumps" in the dynamics). I will make sure that they work properly
	  until I use them.

2004-11-01  acastro

	* [r920] trunk/src/geometry.F90, trunk/src/ps.F90, trunk/src/specie.F90,
	  trunk/src/spline.F90, trunk/src/systm.F90:
	  The basic machinery for the filtering. But here all the constants
	  are hard-coded, and not necessarily good for all elements.
	  I will have to add them maybe to the default file, and allow the
	  user to fine tune them.
	* [r919] trunk/src/spline.F90:
	  Forgot to implement the interface to the Bessel filter.
	* [r918] trunk/liboct/oct_gsl_f.c, trunk/src/liboct.F90, trunk/src/spline.F90:
	  Implemented a Bessel-transform in the spline module, to be able to
	  filter non-local psedopotentials properly.

2004-10-29  acastro

	* [r917] trunk/src/mesh.F90:
	  Added a function that returns the Gmax of the grid. I guess this function
	  will have to be more complicated for curvilinear grids, but for the moment
	  it is enough.
	* [r916] trunk/src/ps.F90, trunk/src/spline.F90:
	  Improved the way the pseudopotential functions are printed for debugging.
	  Now it always prints the Fourier transform of the functions, to analyze
	  the frequencies.

2004-10-28  marques

	* [r915] trunk/libxc/gga_pbe.c, trunk/libxc/lda_x.c, trunk/libxc/util.h, trunk/libxc/xc_f.c:
	  several bug fixes.
	* [r914] trunk/src/Makefile.am, trunk/src/h_inc.F90, trunk/src/h_xc_OEP.F90,
	  trunk/src/libxc.F90, trunk/src/xc.F90, trunk/src/xc_GGA.F90, trunk/src/xc_LDA.F90,
	  trunk/src/xc_OEP_SIC.F90, trunk/src/xc_pot.F90:
	  Big clean-up. Only the OEP functionals are missing. In any case, a quick look at the EXX
	  revealed to me that the guy who programmed it (me) was probably drunk! I will do some
	  cleaning in the next days... let's see if it'll work ;)

2004-10-27  marques

	* [r913] trunk/share/variables:
	  Another variable to use LB94.
	* [r912] trunk/libxc/Makefile.am, trunk/libxc/gga.c, trunk/libxc/gga_lb.c,
	  trunk/libxc/util.h, trunk/libxc/xc.h, trunk/libxc/xc_f.c:
	  added lb94 functional. As we all know this functional ahs problems, and I am really not
	  sure if these problems are handled correctly.
	* [r911] trunk/src/Makefile.am, trunk/src/atomic.F90, trunk/src/libxc.F90,
	  trunk/src/vxc.F90, trunk/src/xc.F90, trunk/src/xc_GGA.F90:
	  LB94 is now in the xc library, so the ugly file vxc.F90 could be obliterated.
	* [r910] trunk/libxc/Makefile.am, trunk/libxc/gga.c, trunk/libxc/gga_pbe.c,
	  trunk/libxc/lda.c, trunk/libxc/lda_c_amgb.c, trunk/libxc/lda_c_pw.c,
	  trunk/libxc/lda_c_pz.c, trunk/libxc/lda_c_vwn.c, trunk/libxc/lda_funcs.c,
	  trunk/libxc/lda_x.c, trunk/libxc/util.h, trunk/libxc/xc.h, trunk/libxc/xc_f.c:
	  There is now a mechanism to provide informations about the functionals being used.
	* [r909] trunk/src/atomic.F90, trunk/src/libxc.F90, trunk/src/xc.F90:
	  We now have a nice info output for the xc.

2004-10-26  marques

	* [r908] trunk/src/atomic.F90, trunk/src/libxc.F90, trunk/src/vxc.F90, trunk/src/xc.F90,
	  trunk/src/xc_GGA.F90, trunk/src/xc_pot.F90:
	  PBE is now used from libxc.
	* [r907] trunk/libxc/Makefile.am, trunk/libxc/gga.c, trunk/libxc/gga_pbe.c,
	  trunk/libxc/lda.c, trunk/libxc/util.c, trunk/libxc/util.h, trunk/libxc/xc.h,
	  trunk/libxc/xc_f.c:
	  First support for GGAs.
	  Added PBE.
	* [r906] trunk/share/variables:
	  Added variables for PBE.

2004-10-25  acastro

	* [r905] trunk/src/spline.F90:
	  Improvement on module spline.F90, in order to contain functions that
	  Fourier transform and filter functions -- the application of this to the
	  pseudopotentials I will commit later, when I am done with the tests--
	  
	  For a change, I have written a big header with documentation, which is
	  why there are so many lines. Maybe we should agree on a consistent way
	  to write documentation hereafter.

2004-10-21  marques

	* [r904] trunk/libxc/util.c:
	  removed an erraneous #include

2004-10-20  marques

	* [r903] trunk/liboct/oct_gsl_f.c:
	  Cleaned the code of Alberto. Please check if it's working.
	* [r902] trunk/Makefile.am, trunk/configure.ac:
	  These files also have to be updated.
	* [r901] trunk/src/libxc.F90:
	  Forgot this file that interfaces the libxc library.
	* [r900] trunk/libxc/xc_f.c, trunk/share/variables, trunk/src/Makefile.am,
	  trunk/src/atomic.F90, trunk/src/atoms_magnet.F90, trunk/src/excitations.F90,
	  trunk/src/geom_opt.F90, trunk/src/gs.F90, trunk/src/h.F90, trunk/src/make_st.F90,
	  trunk/src/opt_control.F90, trunk/src/out_inc.F90, trunk/src/phonons.F90,
	  trunk/src/restart_inc.F90, trunk/src/scf.F90, trunk/src/states_inc.F90,
	  trunk/src/static_pol.F90, trunk/src/static_pol_lr.F90, trunk/src/td.F90,
	  trunk/src/td_write.F90, trunk/src/unocc.F90, trunk/src/vxc.F90, trunk/src/xc.F90,
	  trunk/src/xc_LDA.F90, trunk/src/xc_OEP_SIC.F90, trunk/src/xc_pot.F90:
	  *) Changed (again) the restart files because:
	  1) There was a bug reading the occupations and the eigenvalues
	  2) It did not work for spin-polarized calculations
	  
	  *) Added support for the libxc LDA functionals. Due to this reason, GGAs
	  and the other functionals are desactivated. Now octopus can use the
	  13 LDAs provided by libxc.

2004-10-20  acastro

	* [r899] trunk/liboct/oct_gsl_f.c:
	  Added some C functions that play with the splines data types. I use
	  them in the code (that I will commit soon) in spline.F90, that implements
	  cutoffs (which are *almost* working), to be used by the pseudopotentials.
	  
	  Due to my lack of knowledge of C, the code is rather obfuscated -- in fact
	  I do not even know why they work, they just work. Please some of you take
	  a look whenever you are bored.

2004-10-20  marques

	* [r898] trunk/libxc, trunk/libxc/Makefile.am, trunk/libxc/lda.c, trunk/libxc/lda_c_amgb.c,
	  trunk/libxc/lda_c_pw.c, trunk/libxc/lda_c_pz.c, trunk/libxc/lda_c_vwn.c,
	  trunk/libxc/lda_funcs.c, trunk/libxc/lda_x.c, trunk/libxc/test.c, trunk/libxc/util.c,
	  trunk/libxc/util.h, trunk/libxc/xc.h, trunk/libxc/xc_f.c:
	  The begining of our library of xc functionals. There are 13 LDA functionals implemented
	  until now. The unpolarized versions work I think. The polarized I have some doubts, and we
	  should do some further checking.
	* [r897] trunk/liboct_parser, trunk/liboct_parser/Makefile.am,
	  trunk/liboct_parser/grammar.y, trunk/liboct_parser/liboct_parser.h,
	  trunk/liboct_parser/parse.c, trunk/liboct_parser/parse_exp.c,
	  trunk/liboct_parser/parser_f.c, trunk/liboct_parser/string_f.c,
	  trunk/liboct_parser/string_f.h, trunk/liboct_parser/symbols.c,
	  trunk/liboct_parser/symbols.h:
	  These files are in a new directory to ease the maintenance.
	* [r896] trunk/liboct/Makefile.am, trunk/liboct/grammar.y, trunk/liboct/liboct_parser.h,
	  trunk/liboct/parse.c, trunk/liboct/parse_exp.c, trunk/liboct/parser_f.c,
	  trunk/liboct/string_f.c, trunk/liboct/string_f.h, trunk/liboct/symbols.c,
	  trunk/liboct/symbols.h:
	  Separated the liboct_parser to a diferent directory.

2004-10-14  marques

	* [r895] trunk/src/poisson_cg.F90:
	  Yes, apparently I forgot this file.

2004-10-14  acastro

	* [r894] trunk/configure.ac, trunk/samples, trunk/share/Makefile.am, trunk/share/samples,
	  trunk/share/samples/Makefile.am, trunk/share/samples/Na2, trunk/share/samples/bench-gs:
	  Moved also in this head branch the samples to the share directory.
	  
	  I have not checked that it worked, since now the tree is broken: it seems
	  that some poisson_cg.F90 file is missing, right?

2004-10-12  marques

	* [r893] trunk/src/Makefile.am, trunk/src/eigen_cg2.F90, trunk/src/mix.F90,
	  trunk/src/poisson.F90, trunk/src/poisson3D.F90:
	  A bit ot reorganization...

2004-10-08  marques

	* [r892] trunk/liboct/config.h.in, trunk/liboct/oct_f.c, trunk/liboct/recipes.c,
	  trunk/src/Makefile.am:
	  more small changed.
	* [r891] trunk/acinclude.m4, trunk/configure.ac, trunk/share/PP/defaults,
	  trunk/share/variables, trunk/src/config.h.in:
	  small changes: syncing my tree with the cvs tree.
	* [r890] trunk/build/acx_fftw.m4, trunk/build/acx_metis.m4, trunk/build/octopus.spec.in:
	  added better support for metis library.
	* [r889] trunk/src/gs.F90, trunk/src/linear_response.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/static_pol_lr.F90:
	  bug fixes.

2004-10-04  acastro

	* [r888] trunk/src/vxc.F90:
	  Bug fixed.
	  Same as in the 1.4a branch: The Portland compiler does not like parameters
	  being defined with operations.
	* [r887] trunk/src/gs.F90:
	  Bug fixed.
	  Same bug than in the 1.4a version.

2004-10-01  marques

	* [r886] trunk/src/global.F90:
	  a message width of 80 characters was not sufficient for eugene's machine, so I increased
	  it to 256.

2004-09-30  marques

	* [r885] trunk/src/Makefile.am:
	  sorry, forgot this.
	* [r884] trunk/src/Makefile.am:
	  small change to allow octopus to compile in systems that do not distinguish between upper
	  and lower case.

2004-09-30  micael

	* [r883] trunk/src/Makefile.am:
	  *) h.F90 must be compiled before systm.F90.

2004-09-30  marques

	* [r882] trunk/src/Makefile.am, trunk/src/fxc.F90, trunk/src/linear_response.F90,
	  trunk/src/rsdfpt.F90, trunk/src/run.F90, trunk/src/states_inc.F90,
	  trunk/src/static_pol_lr.F90:
	  I broke the big file of Eugene into smaller pieces, and did some cosmetics.
	  Of course it does not work... yet.

2004-09-29  marques

	* [r881] trunk/share/PP/TM2/Ti.ascii:
	  Titanium pseudopotential from Alberto
	* [r880] trunk/acinclude.m4, trunk/build/acx_fft.m4, trunk/configure.ac,
	  trunk/src/Makefile.am, trunk/src/states.F90, trunk/src/vxc.F90:
	  bug corrections ported from 1.4a
	  *) PZ spin polarized segfaulted in alphas
	  *) Problems finding fftw
	  *) multipole calculated segfaulted in alphas

2004-09-28  marques

	* [r879] trunk/AUTHORS:
	  Should not forget to update the authors list.
	* [r878] trunk/src/Makefile.am, trunk/src/gs.F90, trunk/src/rsdfpt.F90, trunk/src/run.F90:
	  Added the linear response routine of Eugene. It still has to be cleaned further and broken
	  into pieces, but at least it compiles ;)

2004-09-24  marques

	* [r877] trunk/src/global.h:
	  And this one...
	* [r876] trunk/share/PP/defaults:
	  I think I forgot this file.
	* [r875] trunk/share/variables:
	  changed CalculationMode variable
	* [r874] trunk/src/atoms_magnet.F90, trunk/src/excitations.F90, trunk/src/geom_opt.F90,
	  trunk/src/gs.F90, trunk/src/h.F90, trunk/src/io.F90, trunk/src/make_st.F90,
	  trunk/src/opt_control.F90, trunk/src/out_inc.F90, trunk/src/phonons.F90,
	  trunk/src/restart.F90, trunk/src/restart_inc.F90, trunk/src/run.F90, trunk/src/scf.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/static_pol.F90,
	  trunk/src/stencil_cube.F90, trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_init.F90,
	  trunk/src/td_rti.F90, trunk/src/td_write.F90, trunk/src/unocc.F90:
	  Cleaning up the run.F90 file. I suspect that there are still many things that do not
	  work...

2004-09-24  acastro

	* [r873] trunk/src/Makefile.am:
	  The dependencies are now at the end, as it is more standard. Added one
	  comment to explain what the "make depend" thing is.
	* [r872] trunk/src/Makefile.am:
	  Updated the dependencies in the Makefile.
	  
	  For that purpopse, I have used "makedepf90"
	  (http://www.helsinki.fi/~eedelman/makedepf90.html).
	  The list of dependencies may now be regenerated by typing
	  "make depend" within the src directory.

2004-09-22  acastro

	* [r871] trunk/samples/Na2:
	  The Na2 samples file had stopped working because the Species block
	  had changed the syntax.
	* [r870] trunk/share/variables:
	  Added some variables (tm2, hgh, ps_tm2, ps_hgh) with the variables that
	  those constants have in the files, in order to ease the writing of
	  the input files.

2004-09-21  acastro

	* [r869] trunk/src/liboct_parser.F90:
	  Bug fixed.
	  (obvious one)

2004-09-15  marques

	* [r868] trunk/src/Makefile.am, trunk/src/eigen.F90, trunk/src/eigen_cg2.F90,
	  trunk/src/gs.F90, trunk/src/restart.F90, trunk/src/run.F90, trunk/src/scf.F90,
	  trunk/src/states.F90, trunk/src/unocc.F90:
	  started cleaning up run.F90. Code will be messy for the next days (actually couple of
	  weeks for I will go to Maratea on friday)

2004-09-14  marques

	* [r867] trunk/liboct/recipes.c, trunk/src/Makefile.am, trunk/src/global.F90,
	  trunk/src/io.F90, trunk/src/liboct.F90, trunk/src/main.F90, trunk/src/pulpo.F90:
	  Changed a little the io structure.
	* [r866] trunk/liboct/liboct_parser.h, trunk/liboct/parse.c, trunk/liboct/parser_f.c,
	  trunk/src/Makefile.am, trunk/src/epot.F90, trunk/src/geometry.F90, trunk/src/lasers.F90,
	  trunk/src/liboct_parser.F90, trunk/src/make_st.F90, trunk/src/mesh_create.F90,
	  trunk/src/pes_rc.F90, trunk/src/rotational_strength.F90, trunk/src/specie.F90,
	  trunk/src/states.F90, trunk/src/states_kpoints.F90, trunk/src/systm.F90,
	  trunk/src/td_init.F90, trunk/src/xyz_adjust.F90, trunk/src/xyz_file.F90:
	  Changed the way the parser handles blocks. It's a bit more elegant now in my opinion.

2004-09-13  marques

	* [r865] trunk/src/epot.F90, trunk/src/ps.F90, trunk/src/specie.F90, trunk/src/specie1D.F90,
	  trunk/src/specie3D.F90, trunk/src/systm.F90:
	  Changed the species block, and reorganized a little the species code.
	* [r864] trunk/liboct/recipes.c:
	  trivial change I had forgotten.
	* [r863] trunk/liboct/recipes.c:
	  octopus did not print the recipe :)

2004-09-05  fnog

	* [r862] trunk/build/acx_blas.m4, trunk/build/acx_lapack.m4:
	  small changes in the detection of MKL blas and lapack libraries

2004-08-24  marques

	* [r861] trunk/src/Makefile.am, trunk/src/curvlinear.F90, trunk/src/derivatives.F90,
	  trunk/src/derivatives_inc.F90, trunk/src/epot_inc.F90, trunk/src/h.F90,
	  trunk/src/mesh.F90, trunk/src/mesh_create.F90, trunk/src/mf_inc.F90,
	  trunk/src/nl_operator.F90, trunk/src/out_inc.F90, trunk/src/poisson3D.F90,
	  trunk/src/systm.F90:
	  Several bug fixes.

2004-08-23  marques

	* [r860] trunk/configure.ac:
	  Forgot to commit this trivial change.

2004-08-22  marques

	* [r859] trunk/src/derivatives.F90, trunk/src/mesh_create.F90, trunk/src/poisson3D.F90:
	  There is a bug, and it doesn't work. I will fix it tomorrow.
	* [r858] trunk/src/derivatives_inc.F90, trunk/src/excitations.F90, trunk/src/h_inc.F90,
	  trunk/src/h_xc_OEP.F90, trunk/src/linear.F90, trunk/src/poisson.F90,
	  trunk/src/poisson3D.F90, trunk/src/xc_OEP_SIC.F90, trunk/src/xc_OEP_x.F90:
	  poisson conjugated gradients is slow, but apparently works ;)

2004-08-20  marques

	* [r857] trunk/src/curv_modine.F90, trunk/src/derivatives.F90, trunk/src/eigen.F90,
	  trunk/src/eigen_plan.F90, trunk/src/global.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/mf_inc.F90, trunk/src/out_inc.F90:
	  Some bug fixes and speed improvements. Hydrogen runs, it seems.

2004-08-19  marques

	* [r856] trunk/src/Makefile.am, trunk/src/curv_briggs.F90, trunk/src/curv_gygi.F90,
	  trunk/src/curv_modine.F90, trunk/src/curvlinear.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90:
	  Cleaned up a bit curvlinear coordinates. Also added some coordinate transformations. To
	  implement a new transformation one basically just needs the function, and it's laplacian.
	  Very eay, believe me.
	* [r855] trunk/share/variables:
	  Added some values used in curvilinear coordinates.

2004-08-18  marques

	* [r854] trunk/share/variables:
	  added names of stencils
	* [r853] trunk/src/Makefile.am, trunk/src/derivatives.F90, trunk/src/f.F90,
	  trunk/src/mesh.F90, trunk/src/scf.F90, trunk/src/states_inc.F90,
	  trunk/src/stencil_cube.F90, trunk/src/stencil_star.F90, trunk/src/stencil_variational.F90:
	  Cubic stencil added. It is very easy to add new, so feel free to try ;)

2004-08-17  marques

	* [r852] trunk/src/derivatives.F90:
	  implemented the variational laplacian of Maragakis et al.

2004-08-16  marques

	* [r851] trunk/src/td_exp.F90:
	  commented a couple of lines so that the code compiles.
	* [r850] trunk/src/Makefile.am, trunk/src/derivatives.F90, trunk/src/derivatives_inc.F90,
	  trunk/src/eigen.F90, trunk/src/eigen_cg2.F90, trunk/src/epot.F90,
	  trunk/src/excitations.F90, trunk/src/f.F90, trunk/src/f_inc.F90, trunk/src/geom_opt.F90,
	  trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/h_xc_OEP.F90, trunk/src/lcao.F90,
	  trunk/src/mesh.F90, trunk/src/mesh_create.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90,
	  trunk/src/nl_operator.F90, trunk/src/opt_control.F90, trunk/src/out_inc.F90,
	  trunk/src/pes_mask.F90, trunk/src/phonons.F90, trunk/src/poisson.F90,
	  trunk/src/poisson3D.F90, trunk/src/run.F90, trunk/src/scf.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/static_pol.F90, trunk/src/systm.F90, trunk/src/td.F90,
	  trunk/src/td_calc.F90, trunk/src/td_exp.F90, trunk/src/td_rti.F90, trunk/src/td_write.F90,
	  trunk/src/unocc.F90, trunk/src/xc_GGA.F90, trunk/src/xc_pot.F90:
	  Several big changes:
	  *) the form of calculating derivatives has changed. Next step is adding other stencils and
	  other descritazations
	  *) all arrays of the form (3, m%np) are now (m%np, 3). This is, in principle, much more
	  efficient. It is likely that I forgot a couple of them!

2004-08-02  marques

	* [r849] trunk/src/derivatives.F90:
	  Forgot this file.
	* [r848] trunk/src/Makefile.am, trunk/src/atoms_magnet.F90, trunk/src/curvlinear.F90,
	  trunk/src/eigen.F90, trunk/src/eigen_cg3.F90, trunk/src/eigen_plan.F90,
	  trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/f.F90, trunk/src/h_inc.F90,
	  trunk/src/h_so.F90, trunk/src/h_xc_OEP.F90, trunk/src/linear.F90, trunk/src/make_st.F90,
	  trunk/src/mesh.F90, trunk/src/mesh_create.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90,
	  trunk/src/opt_control.F90, trunk/src/out_inc.F90, trunk/src/poisson1D.F90,
	  trunk/src/poisson2D.F90, trunk/src/poisson3D.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/static_pol.F90, trunk/src/systm.F90,
	  trunk/src/td_calc.F90, trunk/src/td_exp_split.F90, trunk/src/xc_GGA.F90,
	  trunk/src/xc_KLI.F90, trunk/src/xc_LDA.F90, trunk/src/xc_OEP_SIC.F90,
	  trunk/src/xc_OEP_x.F90:
	  Support for curvlinear coordinates. This breaks some parts of the code.
	  It is likely that the HEAD branch of the CVS will not work properly for the next
	  couple of months. During that time, octopus will be changed to work with curvli
	  near coordinates and parallel in domain.

2004-07-26  acastro

	* [r847] trunk/src/systm.F90, trunk/src/td_exp.F90, trunk/src/td_rti.F90:
	  Believe it or not, all these changes have to be made if one wants to run
	  the code with the Intel 8.0.046 compiler that I have here, and a system
	  with a large mesh is used... that's why I think that this compiler version
	  is still not serious (I have Build 20040412Z).
	  
	  In fact, in my case, line 238 of out_inc.F90 also seg faults if a very
	  large mesh is used, but I don't see a way to solve that problem.
	  
	  The problem of eigen_plan still remains, by the way. I will take a look
	  at it later. Also I am not very happy with the lanczos subroutine.
	* [r846] trunk/src/math_inc.F90:
	  Moved some explicit size interfaces to assumed sized ones, to avoid
	  creation of temporary arrays.
	* [r845] trunk/src/linalg_basic.F90, trunk/src/linalg_basic_blas.F90:
	  Added support for two-component matrix vector multiplication, in the form:
	  y(1:m1, 1:m2) = a(1:m1, 1:m2, 1:n)*x(1:n)

2004-07-26  marques

	* [r844] trunk/src/epot.F90, trunk/src/linalg_basic.F90:
	  Small bug found by Micael.

2004-07-26  acastro

	* [r843] trunk/src/mix.F90, trunk/src/scf.F90:
	  Changes in mix module to avoid errors with Intel 8.0.046 compiler.\
	  (Removed the (*) arguments, and other stuff...)

2004-07-24  acastro

	* [r842] trunk/src/states.F90, trunk/src/systm.F90:
	  Changed function atom_density to a subroutine. Otherwise Intel compiler
	  version 8.0 crashes, as usual, if the array is big enough.
	* [r841] trunk/src/eigen_cg2.F90:
	  I changed a simple linear algebra operation to be done with blas. The
	  reason is that otherwise it crashes with the Intel Fortran compiler version
	  8. Apparently also in these cases it creates temporary arrays in the stack,
	  and if the problem is big enough, dies.
	* [r840] trunk/src/lcao.F90, trunk/src/liboct.F90:
	  Changed the call to blas_gemm by sucessive calls to lalg_axpy, which
	  permits to use the new interface. Maybe we can use lalg_gemv and simplfy
	  it a bit, but in fact it could make it more unreadable.
	* [r839] trunk/src/h_inc.F90:
	  The reshape intrinsic was seg-faulting with the Intel Fortran compiler,
	  at least with my sample input, which is a spinors case with lots of
	  points in the grid. In any case, I think those lines are much simpler
	  now, and equivalent...
	* [r838] trunk/src/h_so.F90:
	  The calls to lalg_dot were in h_so.F90 were not compatible with the
	  new interface. I also changed the input variables from (m%np, dim)
	  to (:, :).
	* [r837] trunk/src/fftw3.F90:
	  Use of tabs is also an extension to Fortran 90.
	* [r836] trunk/src/blas.F90, trunk/src/linalg_basic.F90:
	  Addig the name of the interface to the "end interface" statement
	  seems to be an extension to the Fortran 90 standard (the ifort compiler
	  emits a warning when compiling with "-e90" option)

2004-07-23  marques

	* [r835] trunk/src/blas.F90:
	  Forgot this file, sorry.
	* [r834] trunk/Makefile.am, trunk/src/Makefile.am, trunk/src/lcao.F90,
	  trunk/src/linalg_basic.F90, trunk/src/linalg_basic_blas.F90,
	  trunk/src/linalg_basic_int.F90:
	  now also the intrinsics work.
	* [r833] trunk/Makefile.am, trunk/doc/octopus.info, trunk/samples/inp,
	  trunk/src/Makefile.am, trunk/src/eigen_cg3.F90, trunk/src/eigen_plan.F90,
	  trunk/src/f_inc.F90, trunk/src/fftw2.F90, trunk/src/fftw3.F90, trunk/src/h_inc.F90,
	  trunk/src/h_so.F90, trunk/src/lcao.F90, trunk/src/linalg_adv_lapack.F90,
	  trunk/src/linalg_basic.F90, trunk/src/linalg_basic_blas.F90, trunk/src/math_inc.F90,
	  trunk/src/mesh.F90, trunk/src/mf_inc.F90, trunk/src/mix.F90, trunk/src/out_inc.F90,
	  trunk/src/poisson.F90, trunk/src/poisson3D.F90, trunk/src/specie3D.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/systm.F90,
	  trunk/src/td_calc.F90, trunk/src/td_exp.F90, trunk/src/td_rti.F90, trunk/src/xc_GGA.F90:
	  The code now works with the intel ifort 8.
	  Clean up BLAS support.
	* [r832] trunk/samples/Na2:
	  changed filename from inp -> Na2

2004-07-22  marques

	* [r831] trunk/configure.ac:
	  Changed version number to 1.4a (alpha)
	* [r830] trunk/doc/octopus.dvi, trunk/doc/octopus.texi, trunk/src/excitations.F90,
	  trunk/src/global.F90, trunk/src/h.F90, trunk/src/mesh_create.F90:
	  I did some changes to the manual. Actually the manual should be greatly extended but I
	  don't really have the time or the patience to do it now. Of course, if any of you feels
	  like it...

2004-07-06  acastro

	* [r829] trunk/build/acx_mpi.m4:
	  Bug fixed.
	  There was a dollar sign in "-l$mpi" which should not be there.
	* [r828] trunk/src/restart.F90:
	  Bug fixed.
	  The SG compiler does not like declaration of functions without parenthesis,
	  even if they are empty.

2004-07-05  acastro

	* [r827] trunk/src/scf.F90, trunk/src/vxc.F90, trunk/src/xc_LDA.F90:
	  Bugs fixed in the 2D LDA. Finally it seems to work properly.
	* [r826] trunk/src/vxc.F90:
	  Our old PZ parameterization of the LDA was using parameters with no
	  precision enough to match well results for rs<=1 and rs>=1. As a result,
	  there were ugly discontinuities when doing time-evolution. I recalculated
	  the constants, and then rewrote the full subroutine which was not ours
	  anyways...
	* [r825] trunk/src/xyzanim.F90:
	  oct-xyz-anim program was broken (long time nobody used it...) Now I think
	  it works.

2004-07-04  marques

	* [r824] trunk/src/excitations.F90, trunk/src/linear.F90:
	  Alberto's wish list is one item shorter: linear response now uses information from the
	  previous runs :)
	* [r823] trunk/src/complex.F90, trunk/src/epot_inc.F90, trunk/src/global.h, trunk/src/h.F90,
	  trunk/src/linear.F90, trunk/src/real.F90, trunk/src/run.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/td_calc.F90:
	  MPI could not work in single precision mode.

2004-07-03  marques

	* [r822] trunk/AUTHORS:
	  Updated list.
	* [r821] trunk/src/linear.F90:
	  Now the paralel version of excitations works. BTW a first patch for this was given by
	  Sestien Hamel. Thanks Sebastian ;)

2004-06-28  marques

	* [r820] trunk/src/Makefile.am, trunk/src/excitations.F90, trunk/src/liboct.F90,
	  trunk/src/linear.F90:
	  Paralell calculation of the excitation a la Casida.
	  Unfortunatly I could not test, as the calculation of unoccupied states is broken...

2004-06-28  acastro

	* [r819] trunk/src/epot.F90:
	  Maybe better this way.
	* [r818] trunk/src/epot.F90:
	  This way of handling the problem with the nonlocal pseudopotentials is
	  probably a bit better, although it is still ugly. Whenever we can use
	  better versions of Fortran maybe these problems will be solved..

2004-06-26  acastro

	* [r817] trunk/src/epot.F90, trunk/src/h.F90:
	  Bug fixed.
	  When ions moved, the non-local pseudopotentials were not updated well.
	  I think that it was in fact an error of the compiler, unable of properly
	  treating the pointers, but nevertheless I changed a bit the code, and
	  now it seems to work.

2004-06-24  acastro

	* [r816] trunk/src/Makefile.am, trunk/src/choose_st.F90:
	  Removed choose_st (no longer necessary after changing the restart
	  scheme)
	* [r815] trunk/src/td.F90:
	  Bug fixed.
	  Description: the energy was not properly calculated in td.F90 (the ionic
	  terms were not properly treated)

2004-06-23  acastro

	* [r814] trunk/build/acx_fftw.m4, trunk/src/out_inc.F90:
	  Bugs fixed:
	  (*) Code was not configured properly properly with FFTW version 2.
	  (*) In input_function, some code had to be removed by the preprocessor when
	  NetCDF is not present.
	* [r813] trunk/src/restart.F90:
	  I forgot to add the file restart.F90, sorry...
	* [r812] trunk/build/acx_fftw.m4:
	  Bug fixed.
	  Description: If the "--with-fft=" argument was passed, the configure
	  script never found fft. (just had to change enableval to withval, since
	  now we use "--with-fft" instead of "--enable-fft=")
	* [r811] trunk/share/variables, trunk/src/Makefile.am, trunk/src/atoms_magnet.F90,
	  trunk/src/choose_st.F90, trunk/src/epot_inc.F90, trunk/src/excitations.F90,
	  trunk/src/global.h, trunk/src/make_st.F90, trunk/src/opt_control.F90, trunk/src/out.F90,
	  trunk/src/out_inc.F90, trunk/src/run.F90, trunk/src/scf.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_init.F90,
	  trunk/src/td_write.F90, trunk/src/unocc.F90, trunk/src/xc.F90:
	  (1) Changed the restart scheme. Now, in principle, one may (i) save the
	  restart files in binary or in NetCDF, (ii) restart from either
	  binary or NetCDF, either if it was in single or in double precision,
	  (iii) restart in parallel a serial job, or viceversa, or change the
	  number of processors in the run. This still needs *lots* of testing,
	  but under some circumstances, it works. NetCDF is encouraged, since
	  those files can be directly input by OpenDX.
	  
	  (2) Revomed the MPI_TD directive, which was unused, and was now causing
	  problems since acx_mpi.m4 changed.

2004-06-21  acastro

	* [r810] trunk/src/eigen_plan.F90, trunk/src/global.F90, trunk/src/mf_inc.F90,
	  trunk/src/out.F90, trunk/src/out_inc.F90, trunk/src/states.F90, trunk/src/states_inc.F90:
	  (1) Changes in module output.
	  Now there is, accompanying to the output_function routines, one
	  input_function that complements it. There is one new output/input
	  mode, "Plain" (in addition to "DX", "AxisX", etc). Input may only
	  be done in NetCDF format or in "Plain". NetCDF now also works for
	  complex functions. input function should read any function whose
	  mesh corresponds well, no matter if it was written in single precision
	  or not, complex or real. Removed the OutputSinglePrec flat, now the
	  code writes functions in the precision that it was compiled.
	  (Remind me to update the manual!)
	  
	  (2) states_random moved to mf_random, where it is more logical.

2004-06-21  marques

	* [r809] trunk/configure.ac:
	  Small annoying bug found by carlo.

2004-06-18  acastro

	* [r808] trunk/src/atomic.F90, trunk/src/global.h, trunk/src/hgh.F90, trunk/src/tm.F90:
	  Finally I removed the annoying bug that hindered the use of octopus
	  in single precision with pseudopotentials. In my laptop, this
	  makes things 40% faster for bench-gs, and the results don't differ much.
	  In any case, I did this because (i) we had to have a bugless single
	  precision octopus anyway, and (ii) when I commit the restart stuff, one
	  should be able to do a gs calculation in single precision, and restart
	  in double precision reading the results, which should be good.
	  
	  It seems that egofv and its child subroutines don't work in single
	  precision, since I monitored some of the variables and they take too
	  large values for single precision. This probably means that the algorithms
	  are not too good, but I am not going to change the algorithms. What I did
	  is to make sure that those routines are always compiled in double precision,
	  and that when egofv is called (just in tm.F90 and hgh.F90), it is called
	  in double precision.

2004-06-17  acastro

	* [r807] trunk/build/acx_netcdf.m4:
	  I think that the use of the comma inside the definition of the program
	  was causing troubles. Since I could not find out how to use safely
	  programs inside an m4 argument, I just eliminated it. Now it works...

2004-06-16  marques

	* [r806] trunk/build/acx_mpi.m4, trunk/build/acx_netcdf.m4, trunk/build/acx_trlan.m4:
	  Small fixes of stupid bugs...
	* [r805] trunk/src/Makefile.am:
	  Alberto was right, there was a problem with thios file. I just don't understand why it
	  worked in the first place...

2004-06-14  marques

	* [r804] trunk/Makefile.am:
	  I forgot to remove "autogen.sh" from this file
	* [r803] trunk/build/acx.m4, trunk/configure.ac:
	  Added default FCFLAGS.
	  The script is not "proper" but it will work sometimes ;)

2004-06-11  marques

	* [r802] trunk/autogen.sh:
	  This script is no longer necessary. Use autoreconf please.
	* [r801] trunk/acinclude.m4, trunk/configure.ac:
	  This is the new configuratiopn of octopus. It is much better (in my opinion) than the one
	  we had before. However, there are 2 or 3 details you should be aware of:
	  1) It is based in automake 1.8. It will not work with previous versions, so please upgrade
	  2) It is experimental (although it works in my machine).
	  
	  Let me know of any bugs you may found.
	* [r800] trunk/liboct/config.h.in, trunk/liboct/oct_f.c, trunk/liboct/oct_gsl_f.c,
	  trunk/liboct/parser_f.c, trunk/liboct/recipes.c, trunk/liboct/write_iter.c,
	  trunk/src/Makefile.am:
	  New build system with automake 1.8
	* [r799] trunk/build/acx.m4, trunk/build/acx_blas.m4, trunk/build/acx_fftw.m4,
	  trunk/build/acx_lapack.m4, trunk/build/acx_mpi.m4, trunk/build/acx_netcdf.m4,
	  trunk/build/acx_trlan.m4, trunk/build/fortran90.m4:
	  New configuration scripts for the libraries. They are much cleaner now.

2004-06-09  acastro

	* [r798] trunk/src/vxc.F90:
	  Bug fixed in PW92 correlation expression (numerical problem that appeared
	  only sometimes)

2004-06-07  acastro

	* [r797] trunk/src/f_inc.F90, trunk/src/global.F90, trunk/src/main.F90, trunk/src/scf.F90,
	  trunk/src/states_inc.F90, trunk/src/td_write.F90:
	  (1) Added a MPI_BARRIER in global_init
	  (2) Added a trim in the call to print_file in main.F90 to get the logo right
	  (sometimes it failed)
	  (3) Fixed the bug in td_write.F90, td_write_angular
	  (I think it is a MPICH bug, rather than ours, but anyways the
	  calculation was stopped in MPI runs when the angular momentum
	  was to be written)
	  (4) Removed mesh_angular_momentum from states_inc, moved to
	  f_inc (where it belongs). Added subroutine f_l2.
	  (5) Changed states_inc. Now it allows to calculate L^2
	  (6) In scf_write_static, now the expectation values of the
	  three components of the angular momentum, as well as of
	  L^2 are printed.

2004-05-28  acastro

	* [r796] trunk/liboct/write_iter.c, trunk/src/liboct.F90, trunk/src/td.F90,
	  trunk/src/vxc.F90, trunk/src/xc.F90:
	  Several fixes:
	  (1) The order of ATTA and PW92 in xc.F90 were wrong.
	  (2) Some compilers did not like the way I initialized beta in
	  subroutine correlation_lda_3D_pw92 in vxc.F90
	  (3) I added in liboct.F90 interfaces to the write_iter routines
	  defined in write_iter.c, because it was causing troubles. I decided to
	  put them in liboct, and not make an independent module. I don't know
	  if you would prefer the other way.

2004-05-27  acastro

	* [r795] trunk/src/vxc.F90, trunk/src/xc.F90, trunk/src/xc_LDA.F90:
	  Added the correlation parametrization of Attacalite et al.
	  [C. Attacalite et al, Phys. Rev. Lett. 88, 256601 (2002)]
	  of the correlation energy and potential of the homogeneous
	  electron gas.
	  Hereafter we can do LDA in 2D (for quantum dots).
	  I have tested the energy, but have not tested the potential
	  (I will do it in the following days, when I get data from the Attacalite
	  and his friends).
	  Incidentally, I rewrote the PW92 subroutine, with the hope of merging
	  the 2D and 3D expressions, but finally was not possible. In any case
	  we got rid of the old routine, which was not really ours.
	  In the input file, one has to write CFunctional = "ATTA".
	  (I have not attempted to do any quantum dot yet)
	  Yes, I will put it in the manual soon.

2004-05-26  micael

	* [r794] trunk/src/systm.F90:
	  *) GuessDensitySpin user-defined mode was not working properly.

2004-05-25  micael

	* [r793] trunk/src/atoms_magnet.F90, trunk/src/states_inc.F90:
	  *) Bug fixed in the magnetization vector calculation (I will skipp the details).
	  The only consequence (I think) was a wrong sign in the y component.

2004-05-19  micael

	* [r792] trunk/src/h_inc.F90:
	  *) Bug fixed. There was a sign wrong in the vlpsi routine when using spinors.

2004-05-18  micael

	* [r791] trunk/src/atoms_magnet.F90:
	  *) Bug fixed in the oct-atoms-magnet utility.

2004-05-18  marques

	* [r790] trunk/share/PP/TM2/S.ascii, trunk/share/PP/defaults:
	  Added pseudopotential for sulfur.

2004-05-17  micael

	* [r789] trunk/src/lcao.F90:
	  *) LCAO was not working for spinors.

2004-05-17  acastro

	* [r788] trunk/src/vxc.F90, trunk/src/xc_LDA.F90:
	  LDA exchange energy and potentials are correct now both in 3D and 2D
	  (not yet correlation). In 1D (if such a thing makes any sense) it is not
	  correct because I did not know how to solve a stupid integral. I will look
	  it up in the tables.
	  In any case, one of the older routines, exchng, is gone; I had to change
	  it to make general formulae for the one or two dimensions case. I think
	  it looks better now.
	  CVS :----------------------------------------------------------------------

2004-05-14  marques

	* [r787] trunk/src/states.F90:
	  units of electronic energy were nor adjusted on input.
	* [r786] trunk/samples/bench-gs:
	  Input file to be used for benchmarks.

2004-05-04  acastro

	* [r785] trunk/src/f.F90, trunk/src/h_inc.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90, trunk/src/poisson.F90,
	  trunk/src/poisson3D.F90:
	  Simplified the calculation of the derivatives (removed the lookup_type).
	  The code is significantly faster now on some machines (e.g. Itanium, and
	  IBM machines).

2004-05-04  marques

	* [r784] trunk/share/PP/TM2/Cd.ascii, trunk/share/PP/TM2/Se.ascii, trunk/share/PP/defaults:
	  Added pseudopotentials for Cd and Se.

2004-05-04  micael

	* [r783] trunk/src/f_inc.F90, trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/mf_inc.F90,
	  trunk/src/scf.F90, trunk/src/states.F90, trunk/src/xc_GGA.F90:
	  *) There is now a routine to calculate the physical current (even if it is missing
	  the diamagnetic contribution) and another to calculate the paramagnetic current.
	  *) Changed the name of variable d%current to d%cdft.
	  *) Changed routine mf_divergence in order to remove some "transpose" calls. To do that
	  I had to change some stuff in the xc_GGA module. Could someone check if the GGA is
	  working properly? (the changes where very small, but you never know...)
	* [r782] trunk/src/scf.F90, trunk/src/states_inc.F90, trunk/src/td_write.F90:
	  Some changes Miguel asked for:
	  *) The routine that calculated the expectation value of the spin operator
	  now calculates the magnetization.

2004-04-28  acastro

	* [r781] trunk/configure.ac:
	  To compile statically in my linux machine with Intel Fortran 8.0
	  and using the BLAS/LAPACK compiled with gcc, I have needed to add
	  that (otherwise it links BLAS without libg2c.a, but not LAPACK). I don't
	  know why, but I think that this will not harm anyway.

2004-04-28  micael

	* [r780] trunk/src/scf.F90, trunk/src/states_inc.F90, trunk/src/td.F90,
	  trunk/src/td_init.F90, trunk/src/td_write.F90:
	  *) Added a routine to calculate the total spin of the system.
	  *) Octopus can now print the total spin of the system during time-dependent
	  calculations.

2004-04-26  marques

	* [r779] trunk/src/lcao.F90, trunk/src/run.F90, trunk/src/scf.F90:
	  LCAO is now performed even if tehre are local potentials, provided that there are enough
	  basis sets. I needed this to run some CdSe clusters.

2004-04-26  micael

	* [r778] trunk/src/systm.F90:
	  *) Bug fixed in the building of the guess density from a pseudopotential.
	  *) There is now a new option for the guess density when doing non-collinear
	  spin calculations: you can specify a direction for each atoms magnetization.

2004-04-21  marques

	* [r777] trunk/src/poisson.F90, trunk/src/poisson3D.F90:
	  bug? in posisson3D corrected. Can smoeone check this one?
	  spce before '#' caused the preprocessor to complain.

2004-04-20  marques

	* [r776] trunk/src/eigen_plan.F90:
	  octopus actually compiles with g95 with this small change. of course it segfaults
	  immediatly ;) But hey, it's a start
	* [r775] trunk/src/run.F90:
	  Segmentation fault resolved

2004-04-20  acastro

	* [r774] trunk/src/run.F90:
	  The call to calcdens was useless because the occupations are null,
	  so that a null density is built.

2004-04-19  acastro

	* [r773] trunk/liboct/parse.c, trunk/share/Makefile.am:
	  Apparently there was no need to change the parse.c file, so I
	  replace the previous version.
	  I also committed the wrong Makefile.am file for the share directory.
	  Hope it works now.
	* [r772] trunk/liboct/parse.c, trunk/share/Makefile.am, trunk/share/variables,
	  trunk/src/global.F90:
	  Moved the variables defined in the global module (gs_start, etc) to
	  a file ("variables") in the share directory, to be installed when octopus
	  is installe. Then the parser reads this "variables" file previous to the
	  inp file. I think this is cleaner...
	  If the variables is not found (for example, if one is using a statically
	  linked executable compiled in another computer, and octopus is not properly
	  installed), the variables are not defined. But one can easilly just
	  paste them to the inp file.

2004-04-17  marques

	* [r771] trunk/src/out_inc.F90:
	  *** empty log message ***
	* [r770] trunk/configure.ac:
	  Small problem corrected. g2c should come from blas, so no need to add at again.

2004-04-16  micael

	* [r769] trunk/src/states_kpoints.F90:
	  *) Bug fixed: routine states_choose_kpoints knew nothing about spinors.

2004-04-16  acastro

	* [r768] trunk/build/fortran90.m4, trunk/configure.ac:
	  My first commit since ages...
	  * I added "ifort" to the list of Fortran compilers, for those who
	  (like me) have decided to move to version 8 of the intel compiler.
	  * I changed a bit the configure.ac file regarding the blas library.
	  Now it searches first for "-lblas" and then for "-lblas -lg2c".
	  The reason is that Intel is not offering any more the mkl libraries
	  for free, and I have not been able of using version 8 of the compiler
	  with my old mkl libraries. So I decided to use the normal blas and lapack
	  libraries that are installed in any Linux system. Since they are compiled
	  with gcc, you need the library g2c to link them from Fortran (in my
	  system, libg2c.a is in /usr/lib/gcc-lib/i386-redhat-linux/3.2/libg2c.a).
	  I kept first a normal search for the blas library to be used in other
	  systems, and then a search for the joint libblas.a libg2c.a stuff.
	  In the middle I had to put a strange line (unset ac_cv_lib_blas_ddot)
	  which was the only way that I found to make it work. But I am not
	  familiar with configure.ac languange, so if any of you takes a look
	  and sees a better way to do it...

2004-04-16  micael

	* [r767] trunk/src/states.F90:
	  *) Small bug fixed.

2004-04-11  marques

	* [r766] trunk/src/crystal.F90, trunk/src/geometry.F90, trunk/src/mesh_create.F90:
	  Small changes to make octopus compile on the alphas.
	* [r765] trunk/src/specie.F90, trunk/src/xyz_file.F90:
	  Label was not long enough for usdef potentials.

2004-04-01  rozzi

	* [r764] trunk/src/epot.F90:
	  bug fixed: fft were allocated even for a potential calulated in real space

2004-04-01  marques

	* [r763] trunk/src/geometry.F90, trunk/src/xyz_file.F90:
	  A couple of bug fixes...

2004-04-01  rozzi

	* [r762] trunk/src/mesh_create.F90:
	  bug fixed in calculation of volume per point

2004-03-31  rozzi

	* [r761] trunk/src/geometry.F90:
	  bug fixed
	* [r760] trunk/src/crystal.F90, trunk/src/epot.F90, trunk/src/ps.F90:
	  bug fixed

2004-03-31  marques

	* [r759] trunk/src/ps.F90:
	  modg(0) was not initialized in get_splines_tm_fourier, which caused an error of the GSL. I
	  took the opportunity to clean a bit the routine. By the way, naming an array int(i) is a
	  bit unfortunate ;)
	* [r758] trunk/src/atoms_magnet.F90, trunk/src/choose_st.F90, trunk/src/epot.F90,
	  trunk/src/excitations.F90, trunk/src/opt_control.F90, trunk/src/ps.F90, trunk/src/run.F90,
	  trunk/src/scf.F90, trunk/src/states.F90, trunk/src/states_kpoints.F90,
	  trunk/src/systm.F90, trunk/src/unocc.F90:
	  Simplified a bit the routine states_choose_kpoints. I had to pass geo to a couple of
	  routines to make it work. Carlo, so check out this one ;)
	* [r757] trunk/share/PP/defaults:
	  I decided to be a bit more conservative... but someone should do serious testing and
	  trying to converge this numbers to better than 0.1 eV.
	* [r756] trunk/src/atoms_magnet.F90, trunk/src/centergeom.F90, trunk/src/geometry.F90,
	  trunk/src/mesh.F90, trunk/src/mesh_create.F90, trunk/src/specie.F90,
	  trunk/src/specie1D.F90, trunk/src/specie3D.F90, trunk/src/systm.F90:
	  Minimalist inpits seem to work. I will still do a couple more testes.
	  Enjoy and correct any bugs that may have appeared ;)
	* [r755] trunk/share/PP/Makefile.am, trunk/share/PP/defaults:
	  Added defaults for some pseudopotentials. Please change/add this file with your own
	  experience. The values here should be "reasonable".

2004-03-29  rozzi

	* [r754] trunk/src/crystal.F90:
	  nothing relevant
	* [r753] trunk/src/poisson3D.F90:
	  bug fixed: the usual trick to get rid of those
	  1.0e-16 errors in mesh comparisons

2004-03-29  marques

	* [r752] trunk/src/Makefile.am, trunk/src/atom.F90, trunk/src/atoms_magnet.F90,
	  trunk/src/epot.F90, trunk/src/excitations.F90, trunk/src/geom_opt.F90,
	  trunk/src/geometry.F90, trunk/src/h.F90, trunk/src/lcao.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/poisson.F90, trunk/src/poisson3D.F90,
	  trunk/src/run.F90, trunk/src/systm.F90, trunk/src/td.F90, trunk/src/xyzanim.F90:
	  box=minimum is working again. I had to shuffle things around a bit to go aroud
	  dependencies in F90, but I think this box is worth it. It doesn't work with absorbing
	  boundary conditions, though :(

2004-03-29  rozzi

	* [r751] trunk/src/atom.F90:
	  initial density is summed over atoms in neighour cells (for periodic)
	* [r750] trunk/src/global.F90:
	  backward compatibility for names of POissonSolver
	* [r749] trunk/src/run.F90:
	  bug fixed: kpoints were lost in run mode 3
	* [r748] trunk/src/states.F90:
	  removed an old variable

2004-03-28  marques

	* [r747] trunk/src/lcao.F90, trunk/src/scf.F90, trunk/src/tm.F90:
	  few aestetical changes necessary for my OAT to work. Please do not use continuation lines
	  (i.e. &) in the definition of types!

2004-03-25  marques

	* [r746] trunk/src/xyz_adjust.F90, trunk/src/xyz_file.F90:
	  These two new files were missing. xyz_file handles loading geomtries, and xyz_adjust, as
	  its name indicates, does the work necessary for the oct-center-geom program.
	* [r745] trunk/doc/octopus.dvi, trunk/doc/octopus.info, trunk/doc/octopus.info-3,
	  trunk/doc/octopus.texi:
	  Added information about the utility oct-center-geom
	* [r744] trunk/src/Makefile.am, trunk/src/atoms_magnet.F90, trunk/src/centergeom.F90,
	  trunk/src/geometry.F90, trunk/src/global.F90, trunk/src/math.F90, trunk/src/systm.F90,
	  trunk/src/xyzanim.F90:
	  Considerably changed the way of initializing the geometry.

2004-03-25  rozzi

	* [r743] trunk/src/epot.F90:
	  *) cutoff variables made local
	  *) db is used to calculate cutoff radius, for consistency with poisson
	* [r742] trunk/src/poisson3D.F90:
	  fixed last generated bugs :)
	* [r741] trunk/src/poisson.F90:
	  bug fixed in input logic
	* [r740] trunk/src/global.F90:
	  added names for poisson solvers
	* [r739] trunk/src/eigen.F90:
	  for compatibility to poisson methods cg is renumbered 4

2004-03-24  rozzi

	* [r738] trunk/src/epot.F90:
	  bug fix in deallocation of phases for periodic nonlocal potential
	* [r737] trunk/src/poisson3D.F90:
	  added two new cutoffs for the Hartree potential
	* [r736] trunk/src/poisson.F90:
	  *) added two new cutoff solvers
	  *) NB: now the methods using fft are numbered according to the number
	  of periodic dimensions. I am going to put names for that.

2004-03-24  marques

	* [r735] trunk/src/liboct.F90:
	  Code now compiles. ;)

2004-03-24  rozzi

	* [r734] trunk/src/states_kpoints.F90:
	  some comments were erroneously left in
	* [r733] trunk/src/epot.F90:
	  *) cutoffs implemented for 0, 1, and 2 periodic directions
	  *) calls splines to calc cutoff potential
	* [r732] trunk/src/fftw3.F90:
	  Optimization is performed only for nonperiodic systems. Only temporary
	* [r731] trunk/src/fftw2.F90:
	  optimization is performed only for nonperiodic systems. Only temporary
	* [r730] trunk/src/crystal.F90:
	  New module to implement Monkhorst-Pack in the reduced Brillouin Zone (thanks Angel)
	* [r729] trunk/src/liboct.F90:
	  addedd interface to some gsl Bessel functions
	* [r728] trunk/src/Makefile.am:
	  added references to new module crystal
	* [r727] trunk/src/math.F90:
	  added shosrtcuts to the fourier space cutoff functions
	* [r726] trunk/src/mesh.F90:
	  box *exactly* doubled in periodic dir. Meybe I'll change this again later
	* [r725] trunk/src/ps.F90:
	  added subroutine get_splines_tm_fourier to calculate splines for the localized
	  part of the TM pesudopotential in reciprocal space
	  NB: only for TM psudo
	* [r724] trunk/src/mesh_create.F90:
	  bugs fixed
	* [r723] trunk/src/specie.F90:
	  added function specie_get_local_fourier that calculates the localized
	  part of *the potential in Fourier space using splines
	* [r722] trunk/src/states_kpoints.F90:
	  The new module crystal is used
	  Some bugs are fixed.
	  The geometry has to be read here 'by hand'.
	* [r721] trunk/src/states.F90:
	  some bugs fixed
	* [r720] trunk/liboct/oct_gsl_f.c:
	  addedd interface to some other Bessel functions

2004-03-23  marques

	* [r719] trunk/src/states_inc.F90:
	  Changed subroutine name.

2004-03-21  marques

	* [r718] trunk/src/states.F90:
	  Bug found by WangFeng in the calculation of the current fixed.

2004-03-15  micael

	* [r717] trunk/src/epot.F90, trunk/src/f_inc.F90, trunk/src/h.F90, trunk/src/h_inc.F90,
	  trunk/src/mix.F90, trunk/src/scf.F90, trunk/src/states.F90, trunk/src/states_inc.F90:
	  *) Current DFT implemented for ground state calculations. Warning: It still needs to
	  be tested properly.

2004-03-14  marques

	* [r716] trunk/src/cf.F90, trunk/src/f.F90, trunk/src/f_inc.F90, trunk/src/out.F90,
	  trunk/src/states_inc.F90:
	  Changed the way of calculating the ELF. Now it should be more precise.
	  There is now an ELF in momentum space ;)

2004-03-10  marques

	* [r715] trunk/src/atom.F90, trunk/src/atomic.F90, trunk/src/eigen.F90,
	  trunk/src/eigen_cg2.F90, trunk/src/eigen_plan.F90, trunk/src/epot.F90,
	  trunk/src/epot_inc.F90, trunk/src/geom_opt.F90, trunk/src/geometry.F90,
	  trunk/src/global.F90, trunk/src/global.h, trunk/src/h.F90, trunk/src/h_inc.F90,
	  trunk/src/h_xc_OEP.F90, trunk/src/lcao.F90, trunk/src/linalg_basic_blas.F90,
	  trunk/src/linear.F90, trunk/src/math_inc.F90, trunk/src/mesh.F90,
	  trunk/src/opt_control.F90, trunk/src/out_inc.F90, trunk/src/pes.F90,
	  trunk/src/pes_mask.F90, trunk/src/pes_rc.F90, trunk/src/phonons.F90, trunk/src/ps.F90,
	  trunk/src/scf.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/static_pol.F90, trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_exp.F90,
	  trunk/src/td_exp_split.F90, trunk/src/td_rti.F90, trunk/src/td_write.F90,
	  trunk/src/tm.F90, trunk/src/unocc.F90, trunk/src/xc_GGA.F90, trunk/src/xc_OEP_SIC.F90,
	  trunk/src/xc_OEP_x.F90:
	  Beautification of the code, following a distant hope to solve a segfault that did not work
	  at the end. But I could not leave the better indented code in my PC without sharing it
	  with you ;)

2004-03-09  acastro

	* [r714] trunk/doc/octopus-faq.info:
	  Added the octopus-faq.info to the distribution, in the same way that
	  octopus.info is in it. The reason is that otherwise the "make" command
	  will try to generate it, and unfortunately it crashes very often due
	  to the very old versions of the texinfo package that are installed in
	  lots of compilers. This way the code will compile without problems
	  even if texinfo is not there or does not work properly.

2004-03-04  marques

	* [r713] trunk/doc/octopus.dvi, trunk/doc/octopus.info, trunk/doc/octopus.info-1,
	  trunk/doc/octopus.info-2, trunk/doc/octopus.info-3, trunk/doc/octopus.texi:
	  added information about compiler options.
	* [r712] trunk/src/global.F90:
	  The NAG compiler didn't like these lines.

2004-03-04  micael

	* [r711] trunk/src/tm.F90:
	  *) Bug fixed: there was a "," instead of a ".".
	* [r710] trunk/doc/octopus.info, trunk/doc/octopus.info-1, trunk/doc/octopus.info-2,
	  trunk/doc/octopus.info-3, trunk/doc/octopus.texi:
	  *) There is now the option to choose the spin-polarization of the guess density
	  and even to make it completely non-collinear.
	* [r709] trunk/src/atom.F90, trunk/src/geometry.F90, trunk/src/run.F90:
	  *) There is now the option to choose the spin-polarization of the guess density
	  and even to make it completely non-collinear.
	* [r708] trunk/src/atoms_magnet.F90, trunk/src/scf.F90:
	  *) Bug fixed: there was a minus sign missing in the y component of the magnetization
	  vector.

2004-03-04  marques

	* [r707] trunk/src/Makefile.am, trunk/src/broad.F90, trunk/src/choose_st.F90,
	  trunk/src/geometry.F90, trunk/src/global.F90, trunk/src/h_xc_OEP.F90, trunk/src/hgh.F90,
	  trunk/src/linear.F90, trunk/src/main.F90, trunk/src/opt_control.F90,
	  trunk/src/out_inc.F90, trunk/src/ps.F90, trunk/src/pulpo.F90, trunk/src/run.F90,
	  trunk/src/scf.F90, trunk/src/spectrum.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/td_write.F90, trunk/src/tm.F90, trunk/src/units.F90, trunk/src/xc_OEP_SIC.F90:
	  The code now compiles and runs in the SP4
	  *) Got rid of the overloading of the strcat operator
	  *) conf now has 3 extra variables descriving the share, version, and build time
	  *) small bug in SIC corrected (the correlation energy was wrong)

2004-03-02  micael

	* [r706] trunk/src/lcao.F90:
	  *) Bug fixed: the public statement in lcao.F90 was wrong.
	* [r705] trunk/src/Makefile.am, trunk/src/atoms_magnet.F90:
	  *) I added a small utility to calculate the local magnetization around each atom.
	* [r704] trunk/src/xyzanim.F90:
	  *) Some small bug fixes.

2004-03-02  marques

	* [r703] trunk/src/Makefile.am, trunk/src/atom.F90, trunk/src/broad.F90,
	  trunk/src/choose_st.F90, trunk/src/eigen.F90, trunk/src/eigen_plan.F90,
	  trunk/src/epot.F90, trunk/src/epot_inc.F90, trunk/src/f.F90, trunk/src/f_inc.F90,
	  trunk/src/fftw3.F90, trunk/src/geometry.F90, trunk/src/global.F90, trunk/src/h.F90,
	  trunk/src/h_inc.F90, trunk/src/h_xc_OEP.F90, trunk/src/hgh.F90, trunk/src/hs_from_acc.F90,
	  trunk/src/hs_from_mult.F90, trunk/src/lasers.F90, trunk/src/lcao.F90,
	  trunk/src/liboct.F90, trunk/src/liboct_parser.F90, trunk/src/linear.F90,
	  trunk/src/math_inc.F90, trunk/src/mesh.F90, trunk/src/mesh_create.F90, trunk/src/mix.F90,
	  trunk/src/opt_control.F90, trunk/src/phonons.F90, trunk/src/poisson2D.F90,
	  trunk/src/poisson3D.F90, trunk/src/ps.F90, trunk/src/pulpo.F90, trunk/src/run.F90,
	  trunk/src/scf.F90, trunk/src/specie.F90, trunk/src/specie3D.F90, trunk/src/spectrum.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/states_kpoints.F90,
	  trunk/src/strength_function.F90, trunk/src/systm.F90, trunk/src/td_calc.F90,
	  trunk/src/td_exp.F90, trunk/src/td_exp_split.F90, trunk/src/td_init.F90,
	  trunk/src/td_rti.F90, trunk/src/td_write.F90, trunk/src/tm.F90, trunk/src/vxc.F90,
	  trunk/src/xc_GGA.F90, trunk/src/xc_OEP_SIC.F90, trunk/src/xc_OEP_x.F90,
	  trunk/src/xc_pot.F90, trunk/src/xyzanim.F90:
	  Incipient support for the METRIS library
	  Changes to make octopus compile without warnings in the absoft 64 bit compiler.
	* [r702] trunk/configure.ac, trunk/liboct/oct_f.c:
	  Incipient support for the METRIS library

2004-03-01  marques

	* [r701] trunk/src/main.F90:
	  trivial bug corrected.
	* [r700] trunk/liboct/Makefile.am, trunk/liboct/config.h.in, trunk/liboct/liboct_parser.h,
	  trunk/liboct/parse.c, trunk/liboct/parse_exp.c, trunk/liboct/parser.h,
	  trunk/liboct/parser_f.c, trunk/src/liboct_parser.F90:
	  Little reordering of the parser library, to make it easier to have the parser as a
	  stand-alone library.

2004-02-27  acastro

	* [r699] trunk/src/run.F90, trunk/src/unocc.F90:
	  Fixed a bug related to the magnetizations when calculation of unoccupied
	  states was made for a spinors case.

2004-02-26  acastro

	* [r698] trunk/src/atom.F90:
	  Bug fixed.
	  In the SG machines, not initialized variables may have non-null values,
	  and this was causing problems in "atom_density".

2004-02-25  acastro

	* [r697] trunk/src/epot.F90, trunk/src/geometry.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90:
	  Bug fixed.
	  The code crashed now when a pseudopotential with non-linear core correction
	  was used.
	  Besides that, some minor stuff.

2004-02-25  micael

	* [r696] trunk/src/mix.F90:
	  *) Mixing the components of the density/potential alltogether is now the default
	  option, because mixing them independently is clearly wrong and it is the cause
	  of many convergence problems. If nobody objects nor find a problem with this,
	  I will remove the older option in the near future.
	  *) Weigths in the mixing are gone, since they appear to be useless.

2004-02-24  acastro

	* [r695] trunk/src/epot.F90:
	  Solved one small performance problem: when the non local external potential
	  had to be built at each time step, the KB spheres were built once
	  for every operator (after my last changes) and it is necessary only
	  once per atom.

2004-02-23  acastro

	* [r694] trunk/src/epot.F90, trunk/src/epot_inc.F90:
	  Solved a memory leak related to the non local operators, that appeared
	  when the ions were allowed to move.
	  Note that now the code is a bit slower than before, due to a couple
	  of reasons that I have to solve in the next days, hopefully (especially
	  when the ions are allowed to move)

2004-02-21  micael

	* [r693] trunk/src/atom.F90, trunk/src/geometry.F90:
	  *) Some reorganization.
	  *) Bug fixed in the calculation of the lcao density.
	* [r692] trunk/src/eigen_cg3.F90:
	  *) Bug fixed in subroutine eigen_cg3 related to a blas call.
	* [r691] trunk/src/centergeom.F90:
	  *) "implicit none" was missing in utility centergeom. Because of that there were some
	  bug.

2004-02-20  acastro

	* [r690] trunk/share/util/mf.cfg, trunk/share/util/mf.net:
	  By popular demand, two isosurfaces can be plotted at the same time, so that
	  the positive and negative part of a wavefunction may be plotted.

2004-02-20  micael

	* [r689] trunk/src/mix.F90:
	  *) User can now choose to mix the density/potential components independently or not
	  using input option "MixComponentsIndep". It is also possible to set weigths for
	  each component when not mixing then independently.
	* [r688] trunk/src/geometry.F90:
	  (Sorry, I forgot this file...)
	  
	  Lots of cleanning...
	  *) There is now a new structure called geometry wich includes the atoms and the species
	  *) Cleaned the arguments of many subroutines. Now only the relevant structures are passed.
	  *) Moved routines get_wf and lcao_dens from lcao.F90 to atom.F90 and geometry.F90. It
	  makes
	  more sense.
	  
	  There are still some things that need to be done, like deciding were and how to use the
	  system
	  structure.
	* [r687] trunk/samples/inp:
	  *) I changed the sample input file by mistake...
	* [r686] trunk/samples/inp, trunk/src/Makefile.am, trunk/src/atom.F90,
	  trunk/src/centergeom.F90, trunk/src/eigen.F90, trunk/src/eigen_cg2.F90,
	  trunk/src/eigen_cg3.F90, trunk/src/eigen_plan.F90, trunk/src/epot.F90,
	  trunk/src/epot_inc.F90, trunk/src/geom_opt.F90, trunk/src/h.F90, trunk/src/h_inc.F90,
	  trunk/src/h_so.F90, trunk/src/h_xc_OEP.F90, trunk/src/lcao.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/opt_control.F90, trunk/src/phonons.F90,
	  trunk/src/run.F90, trunk/src/scf.F90, trunk/src/states.F90, trunk/src/static_pol.F90,
	  trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_exp.F90,
	  trunk/src/td_exp_split.F90, trunk/src/td_init.F90, trunk/src/td_rti.F90,
	  trunk/src/td_write.F90, trunk/src/unocc.F90, trunk/src/xyzanim.F90:
	  Lots of cleanning...
	  *) There is now a new structure called geometry wich includes the atoms and the species
	  *) Cleaned the arguments of many subroutines. Now only the relevant structures are passed.
	  *) Moved routines get_wf and lcao_dens from lcao.F90 to atom.F90 and geometry.F90. It
	  makes
	  more sense.
	  
	  There are still some things that need to be done, like deciding were and how to use the
	  system
	  structure.

2004-02-19  acastro

	* [r685] trunk/src/atom.F90, trunk/src/eigen.F90, trunk/src/eigen_cg2.F90,
	  trunk/src/eigen_cg3.F90, trunk/src/eigen_plan.F90, trunk/src/epot.F90,
	  trunk/src/epot_inc.F90, trunk/src/h_inc.F90, trunk/src/h_so.F90, trunk/src/h_xc_OEP.F90,
	  trunk/src/lcao.F90, trunk/src/td_calc.F90, trunk/src/td_exp.F90,
	  trunk/src/td_exp_split.F90, trunk/src/td_rti.F90:
	  Removed the nonlocal projectors from the atom structure and put it
	  in the form of a "nonlocal_op" structure in the Hamiltonian.
	  This means that "sys" has no longer to be passed to everywhere.
	  I have *not* made the work of looking carefully where sys can be
	  removed from the interface yet; I have only done that for the subroutines
	  in h_inc. For example, it can be also removed from td_exp, probably td_rti,
	  scf_run, and many others. This I will do later...

2004-02-12  acastro

	* [r684] trunk/src/static_pol.F90:
	  Bug fixed.
	  Description: Cannot put a "/" symbol in the format descriptor of a write
	  command to a string (it seems).

2004-02-12  marques

	* [r683] trunk/src/epot_inc.F90, trunk/src/scf.F90:
	  I think I found the memory leak.
	* [r682] trunk/share/util/Makefile.am:
	  Forgot to add README to the files in the distribution.
	* [r681] trunk/src/global.F90:
	  Stupid and annoying bug in global_init corrected.

2004-02-11  acastro

	* [r680] trunk/src/scf.F90:
	  Bug fixed.
	  m_z component of magnetization vector was twice as it should be.

2004-02-11  marques

	* [r679] trunk/share/util/README:
	  Added a README file explaining where to get openDX, etc.

2004-02-10  marques

	* [r678] trunk/src/td.F90:
	  There was a bug in the calculation of the triplets. I hope it now works.

2004-02-10  micael

	* [r677] trunk/src/global.F90, trunk/src/td.F90:
	  *) New input option: TDDeltaStrengthMode.
	  - TDDeltaStrengthMode = 1 is the usual mode,
	  - TDDeltaStrengthMode = 2 aplies a kick to the wavefunctions with oposite signs
	  depending on the spin of the state.
	  - TDDeltaStrengthMode = 3 is a combination of the previous two and should only
	  be used when you have a spin-unpolarized ground state.

2004-02-10  marques

	* [r676] trunk/src/out_inc.F90:
	  Also the other output modes know about single and double precision.
	* [r675] trunk/src/out.F90, trunk/src/out_inc.F90, trunk/src/states_inc.F90:
	  *) Bug corrected in writing/reading formatted/unformatted restart
	  *) NetCDF output can now be in single or double precision controlled by the variable
	  OutputSinglePrec. This makes the files half the size.

2004-02-09  acastro

	* [r674] trunk/src/epot_inc.F90, trunk/src/h.F90, trunk/src/h_inc.F90,
	  trunk/src/h_xc_OEP.F90, trunk/src/lcao.F90, trunk/src/opt_control.F90, trunk/src/run.F90,
	  trunk/src/scf.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/states_kpoints.F90, trunk/src/static_pol.F90, trunk/src/td_exp.F90,
	  trunk/src/td_exp_split.F90, trunk/src/td_rti.F90, trunk/src/td_write.F90,
	  trunk/src/unocc.F90, trunk/src/xc_GGA.F90, trunk/src/xc_LDA.F90, trunk/src/xc_OEP_SIC.F90,
	  trunk/src/xc_pot.F90:
	  Lots of files, but it is just some variable reorganization. Hope it
	  is cleaner now.
	* [r673] trunk/src/fftw2.F90:
	  Some preprocessors complain when they encounter " within Fortran 90 comments.
	  It is safer to surround the comments by /* */ as in C.

2004-02-09  marques

	* [r672] trunk/src/global.F90, trunk/src/scf.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90:
	  Octopus can now read/write formatted/unformatted files. This is controlled by the variable
	  RestartFileFormat.

2004-02-07  marques

	* [r671] trunk/doc/octopus.dvi, trunk/doc/octopus.info, trunk/doc/octopus.info-1,
	  trunk/doc/octopus.info-2, trunk/doc/octopus.texi:
	  Changed the order of 2 sections.
	* [r670] trunk/build/acx.m4, trunk/configure.ac, trunk/doc/octopus.dvi,
	  trunk/doc/octopus.info, trunk/doc/octopus.info-1, trunk/doc/octopus.info-2,
	  trunk/doc/octopus.info-3, trunk/doc/octopus.texi, trunk/liboct/parse.c,
	  trunk/liboct/parser.h, trunk/liboct/parser_f.c, trunk/liboct/symbols.c, trunk/samples/inp,
	  trunk/src/atomic.F90, trunk/src/global.F90, trunk/src/liboct_parser.F90,
	  trunk/src/poisson.F90, trunk/src/poisson3D.F90, trunk/src/td_exp.F90:
	  *) Blocks in inp file now accept tabs to separate columns (\t = '|')
	  *) Parser parameters can now be set from the code (see global_init_symbols)
	  *) A lot of new parser parameters defined.
	  *) WARNING: Due to all of the above, and to have consistent variables, I had to change the
	  input options TDExponentialMethod and PoissonSolver.
	  *) All these changes are now reflected in the samples/inp and in the manual

2004-02-06  acastro

	* [r669] trunk/src/broad.F90:
	  Bug fixed.
	  Description: The input variable LinBroadening was "LinBroadnening" instead.

2004-02-05  marques

	* [r668] trunk/liboct/string_f.c:
	  include was not the way I like it ;)

2004-02-05  acastro

	* [r667] trunk/src/fftw2.F90:
	  Bug fixed.

2004-02-04  marques

	* [r666] trunk/liboct/parser.h, trunk/liboct/parser_f.c, trunk/liboct/recipes.c,
	  trunk/liboct/string_f.c:
	  solved a couple of warnings...
	* [r665] trunk/liboct/parser_f.c, trunk/liboct/string_f.c:
	  changed comments from // to /* */
	* [r664] trunk/build/octopus.spec.in:
	  More tuning in order to make static RPM in nautilus.

2004-02-03  marques

	* [r663] trunk/build/octopus.spec.in, trunk/configure.ac, trunk/share/util/inp,
	  trunk/src/Makefile.am:
	  This makes rpm in my computer (finally)
	* [r662] trunk/build/octopus.spec.in:
	  This makes rpm in my machine.
	* [r661] trunk/Makefile.am, trunk/configure.ac:
	  Bug related to moving the util directory corrected.

2004-02-03  acastro

	* [r660] trunk/share/util/Makefile.am~:
	  Removed this emacs temporary file...
	* [r659] trunk/share/Makefile.am, trunk/share/util, trunk/share/util/Makefile.am,
	  trunk/share/util/Makefile.am~, trunk/share/util/inp, trunk/share/util/mf.cfg,
	  trunk/share/util/mf.net:
	  Changed places of files.
	* [r658] trunk/Makefile.am:
	  Bug fixed.
	  Description: the util directory was not included before in the distributions.
	* [r657] trunk/src/fftw2.F90:
	  Bug fixed.

2004-02-02  marques

	* [r656] trunk/share/PP/TM2/As.ascii, trunk/share/PP/TM2/Ga.ascii:
	  Added Hamann pseudopotentials for Galliuma nd Arsenic.

2004-01-31  micael

	* [r655] trunk/src/Makefile.am, trunk/src/adv_linalg.F90, trunk/src/adv_linalg_lapack.F90,
	  trunk/src/basic_linalg.F90, trunk/src/basic_linalg_blas.F90,
	  trunk/src/basic_linalg_int.F90, trunk/src/linalg_adv.F90, trunk/src/linalg_adv_lapack.F90,
	  trunk/src/linalg_basic.F90, trunk/src/linalg_basic_blas.F90,
	  trunk/src/linalg_basic_int.F90:
	  *) Changed the names of "linalg" files.

2004-01-30  acastro

	* [r654] trunk/src/h.F90, trunk/src/h_inc.F90:
	  Some initialization stuff (duplicating info from st in h) that was
	  previously done in h_init, is now done in h_calc_vhxc, to make sure
	  everything is all the time "synchronous".

2004-01-30  micael

	* [r653] trunk/src/basic_linalg.F90, trunk/src/basic_linalg_blas.F90,
	  trunk/src/basic_linalg_int.F90, trunk/src/eigen_cg3.F90, trunk/src/eigen_plan.F90,
	  trunk/src/f_inc.F90, trunk/src/fftw2.F90, trunk/src/fftw3.F90, trunk/src/h_inc.F90,
	  trunk/src/h_so.F90, trunk/src/lcao.F90, trunk/src/math_inc.F90, trunk/src/mf_inc.F90,
	  trunk/src/states_inc.F90, trunk/src/td_exp.F90, trunk/src/td_exp_split.F90,
	  trunk/src/xc_GGA.F90:
	  *) Fixed a lot of bugs in the new system for BLAS calls. I hope now its OK.

2004-01-30  marques

	* [r652] trunk/src/epot.F90:
	  Buus in the allocation of the non-linear core stuff when using LocalPotentialSpace=1
	* [r651] trunk/src/linear.F90:
	  missed one name.

2004-01-28  micael

	* [r650] trunk/src/Makefile.am, trunk/src/adv_linalg.F90, trunk/src/adv_linalg_lapack.F90,
	  trunk/src/basic_linalg.F90, trunk/src/basic_linalg_blas.F90,
	  trunk/src/basic_linalg_int.F90, trunk/src/eigen.F90, trunk/src/eigen_plan.F90,
	  trunk/src/f.F90, trunk/src/f_inc.F90, trunk/src/fftw2.F90, trunk/src/fftw3.F90,
	  trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/h_so.F90, trunk/src/lcao.F90,
	  trunk/src/linalg.F90, trunk/src/linalg_lapack.F90, trunk/src/linear.F90,
	  trunk/src/math.F90, trunk/src/math_inc.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90,
	  trunk/src/mix.F90, trunk/src/phonons.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/td_exp.F90, trunk/src/td_exp_split.F90, trunk/src/xc.F90, trunk/src/xc_GGA.F90,
	  trunk/src/xc_KLI.F90:
	  *) BLAS is now completely isolated.
	  *) There is now the possibility to use the f90 intrinsics instead of the BLAS.
	  *) There are now 2 levels of linear algebra routines: basic and advanced. They are
	  store respectively in modules lib_basic_alg and lib_adv_alg

2004-01-28  acastro

	* [r649] trunk/src/atom.F90, trunk/src/scf.F90, trunk/src/states.F90,
	  trunk/src/td_write.F90:
	  The molecular dipole is now written to the info file after performing
	  the ground state calculation, and not only the dipole moment of the
	  electronic cloud.
	  Also, "multipoles" files holds now the nuclear dipole.

2004-01-28  micael

	* [r648] trunk/src/lcao.F90:
	  *) Bug fixed. Array was not dealocated.
	* [r647] trunk/src/eigen_plan.F90, trunk/src/f.F90, trunk/src/mf_inc.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/td_exp.F90, trunk/src/xc.F90,
	  trunk/src/xc_GGA.F90:
	  *) I am reverting the changes I made yesterday.

2004-01-27  micael

	* [r646] trunk/src/eigen_plan.F90, trunk/src/f.F90, trunk/src/mf_inc.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/td_exp.F90, trunk/src/xc.F90,
	  trunk/src/xc_GGA.F90:
	  *) Started hiding BLAS calls.

2004-01-27  marques

	* [r645] trunk/build/acx.m4, trunk/configure.ac, trunk/src/atomic.F90, trunk/src/linalg.F90:
	  code compiles and *almost* runs in single precision.
	* [r644] trunk/src/fftw2.F90, trunk/src/fftw3.F90:
	  FFTW now is in single or double precision.
	* [r643] trunk/liboct/config.h.in, trunk/src/epot.F90, trunk/src/fftw3.F90,
	  trunk/src/lasers.F90, trunk/src/lcao.F90, trunk/src/ps.F90, trunk/src/specie.F90,
	  trunk/src/specie3D.F90, trunk/src/spline.F90:
	  Now splines are also in single precision.
	  More namespace (in)sanity.

2004-01-27  micael

	* [r642] trunk/src/linalg_lapack.F90:
	  *) Bug fixed. Two deallocate statements were in the wrong place.
	* [r641] trunk/src/Makefile.am, trunk/src/eigen_plan.F90, trunk/src/linalg.F90:
	  *) There was a BLAS interface missing
	  *) Fixed dependecies for object eigen.o in Makefile.am

2004-01-26  marques

	* [r640] trunk/src/liboct.F90:
	  stupid bug.
	* [r639] trunk/src/atom.F90, trunk/src/broad.F90, trunk/src/centergeom.F90,
	  trunk/src/choose_st.F90, trunk/src/eigen.F90, trunk/src/eigen_cg3.F90,
	  trunk/src/eigen_plan.F90, trunk/src/epot.F90, trunk/src/excitations.F90, trunk/src/f.F90,
	  trunk/src/f_inc.F90, trunk/src/fftw2.F90, trunk/src/fftw3.F90, trunk/src/geom_opt.F90,
	  trunk/src/global.F90, trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/h_so.F90,
	  trunk/src/hgh.F90, trunk/src/hs_from_acc.F90, trunk/src/hs_from_mult.F90,
	  trunk/src/lasers.F90, trunk/src/lcao.F90, trunk/src/liboct.F90,
	  trunk/src/liboct_parser.F90, trunk/src/linalg.F90, trunk/src/linear.F90,
	  trunk/src/main.F90, trunk/src/make_st.F90, trunk/src/math.F90, trunk/src/math_inc.F90,
	  trunk/src/mesh.F90, trunk/src/mesh_create.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90,
	  trunk/src/mix.F90, trunk/src/opt_control.F90, trunk/src/out.F90, trunk/src/out_inc.F90,
	  trunk/src/pes.F90, trunk/src/pes_rc.F90, trunk/src/phonon_spectrum.F90,
	  trunk/src/phonons.F90, trunk/src/poisson.F90, trunk/src/poisson3D.F90, trunk/src/ps.F90,
	  trunk/src/pulpo.F90, trunk/src/rotational_strength.F90, trunk/src/run.F90,
	  trunk/src/scf.F90, trunk/src/specie.F90, trunk/src/specie1D.F90, trunk/src/specie3D.F90,
	  trunk/src/spline.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/states_kpoints.F90, trunk/src/static_pol.F90, trunk/src/strength_function.F90,
	  trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_exp.F90, trunk/src/td_exp_split.F90,
	  trunk/src/td_init.F90, trunk/src/td_rti.F90, trunk/src/tm.F90, trunk/src/units.F90,
	  trunk/src/unocc.F90, trunk/src/vxc.F90, trunk/src/xc.F90, trunk/src/xc_GGA.F90,
	  trunk/src/xyzanim.F90:
	  namespace sanity.
	  more changes in order for octopus to run in single precision mode.

2004-01-26  micael

	* [r638] trunk/src/mesh.F90:
	  *) Small change. Replaced a sum by a dot_product.
	* [r637] trunk/src/io.F90, trunk/src/opt_control.F90:
	  *) There was some non-standart f90 code in these files.
	* [r636] trunk/src/eigen_cg2.F90, trunk/src/epot.F90:
	  *) Some more use statements...
	  *) I commented one line in epot.F90 that was giving some stupid error when
	  compiled with the new release of the Intel compiler.
	  Now the code compiles with the new release of the Intel compiler :)
	* [r635] trunk/src/mf_inc.F90, trunk/src/poisson.F90, trunk/src/ps.F90, trunk/src/pulpo.F90,
	  trunk/src/rotational_strength.F90, trunk/src/run.F90, trunk/src/scf.F90,
	  trunk/src/specie.F90, trunk/src/spectrum.F90, trunk/src/states.F90,
	  trunk/src/static_pol.F90, trunk/src/strength_function.F90, trunk/src/systm.F90,
	  trunk/src/td.F90, trunk/src/td_exp.F90, trunk/src/td_exp_split.F90, trunk/src/units.F90,
	  trunk/src/unocc.F90, trunk/src/xc.F90, trunk/src/xyzanim.F90:
	  *) More use statements... If someone spots a missing use statement, please, add it up.
	  *) Small change in mf_dotp and mf_nrm2.
	* [r634] trunk/src/h.F90, trunk/src/hgh.F90, trunk/src/hs_from_acc.F90,
	  trunk/src/hs_from_mult.F90, trunk/src/lasers.F90, trunk/src/lcao.F90,
	  trunk/src/linear.F90, trunk/src/main.F90, trunk/src/make_st.F90, trunk/src/math.F90,
	  trunk/src/mesh.F90, trunk/src/mf.F90, trunk/src/opt_control.F90, trunk/src/out.F90,
	  trunk/src/pes.F90, trunk/src/phonon_spectrum.F90, trunk/src/phonons.F90:
	  *) More use statements...

2004-01-25  micael

	* [r633] trunk/src/atom.F90, trunk/src/atomic.F90, trunk/src/broad.F90,
	  trunk/src/centergeom.F90, trunk/src/cf.F90, trunk/src/choose_st.F90, trunk/src/eigen.F90,
	  trunk/src/epot.F90, trunk/src/excitations.F90, trunk/src/f.F90,
	  trunk/src/linalg_lapack.F90, trunk/src/xc_KLI.F90:
	  *) Removed explicit call to LAPACK in xc_KLI.
	  *) Added some use statements.

2004-01-25  marques

	* [r632] trunk/liboct/config.h.in, trunk/src/atom.F90, trunk/src/broad.F90,
	  trunk/src/complex.F90, trunk/src/eigen.F90, trunk/src/eigen_cg3.F90,
	  trunk/src/eigen_plan.F90, trunk/src/f_inc.F90, trunk/src/fftw2.F90, trunk/src/fftw3.F90,
	  trunk/src/geom_opt.F90, trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/h_so.F90,
	  trunk/src/hs_from_acc.F90, trunk/src/hs_from_mult.F90, trunk/src/lcao.F90,
	  trunk/src/liboct_parser.F90, trunk/src/linalg.F90, trunk/src/linalg_lapack.F90,
	  trunk/src/linear.F90, trunk/src/math_inc.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/mf_inc.F90, trunk/src/mix.F90,
	  trunk/src/opt_control.F90, trunk/src/phonons.F90, trunk/src/real.F90,
	  trunk/src/rotational_strength.F90, trunk/src/scf.F90, trunk/src/specie.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/static_pol.F90,
	  trunk/src/strength_function.F90, trunk/src/td.F90, trunk/src/td_exp.F90,
	  trunk/src/td_exp_split.F90, trunk/src/td_init.F90, trunk/src/undef.F90,
	  trunk/src/unocc.F90, trunk/src/xc.F90, trunk/src/xc_GGA.F90:
	  Next step in making a single precision executable.
	  WARNING: there is still a lapack call in xc_KLI.F90. This will have to be changed!

2004-01-24  micael

	* [r631] trunk/src/Makefile.am, trunk/src/eigen.F90, trunk/src/eigen_plan.F90,
	  trunk/src/lcao.F90, trunk/src/linalg.F90, trunk/src/linalg_lapack.F90,
	  trunk/src/math_inc.F90, trunk/src/mix.F90, trunk/src/phonons.F90,
	  trunk/src/states_inc.F90:
	  *) There is a new file for the LAPACK-based routines.
	  *) No more LAPACK routines are called from the rest of the code directly.
	  *) Added some use statements.

2004-01-23  marques

	* [r630] trunk/src/atom.F90, trunk/src/atomic.F90, trunk/src/broad.F90, trunk/src/cf.F90,
	  trunk/src/cf_inc.F90, trunk/src/complex.F90, trunk/src/eigen.F90, trunk/src/eigen_cg2.F90,
	  trunk/src/eigen_cg3.F90, trunk/src/eigen_plan.F90, trunk/src/epot.F90,
	  trunk/src/epot_inc.F90, trunk/src/f_inc.F90, trunk/src/fftw2.F90, trunk/src/fftw3.F90,
	  trunk/src/geom_opt.F90, trunk/src/global.F90, trunk/src/global.h, trunk/src/h.F90,
	  trunk/src/h_inc.F90, trunk/src/h_so.F90, trunk/src/h_xc_OEP.F90, trunk/src/hgh.F90,
	  trunk/src/hs_from_acc.F90, trunk/src/hs_from_mult.F90, trunk/src/lasers.F90,
	  trunk/src/lcao.F90, trunk/src/liboct.F90, trunk/src/liboct_parser.F90,
	  trunk/src/linalg.F90, trunk/src/linear.F90, trunk/src/logrid.F90, trunk/src/make_st.F90,
	  trunk/src/math.F90, trunk/src/math_inc.F90, trunk/src/mesh.F90, trunk/src/mesh_create.F90,
	  trunk/src/mf_inc.F90, trunk/src/mix.F90, trunk/src/opt_control.F90, trunk/src/out_inc.F90,
	  trunk/src/pes.F90, trunk/src/pes_mask.F90, trunk/src/pes_rc.F90, trunk/src/phonons.F90,
	  trunk/src/poisson.F90, trunk/src/poisson1D.F90, trunk/src/poisson2D.F90,
	  trunk/src/poisson3D.F90, trunk/src/ps.F90, trunk/src/real.F90,
	  trunk/src/rotational_strength.F90, trunk/src/run.F90, trunk/src/scf.F90,
	  trunk/src/specie.F90, trunk/src/specie3D.F90, trunk/src/spectrum.F90,
	  trunk/src/spline.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/states_kpoints.F90, trunk/src/static_pol.F90, trunk/src/strength_function.F90,
	  trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_exp.F90,
	  trunk/src/td_exp_split.F90, trunk/src/td_init.F90, trunk/src/td_rti.F90,
	  trunk/src/td_write.F90, trunk/src/tm.F90, trunk/src/units.F90, trunk/src/unocc.F90,
	  trunk/src/vxc.F90, trunk/src/xc.F90, trunk/src/xc_GGA.F90, trunk/src/xc_KLI.F90,
	  trunk/src/xc_LDA.F90, trunk/src/xc_OEP_SIC.F90, trunk/src/xc_OEP_x.F90,
	  trunk/src/xc_pot.F90, trunk/src/xyzanim.F90:
	  Changed all real(r8), etc. into FLOAT. Also removed the r8

2004-01-23  micael

	* [r629] trunk/liboct/Makefile.am, trunk/liboct/oct_f.c, trunk/liboct/oct_gsl_f.c:
	  *) The GSL interfaces in liboct are now in an independent file.
	* [r628] trunk/configure.ac:
	  *) Bug fixed in the configure.ac file.

2004-01-23  acastro

	* [r627] trunk/src/mix.F90:
	  Bug fixed.
	  Description: in mix_end, smix should be intent(inout) if it has
	  to be deallocated (Compaq Fortran 90 compiler complains otherwise...)

2004-01-23  marques

	* [r626] trunk/src/Makefile.am:
	  Sorry, forgot to get rid of these lines that are no longer necessary.

2004-01-22  marques

	* [r625] trunk/configure.ac, trunk/src/Makefile.am, trunk/src/config.h.in:
	  *) First step in the configuration file towards building a single precision code.
	  *) Now the utilities are only generated if complex wfs, single precision, and mpi are
	  turned off. In fact, the utilities should only be generated once.

2004-01-22  micael

	* [r624] trunk/src/f.F90:
	  *) Bug fixed. An end if statement was misplaced.

2004-01-22  marques

	* [r623] trunk/src/Makefile.am:
	  epot_inc.F90 was not included in the distribution.

2004-01-22  acastro

	* [r622] trunk/src/h.F90:
	  Bug fixed.
	* [r621] trunk/src/mix.F90:
	  Sorry, I re-committed the old version of mix.F90....
	* [r620] trunk/src/eigen.F90, trunk/src/eigen_cg2.F90, trunk/src/eigen_cg3.F90,
	  trunk/src/eigen_plan.F90, trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/h_so.F90,
	  trunk/src/h_xc_OEP.F90, trunk/src/lcao.F90, trunk/src/mix.F90, trunk/src/td_calc.F90,
	  trunk/src/td_exp.F90:
	  Simplified the interface to the operator calls in the module hamiltonian.
	  Now the states_type st is no longer passed. Now all the operators have
	  an interface such as
	  subroutine x(h, m, inpsi, outpsi, [sys], [ik], [t])
	  where sys, ik and t are sometimes there. I would like to remove also
	  those three, although that will have to be thought about.

2004-01-22  micael

	* [r619] trunk/src/mix.F90:
	  First step towards Octopus 1.4... ;)
	  *) Removed BLAS stuff from module mix.

2004-01-21  marques

	* [r618] trunk/configure.ac:
	  Version is now 1.3
	* [r617] trunk/doc/Makefile.am:
	  Small bug in Makefile.am

2004-01-21  micael

	* [r616] trunk/src/fftw2.F90, trunk/src/fftw3.F90:
	  *) Bug fixed: use statement missing.
	* [r615] trunk/doc/octopus.dvi, trunk/doc/octopus.info, trunk/doc/octopus.info-1,
	  trunk/doc/octopus.info-2, trunk/doc/octopus.info-3, trunk/doc/octopus.texi,
	  trunk/samples/inp, trunk/src/scf.F90:
	  *) The name of some input options was not consistent.
	* [r614] trunk/src/scf.F90:
	  *) Bug fixed.

2004-01-13  acastro

	* [r613] trunk/src/lcao.F90:
	  Forgot to remove the "M_HALF", so the density was exactly half what it
	  should be.
	* [r612] trunk/src/out.F90:
	  Added one comment to explain what output_fill_how does, because of
	  popular demand.
	* [r611] trunk/src/lcao.F90:
	  Initial density is now built in a different way: atoms which are
	  spin polarized will create a spin-polarized density. Let us see
	  how it works...

2004-01-12  marques

	* [r610] trunk/src/states_inc.F90:
	  Small bug corrected that made the code crash in a parallel run if OutputWfns was on.

2004-01-05  acastro

	* [r609] trunk/src/epot.F90:
	  Bug fixed.
	  Description: in module epot, subroutine epot_generate, vpsl should
	  be initialized to zero before starting to add the contributions
	  from the atoms.

2004-01-03  acastro

	* [r608] trunk/src/td_rti.F90:
	  Removed one line that was there for debugging.

2003-12-23  acastro

	* [r607] trunk/doc/octopus.dvi, trunk/doc/octopus.info, trunk/doc/octopus.info-1,
	  trunk/doc/octopus.info-2, trunk/doc/octopus.info-3, trunk/doc/octopus.texi:
	  New updates to the manual.
	  It is more or less consistent now, although I think we have to do a lot
	  more work on the manual (and documentation in general) before Benasque...

2003-12-20  acastro

	* [r606] trunk/doc/octopus.dvi, trunk/doc/octopus.info, trunk/doc/octopus.info-1,
	  trunk/doc/octopus.info-2, trunk/doc/octopus.info-3, trunk/doc/octopus.texi:
	  Some updates in the manual.
	  Note: DON'T release a tagged version 1.3 yet! I am not done yet with
	  the manual. I wanted to commit because I am leaving now for Christmas. Will
	  try to commit the rest over the weekend.

2003-12-18  acastro

	* [r605] trunk/src/td_exp.F90, trunk/src/td_rti.F90:
	  Split operator and Suzuki-Trotter are now also evolution methods
	  (TDEvolutionMethod = 0, 1, respectively), as well as exponential
	  methods. This means that using them as exponential methods is somehow
	  redundant, and problably will be removed in the future. But since it
	  is not completely equivalent, let us leave them for a while.
	  
	  The reason for doing this is that I wanted to write the explanation
	  of the methods in the manual, and realized that the way it should be
	  is this one. I am not done yet with the manual, I am trying to be a bit
	  verbose.
	* [r604] trunk/src/Makefile.am, trunk/src/fftw3.F90, trunk/src/rotational_strength.F90,
	  trunk/src/spectrum.F90, trunk/src/td_write.F90:
	  * Added a new little program, oct-rsf, to calculate the complex rotational
	  strength function (whose real part is the rotatory power). It is
	  very similar to oct-sf, and is contained in new file, rotational_strength.F90
	  I am not going to document it for next release, since it is not really
	  tested, and I have done it in such a way that I have not touched previous
	  code, to avoid introducing bugs. After the release, I will reorder some
	  stuff to avoid repeated code.
	  * Removed the warning when using FFTW3. I think it is mature enough.
	* [r603] trunk/samples/inp:
	  Cleaned a bit more the "inp" file, to have something updated for the
	  release of 1.3.

2003-12-17  acastro

	* [r602] trunk/samples/inp:
	  Corrected some wrong variable names in sample file inp, as well as some
	  default values.

2003-12-15  micael

	* [r601] trunk/src/run.F90:
	  *) Bug fixed. Restarting static calculations with a finite temperature was
	  not working.

2003-12-14  marques

	* [r600] trunk/src/h_inc.F90, trunk/src/td.F90, trunk/src/td_write.F90:
	  *) Added some (commented) code in h_inc that allows the calculation of the RPA spectrum
	  *) Bug in the output of the Electronic Energy was corrected in td (units problem).

2003-12-11  marques

	* [r599] trunk/configure.ac:
	  Sorry, forgot to commit this file. Thanks to Tobias for the notice.

2003-12-11  acastro

	* [r598] trunk/src/epot.F90, trunk/src/h.F90, trunk/src/mix.F90, trunk/src/td_init.F90,
	  trunk/src/td_rti.F90:
	  * Removed all pre-initialization of variables on type definitions
	  (such as "type(x), pointer :: x => NULL()", or "integer :: a = 0")
	  due to two reasons:
	  (i) It is not standard Fortran 90, and we have some users using the
	  Portland compiler which does not have that as an extension.
	  (ii) Besides that, it seems that it is not currenly well implemented
	  in the ifc version of my PC cluster here, because after it was causing a strange
	  memory error.
	  
	  * In td_rti, some call to calc_vhxc was asking for the recalculation of
	  the eigenvalues. For the rest of the calls, I think that it is necessary
	  to recalculate them.

2003-12-10  acastro

	* [r597] trunk/src/h.F90, trunk/src/out.F90, trunk/src/out_inc.F90,
	  trunk/src/states_inc.F90:
	  * Subroutine output_function does not need as an input the full derived
	  data type output_type, only the integer "how".
	  
	  * I added an integer function "output_fill_how" to build this "how" number
	  from a string. If that string contains the substring "AxisX", "PlaneY",
	  "DX", etc, it builds the how accordingly. That is:
	  
	  how = output_fill_how("AxisXDX")
	  
	  will build a how integer that, when passed to "output_function", would
	  request the printing of the x axis and of the dx data. This permits a fast
	  way to print functions, for example:
	  
	  call doutputfunction(output_fill_how("AxisX_and_DX"), ".", "f", m, f, M_ONE)
	* [r596] trunk/src/Makefile.am:
	  Bug fixed.
	  Description: compilation of "oct-geomcenter" did not work in kadesh..
	* [r595] trunk/src/Makefile.am:
	  Bug fixed.
	  Description: I added the liboct.F90 source to the x_SOURCES line for some
	  of the auxiliary programs. It seems that the xlf90 compiler in kadesh needs it.

2003-12-09  marques

	* [r594] trunk/doc/octopus.info, trunk/doc/octopus.info-1, trunk/doc/octopus.info-2,
	  trunk/doc/octopus.texi:
	  small bug in the documentation also
	* [r593] trunk/src/Makefile.am, trunk/src/eigen_cg2.F90, trunk/src/eigen_cg3.F90,
	  trunk/src/geom_opt.F90, trunk/src/h_inc.F90, trunk/src/h_xc_OEP.F90, trunk/src/lasers.F90,
	  trunk/src/opt_control.F90, trunk/src/out.F90, trunk/src/phonons.F90, trunk/src/run.F90,
	  trunk/src/scf.F90, trunk/src/td.F90, trunk/src/td_rti.F90, trunk/src/xc.F90,
	  trunk/src/xc_KLI.F90, trunk/src/xc_OEP_SIC.F90, trunk/src/xc_OEP_x.F90,
	  trunk/src/xc_pot.F90:
	  *) OEP seems to work for a 1D system. It is a bit clumsy still.
	  *) changed order of calculation in calc_vhxc
	  *) Bug corrected in Lasers (Mode=10 didn't work so well)

2003-12-04  acastro

	* [r592] trunk/src/math_inc.F90:
	  CRAY compiler does not accept lines longer that 132 characters...
	* [r591] trunk/src/mesh.F90:
	  Stupid CRAY compiler did not like that line.

2003-12-03  marques

	* [r590] trunk/src/xc_KLI_SIC.F90, trunk/src/xc_KLI_x.F90:
	  Forgot to remove these 2 files.
	* [r589] trunk/src/h_xc_OEP.F90, trunk/src/xc_OEP_SIC.F90, trunk/src/xc_OEP_x.F90:
	  Files xc_KLI_[x|SIC] where renamed to xc_OEP_[x|SIC].
	* [r588] trunk/src/Makefile.am, trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/xc.F90,
	  trunk/src/xc_KLI.F90, trunk/src/xc_pot.F90:
	  Changed a couple of things to pave the way for the full OEP solution.
	  On the way, I added the possibility of running OEP within Slater's approximation (can we
	  now say that octopus performs somekind of Hartree-Fock calculations, now?)

2003-12-03  micael

	* [r587] trunk/src/mix.F90:
	  *) GR-Pulay mixing now works for non-colinear spin calculations.

2003-12-03  acastro

	* [r586] trunk/src/td_rti.F90:
	  Bug fixed.
	* [r585] trunk/src/math_inc.F90, trunk/src/td_rti.F90:
	  Removed subroutine "xpolate_pot" from td_rti, and built X(extrapolate)
	  in math_inc, where it makes more sense. It is able now to extrapolate
	  /interpolate to orders 1-4, instead of only 2 as before.

2003-12-02  acastro

	* [r584] trunk/src/h_inc.F90, trunk/src/td_exp.F90, trunk/src/td_rti.F90:
	  Added the Magnus (4th order) propagation algorithm. It may be useful
	  when very high frequencies are present. The option is TDEvolutionMethod=5
	  (I will change the manual... sometime.)
	  By the way, it is incompatible with the split-operator or Suzuki-Trotter
	  exponential methods. In fact I think I will move those "exponential methods"
	  to be "propagator methods".

2003-12-02  marques

	* [r583] trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/lasers.F90,
	  trunk/src/opt_control.F90, trunk/src/scf.F90, trunk/src/td_exp_split.F90:
	  h%vhartree and h%vxc are gone. One the way I corrected a couple of bugs.
	  There may be some problem if one uses cg to solve the poisson equation, for now we don't
	  have access to the old potential. As nobody is using it right now, we'll think about this
	  later...
	* [r582] trunk/src/Makefile.am, trunk/src/epot.F90, trunk/src/epot_inc.F90,
	  trunk/src/geom_opt.F90, trunk/src/h.F90, trunk/src/h_external_pot.F90,
	  trunk/src/h_forces.F90, trunk/src/h_inc.F90, trunk/src/opt_control.F90,
	  trunk/src/phonons.F90, trunk/src/run.F90, trunk/src/scf.F90, trunk/src/td.F90,
	  trunk/src/td_calc.F90, trunk/src/td_exp_split.F90, trunk/src/td_init.F90,
	  trunk/src/td_write.F90:
	  *) I broke the hamiltonian module in 2 parts, hamiltonian, and external_pot
	  *) removed some commented code from td_calc (it didn't compile anyway)

2003-12-02  acastro

	* [r581] trunk/src/td_rti.F90:
	  * Now the two first iterations of the evolution are performed
	  "self consistently"; that is, they are repeated until the potential
	  at time t+dt does not change (much). Before they were performed with
	  the method that did not require extrapolation.
	  * The "old reversal method", one of the last heritages of the old code,
	  is gone. Nobody uses it, it has a very unclear theoretical foundation,
	  and does not perform better than, say, the exponential midpoint rule.

2003-12-02  micael

	* [r580] trunk/src/geom_opt.F90, trunk/src/h.F90, trunk/src/h_inc.F90,
	  trunk/src/opt_control.F90, trunk/src/phonons.F90, trunk/src/run.F90, trunk/src/scf.F90,
	  trunk/src/td.F90, trunk/src/td_rti.F90:
	  *) Combined subroutines hamiltonian_setup and calcvhxc into a single
	  subroutine named h_calc_vhxc.

2003-12-01  acastro

	* [r579] trunk/src/states_inc.F90, trunk/src/td_write.F90:
	  Bug fixed.
	  Description: the calculation of the angular momentum of the system in
	  parallel did not work.

2003-12-01  micael

	* [r578] trunk/doc/octopus.info, trunk/doc/octopus.info-1, trunk/doc/octopus.info-2,
	  trunk/doc/octopus.texi, trunk/samples/inp, trunk/src/linalg.F90, trunk/src/mix.F90:
	  *) Added a new mixing scheme: GR-Pulay. It seems better than Broyden in
	  certain cases and does not require any parameter. When using it, you can
	  (should?) use a bigger number of steps to extrapolate the new density/potential.
	  NOTE: for now it DOES NOT work with non-colinear-spin.
	  *) Rewrote mixing module to allow some other changes in the near future...

2003-12-01  marques

	* [r577] trunk/doc/octopus.info, trunk/doc/octopus.info-1, trunk/doc/octopus.info-2,
	  trunk/doc/octopus.texi:
	  Manual now reflects the changes in the xc part of the code.
	* [r576] trunk/src/atom.F90, trunk/src/specie.F90:
	  Code didn't compile in my machine.

2003-12-01  acastro

	* [r575] trunk/src/td.F90, trunk/src/td_exp_split.F90, trunk/src/td_rti.F90:
	  Bug fixed.
	  Description: Since some daysm, the application of the Hamiltonian is done
	  considering h%vhxc, and not h%vh or h%vxc individually. The routines in
	  td_rti were not considering this, so there was an inconsistency. The error
	  was numerically small. Anyway it looks much nicer now.
	  Comment: h%vhartree and h%vxc are now never used outside hamiltonian_setup,
	  in order to properly calculate the KS energy.
	  Maybe we can think about removing them from h...

2003-11-28  marques

	* [r574] trunk/src/Makefile.am, trunk/src/atom.F90, trunk/src/atomic.F90,
	  trunk/src/broad.F90, trunk/src/centergeom.F90, trunk/src/cf.F90, trunk/src/cf_inc.F90,
	  trunk/src/choose_st.F90, trunk/src/complex.F90, trunk/src/config.h.in,
	  trunk/src/eigen.F90, trunk/src/eigen_cg2.F90, trunk/src/eigen_cg3.F90,
	  trunk/src/eigen_plan.F90, trunk/src/excitations.F90, trunk/src/f.F90,
	  trunk/src/geom_opt.F90, trunk/src/global.F90, trunk/src/global.h, trunk/src/h.F90,
	  trunk/src/h_forces.F90, trunk/src/h_inc.F90, trunk/src/hgh.F90, trunk/src/hs_from_acc.F90,
	  trunk/src/hs_from_mult.F90, trunk/src/lasers.F90, trunk/src/lcao.F90,
	  trunk/src/liboct.F90, trunk/src/liboct_parser.F90, trunk/src/linalg.F90,
	  trunk/src/linear.F90, trunk/src/logrid.F90, trunk/src/main.F90, trunk/src/make_st.F90,
	  trunk/src/math.F90, trunk/src/math_inc.F90, trunk/src/mesh.F90, trunk/src/mix.F90,
	  trunk/src/opt_control.F90, trunk/src/out.F90, trunk/src/out_inc.F90, trunk/src/pes.F90,
	  trunk/src/phonon_spectrum.F90, trunk/src/phonons.F90, trunk/src/poisson.F90,
	  trunk/src/ps.F90, trunk/src/pulpo.F90, trunk/src/real.F90, trunk/src/run.F90,
	  trunk/src/scf.F90, trunk/src/specie.F90, trunk/src/spectrum.F90, trunk/src/spline.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/static_pol.F90,
	  trunk/src/strength_function.F90, trunk/src/systm.F90, trunk/src/td_exp.F90,
	  trunk/src/td_exp_split.F90, trunk/src/tm.F90, trunk/src/units.F90, trunk/src/unocc.F90,
	  trunk/src/vxc.F90, trunk/src/xc_KLI_SIC.F90, trunk/src/xc_pot.F90, trunk/src/xyzanim.F90:
	  *) Changed the names of the executables to something sensible (i.e., starting with oct)
	  *) removed the R_FUNC() in favor of X()
	  *) cleaned the use of use. Now I will try to make a map of the modules.
	  *) more stuff to hide LAPACK from the code (can someone test this?)
	* [r573] trunk/src/Makefile.am, trunk/src/mf_inc.F90, trunk/src/xc_KLI_SIC.F90:
	  Trivial things I had forgotten in the last commit.
	* [r572] trunk/src/Makefile.am, trunk/src/h_inc.F90, trunk/src/linalg.F90,
	  trunk/src/math.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90, trunk/src/mix.F90,
	  trunk/src/xc.F90, trunk/src/xc_HJU.F90, trunk/src/xc_KLI.F90, trunk/src/xc_KLI_SIC.F90,
	  trunk/src/xc_KLI_x.F90, trunk/src/xc_LDA.F90, trunk/src/xc_pot.F90:
	  Several changes:
	  *) created the module linalg that for now contains the BLAS and LAPACK interfaces.
	  *) The xc part is finally completed. In particular HJU is removed (who cared anyways?),
	  EXX and SIC are now working. In particular, SIC did not work for 21 months ;(

2003-11-27  micael

	* [r571] trunk/src/eigen_plan.F90, trunk/src/math.F90, trunk/src/td_exp.F90:
	  Forgot one interface...
	* [r570] trunk/src/f.F90, trunk/src/f_inc.F90, trunk/src/h.F90, trunk/src/h_inc.F90,
	  trunk/src/h_so.F90, trunk/src/lcao.F90, trunk/src/linear.F90, trunk/src/math.F90,
	  trunk/src/math_inc.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90, trunk/src/mix.F90,
	  trunk/src/phonons.F90, trunk/src/states_inc.F90, trunk/src/td_exp.F90,
	  trunk/src/td_exp_split.F90, trunk/src/td_rti.F90, trunk/src/xc_GGA.F90:
	  *) Added explicit interfaces for BLAS and LAPACK routines.
	  *) Fixed some small bugs in some BLAS and LAPACK calls.
	  NOTE: For now on only the first element of an array should be passed
	  to BLAS or LAPACK routines.

2003-11-26  rozzi

	* [r569] trunk/src/h_inc.F90:
	  ifdef necessary if we want an explicit interface to blas subroutine axpy

2003-11-24  acastro

	* [r568] trunk/src/run.F90:
	  Bug fixed.
	  Description: the calculation of the hamiltonian spectral range did not
	  work well for dimensions less than 3.
	* [r567] trunk/src/mix.F90:
	  Bug fixed.
	  Description: linear mixing was not working.

2003-11-21  acastro

	* [r566] trunk/src/xc_GGA.F90:
	  Some cleaning of xc_GGA, as requested. Maybe I should add some comments,
	  but I will leave that for some other day.

2003-11-21  marques

	* [r565] trunk/src/scf.F90:
	  Cosmetics
	  *) Memory should not be alloated by real(8) :: x(m%np), because the compiler may try to
	  allocate this apce in the stack wchich may lead to some nice stack overflows ;) Or even
	  worse, the space may not be deallocated at all. It's better to declare it as allocatable,
	  and allocate it explicitly. Like this the space goes to the heap.

2003-11-21  micael

	* [r564] trunk/src/mix_inc.F90:
	  Forgot to remove file mix_inc.F90...
	* [r563] trunk/doc/octopus.info, trunk/doc/octopus.info-1, trunk/doc/octopus.info-2,
	  trunk/doc/octopus.texi, trunk/liboct/config.h.in, trunk/src/Makefile.am, trunk/src/h.F90,
	  trunk/src/h_inc.F90, trunk/src/lcao.F90, trunk/src/mix.F90, trunk/src/run.F90,
	  trunk/src/scf.F90, trunk/src/states.F90, trunk/src/states_inc.F90:
	  My first commit :)
	  *) There is now a new input option called What2Mix. If 0 (default) Octopus will mix the
	  density in the SCF cycle. If 1 it will mix the hartree+xc potentials. It seems that mixing
	  the potential is a little bit better. More tests needed...
	  *) Cleaned the mix module.
	  *) Moved contents of mix_inc.F90 to states_inc.F90 (makes more sense)
	  *) Replaced the total energy convergence criteria by a new one: the sum of the
	  eigenvalues. It is more usefull to analize the convergence rate. There is now a new
	  function in states.F90 to compute the eigenvalues sum.

2003-11-21  marques

	* [r562] trunk/src/xc.F90, trunk/src/xc_GGA.F90, trunk/src/xc_LDA.F90, trunk/src/xc_pot.F90:
	  Started cleaning the xc part of the code.
	  *) The variables XFamily and CFamily no longer exist.
	  *) PBEX was no longer necessary, so it's gone.
	  *) Now we use flags to determine the xc functional.
	  *) KLI is commented out for now.

2003-11-20  marques

	* [r561] trunk/configure.ac:
	  This line was giving problems in kadesh!
	* [r560] trunk/src/td.F90, trunk/src/td_write.F90:
	  Took several subroutines out of td_run. Unfortunately, the code still does not compile
	  with '-O5 -hot' in SP4 ;(
	* [r559] trunk/src/Makefile.am, trunk/src/opt_control.F90, trunk/src/run.F90,
	  trunk/src/td.F90, trunk/src/td_exp.F90, trunk/src/td_init.F90, trunk/src/td_rti.F90,
	  trunk/src/td_write.F90:
	  *) I separated td_rti into an independent module
	  *) Sevral other small cleanings in td

2003-11-19  acastro

	* [r558] trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/spectrum.F90,
	  trunk/src/strength_function.F90:
	  * The cutoff should be multiplied by two when the Laplacian is called,
	  since that seems to be the convention...
	  * I added a Gaussian damping function to the Lorentzian and Polynomial
	  options for the calculations of the spectra, since that is the best
	  choice for some people called J. Dai and J. Z. Zhang (J. Chem. Phys. 103,
	  1491 (1995)).

2003-11-19  marques

	* [r557] trunk/src/lcao.F90:
	  Solved a segmentation fault in the alphas. The arguments of a BLAS routine were wrong.

2003-11-19  acastro

	* [r556] trunk/src/h.F90:
	  Bug fixed.
	  h%vnl_space variable was unitialized and caused problems when running with the
	  "-C" flag.
	* [r555] trunk/src/atomic.F90:
	  Bug fixed.
	  Portland Compiler did not like some old-style stuff in that file.

2003-11-18  acastro

	* [r554] trunk/src/eigen.F90, trunk/src/eigen_plan.F90, trunk/src/f.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/mf_inc.F90, trunk/src/poisson.F90,
	  trunk/src/poisson3D.F90, trunk/src/scf.F90:
	  Added the high-frequency filter operator in real space, "mf_filter".
	  Also some minor modifications (getting rid of the pointer attribute of some
	  variables...)
	* [r553] trunk/src/math.F90:
	  Bug fixed.
	  Description: Forgot one '#'

2003-11-18  marques

	* [r552] trunk/src/h_external_pot.F90:
	  just comments, really ;)
	* [r551] trunk/src/Makefile.am, trunk/src/eigen.F90, trunk/src/eigen_cg1.F90,
	  trunk/src/eigen_cg2.F90, trunk/src/eigen_plan.F90, trunk/src/f.F90,
	  trunk/src/h_external_pot.F90, trunk/src/math.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/mf_inc.F90, trunk/src/poisson.F90,
	  trunk/src/poisson3D.F90:
	  Several bug fixes.

2003-11-17  marques

	* [r550] trunk/src/Makefile.am, trunk/src/excitations.F90, trunk/src/h.F90,
	  trunk/src/h_inc.F90, trunk/src/hartree.F90, trunk/src/hartree1D.F90,
	  trunk/src/hartree2D.F90, trunk/src/hartree3D.F90, trunk/src/linear.F90,
	  trunk/src/poisson.F90, trunk/src/poisson1D.F90, trunk/src/poisson2D.F90,
	  trunk/src/poisson3D.F90, trunk/src/xc.F90, trunk/src/xc_HJU.F90, trunk/src/xc_KLI.F90,
	  trunk/src/xc_KLI_SIC.F90, trunk/src/xc_KLI_x.F90, trunk/src/xc_pot.F90:
	  *) Renamed the hartree* into poisson*. It makes much more sense like this
	  *) hartree now uses the new cf infrastructure

2003-11-16  acastro

	* [r549] trunk/src/f.F90, trunk/src/hartree.F90, trunk/src/hartree3D.F90,
	  trunk/src/mesh.F90, trunk/src/mesh_create.F90, trunk/src/mf_inc.F90:
	  Reorganization of the calculation of derivatives in real space.

2003-11-14  marques

	* [r548] trunk/src/td_exp.F90:
	  cvs seems to have forgotten these files...
	* [r547] trunk/src/Makefile.am, trunk/src/eigen_plan.F90, trunk/src/f.F90,
	  trunk/src/f_inc.F90, trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/mesh_inc.F90, trunk/src/mf_inc.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/static_pol.F90,
	  trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_exp.F90, trunk/src/td_exp_split.F90,
	  trunk/src/td_init.F90, trunk/src/td_rti.F90, trunk/src/xc_GGA.F90:
	  Lots of cleaning again. mesh_inc is gone, and its functions are now scattered in different
	  places in the code. Everything seems to work, but we will need a lot of testing ;)

2003-11-13  marques

	* [r546] trunk/src/global.h:
	  Forgot this file...

2003-11-12  marques

	* [r545] trunk/src/Makefile.am, trunk/src/cf.F90, trunk/src/cf_inc.F90, trunk/src/f.F90,
	  trunk/src/f_inc.F90, trunk/src/fftw2.F90, trunk/src/fftw3.F90, trunk/src/h.F90,
	  trunk/src/h_external_pot.F90, trunk/src/h_forces.F90, trunk/src/mesh_inc.F90,
	  trunk/src/run.F90, trunk/src/specie.F90, trunk/src/specie1D.F90, trunk/src/specie3D.F90:
	  Further cleaning. It is still not ready, but I hope tomorrow it will be ;)
	  *) mesh_gradq is gone.
	  *) the calculation of the external potential and the forces in FS is now done with the new
	  routines.

2003-11-11  marques

	* [r544] trunk/src/Makefile.am, trunk/src/cf.F90, trunk/src/cf_inc.F90,
	  trunk/src/complex.F90, trunk/src/f.F90, trunk/src/f_inc.F90, trunk/src/fft.F90,
	  trunk/src/fftw2.F90, trunk/src/fftw3.F90, trunk/src/global.F90,
	  trunk/src/h_external_pot.F90, trunk/src/h_forces.F90, trunk/src/h_inc.F90,
	  trunk/src/hartree3D.F90, trunk/src/mesh_inc.F90, trunk/src/mf.F90, trunk/src/mf_inc.F90,
	  trunk/src/out.F90, trunk/src/out_inc.F90, trunk/src/real.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/systm.F90, trunk/src/undef.F90, trunk/src/xc_GGA.F90:
	  There is a lot of code duplicated, but I am committing so that you can understand what I
	  am currently doing. The code compiles and runs in my machines. Main changes are:
	  *) Created a cube_function which handles functions defined on a cube
	  *) Created a functions module that hadles functions in a mesh or in the cube
	  *) Bug in the calculation of the gradient in Fourier space solved

2003-11-06  marques

	* [r543] trunk/src/Makefile.am, trunk/src/h_inc.F90, trunk/src/hartree.F90,
	  trunk/src/hartree3D.F90, trunk/src/lcao.F90, trunk/src/mesh_inc.F90, trunk/src/mf.F90,
	  trunk/src/mf_inc.F90, trunk/src/mix.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/td_calc.F90, trunk/src/xc.F90, trunk/src/xc_GGA.F90, trunk/src/xc_HJU.F90,
	  trunk/src/xc_KLI_x.F90:
	  Cleaning! The major things are:
	  *) Created mf (mesh_function) that handles stuff rpeviously contained in mesh
	  *) split derivatives in gradient + laplacian.
	  In the following I will try to break large modules into smaller ones.

2003-11-05  acastro

	* [r542] trunk/src/mesh_inc.F90, trunk/src/states_inc.F90, trunk/src/td.F90,
	  trunk/src/td_init.F90, trunk/src/td_write.F90:
	  By setting TDOutputAngularMomentum=yes, the expectation value of the
	  angular momentum, <L>, may be written to td.general/angular file.
	  In this way, the rotatory power dispersion can be calculated (at least
	  we will try to).
	* [r541] trunk/src/run.F90, trunk/src/td.F90, trunk/src/td_exp.F90:
	  Bug fixed.
	  Description: the hamiltonian spectral width was not properly calculated,
	  and, as a result, the Chebyshev polynomial expansion did not work properly.

2003-11-03  acastro

	* [r540] trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/td_exp.F90:
	  * Defined some constants in hamiltonian module, to characterize the borders.
	  (NO_ABSORBING, IMAGINARY_ABSORBING, MASK_ABSORBING)
	  * Removed the possibility of using the Lanczos exponential method with
	  non-hermitian Hamiltonians. Maybe I will put it back in the future, but
	  it does not seem to work too well.
	  * I have cleaned and refined the Lanczos method. It is more efficient
	  now.
	* [r539] trunk/src/math_inc.F90:
	  Bug fixed.
	  Description: Matrix exponentiation for non-hermitian matrices did not
	  work for matrices of very small norm.

2003-10-29  marques

	* [r538] trunk/src/main.F90:
	  Attempt to solve the bug found by Giacomo Mulas
	  (http://www.tddft.org/pipermail/octopus-users/2003-October/000123.html)

2003-10-23  acastro

	* [r537] trunk/src/h_inc.F90, trunk/src/mesh_inc.F90, trunk/src/td.F90,
	  trunk/src/td_exp.F90:
	  Split operator and Suzuki-Trotter methods work again (they were
	  broken). I did some reordering (moved the exponential of the
	  kinetic and potential operators) from the td_exp subroutine
	  to the hamiltonian module.
	  The caveats are: it does not work for spinors, and probably
	  it does not work for the periodical cases.

2003-10-16  acastro

	* [r536] trunk/src/Makefile.am, trunk/src/atom.F90, trunk/src/centergeom.F90,
	  trunk/src/geom_opt.F90, trunk/src/scf.F90, trunk/src/systm.F90, trunk/src/td_write.F90:
	  octopus no longer adjusts the geometry of the input file
	  (AdjustCoordinates = yes); for this purpose there is a new small
	  program (oct-centergeom) that reads the pdb, inp or xyz files
	  and produces an "adjusted.xyz" file. For this purpose I have
	  made some reorganizing of some stuff:
	  * atom data type has now a "label" component.
	  * system_write_xyz moved from system module to atom module (now it is called
	  atom_write_xyz)
	  Some things remain to be done (like rotating the molecule to the principal
	  axis by calculating the inertial tensor).
	  And I will change the names of all the programs to the oct-xxx template, as
	  suggested.

2003-10-15  acastro

	* [r535] trunk/src/eigen.F90, trunk/src/unocc.F90:
	  Bugs fixed.
	  Calculation of unoccupied states seemed to never converge (although
	  it did)

2003-10-14  acastro

	* [r534] trunk/src/eigen.F90:
	  The variation between EigenSolverInitTolerance and
	  EigenSolverFinalTolerance follow now a logarithmic line,
	  instead of being linear. This makes more sense. It seems that:
	  
	  EigenSolverInitTolerance = 1e-1
	  EigenSolverFinalTolerance = 1e-5
	  EigenSolverFinalToleranceIteration = 10
	  
	  provides a pretty good performance.

2003-10-09  acastro

	* [r533] trunk/src/h_inc.F90, trunk/src/vxc.F90, trunk/src/xc.F90, trunk/src/xc_GGA.F90,
	  trunk/src/xc_pot.F90:
	  Modifications referred to the LB94 xc potential.
	  I have added some variables to fine-tune it. Basicly it calculates
	  the potential whenever the density has significant value (above a given
	  threshold), and otherwise plugs in the known asymptotic behaviour.
	  The input variables are:
	  LB94_threshold: the above mentioned threshold (default 1.0e-6)
	  LB94_beta: the "beta" arbitrary parameter that appears in the LB94 formula
	  (default 0.05)
	  LB94_modified: applies a small modification to the LB94 potential, but this
	  is not the place to talk about it (default no)
	  Still unclear that this solves all the problems, though: some discontinuities
	  linger, and for some cases the evolution is unstable.

2003-10-09  marques

	* [r532] trunk/src/xc_KLI_x.F90:
	  EXX now gives the same numbers as 2 years ago!
	* [r531] trunk/src/main.F90:
	  The code now prints properly where it is running also with MPI.

2003-10-09  acastro

	* [r530] trunk/src/hgh.F90:
	  Bug fixed.
	  Description: some "returns" were deleted in a previous commit, and should
	  be there because otherwise the debugging mode gets screwed up (I think
	  it is the only problem it caused).
	* [r529] trunk/src/unocc.F90:
	  Bug fixed.
	  Description: Calculation of unoccupied calculations crashed, due
	  to the wrong allocation of eigens%diff variable. What I have done now
	  is not too elegant, but I need now a quick solution to put the code running

2003-10-08  acastro

	* [r528] trunk/src/out.F90, trunk/src/out_inc.F90, trunk/src/scf.F90:
	  By setting the variable "OutputDuringSCF=yes", the density and the
	  hamiltonian is now plotted at each step during the SCF cycle.
	  I found it useful so I thought that it wouldn't be too costly to put
	  it there.
	  Also I changed the preprocessor MFORMAT in out_inc so that the functions
	  are printed with more precision.

2003-10-08  marques

	* [r527] trunk/src/excitations.F90:
	  FFTs needed to be initialized.

2003-10-06  acastro

	* [r526] trunk/src/eigen.F90, trunk/src/lcao.F90, trunk/src/run.F90, trunk/src/scf.F90,
	  trunk/src/states.F90:
	  Some (small) changes:
	  1. The self consistent LCAO calculations (SCFinLCAO=yes) is done now
	  in a smarter way, so that it is faster. It seems to help sometimes
	  to get a good starting point for the Broyden procedure. But it is
	  not as fast as it can get; however to do it faster one would need
	  to code a lot more.
	  2. The initial density for spin-polarized/spinors calculation was very
	  badly built before. Now it is always spin-unpolarized.
	  3. Some cosmetic changes (pretty-printing at the end of each SCF cycle
	  iteration...)
	* [r525] trunk/src/static_pol.F90:
	  Bug fixed.
	  Did not compile when using complex wavefunctions.

2003-10-03  acastro

	* [r524] trunk/liboct/oct_f.c, trunk/src/liboct.F90, trunk/src/mesh_inc.F90,
	  trunk/src/run.F90, trunk/src/static_pol.F90:
	  I have changed the way in which the static polarizability is calculated:
	  Before it was:
	  alpha(i, j) = [ dipole(i, E = k*e_j)-dipole(i,0) ] / k
	  and now it is :
	  alpha(i, j) = [ dipole(i, E = k*e_j)-dipole(i, E = -k+e_j) ] / (2*k)
	  This seems to be less sensitive to errors.
	  I also changed the default value for k from 0.001 to 0.01, which seems
	  to be better.
	  
	  I cleaned some things a bit:
	  * In oct_f.c, there is a new function oct_rm to remove files.
	  * In mesh_inc.F90, there is a new function to calculate a given
	  moment for a given function defined in the mesh.
	  * The possibility to restart a broken calculation for the polar.
	  was broken (Run mode = 8). Now it seems to work, at least in my machine.

2003-10-01  acastro

	* [r523] trunk/src/states.F90:
	  Bug fixed.
	  States are no longer defined from 0 to m%np.

2003-09-29  marques

	* [r522] trunk/configure.ac, trunk/liboct/config.h.in, trunk/src/Makefile.am,
	  trunk/src/config.h.in, trunk/src/fft.F90, trunk/src/fftw2.F90, trunk/src/fftw3.F90,
	  trunk/src/h.F90, trunk/src/h_external_pot.F90, trunk/src/h_forces.F90,
	  trunk/src/hartree.F90, trunk/src/hartree3D.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_inc.F90, trunk/src/pes.F90, trunk/src/run.F90, trunk/src/specie.F90,
	  trunk/src/td.F90, trunk/src/td_exp.F90, trunk/src/td_init.F90, trunk/src/td_write.F90,
	  trunk/src/xc.F90:
	  Cleaned configuration for the fftw libraries
	  octopus now compiles *without* ffts

2003-09-11  acastro

	* [r521] trunk/src/h_inc.F90, trunk/src/vxc.F90, trunk/src/xc_GGA.F90, trunk/src/xc_pot.F90:
	  Re-implementation of van Leeuwen & Baerends exchange-potential.
	  [PRA 49, 2421 (1994)].
	  
	  I have changed it in a way that I think may avoid most of the numerical
	  instabilities that happened before. A couple of things to note:
	  
	  * Now it has some degree of "self-consistency": that is, its value
	  somehow depends on the value of the last eigenvalue, which varies over
	  the self-consistent cycle.
	  * The exchange energy is not calculated, so that the total energy should
	  not yet be trusted if LB94 is used. I will fix that.
	  * Some values are hard-coded. I will allow for more freedom by putting
	  some new variables in xc_type.
	  * Still, I think that LB94 could be improved, we have to discuss it...
	* [r520] trunk/src/math_inc.F90:
	  Sorry, I never committed math_inc.F90
	* [r519] trunk/src/h.F90, trunk/src/mesh.F90:
	  Bug fixed, and reorganization of code.
	  
	  An important bug showed up when absorbing boundaries were used with a
	  parallelpiped-shaped box. I have removed it (after lots of time lost
	  looking somewhere else) and, on the way, reorganized a bit that part.
	  Now there is a mesh function defined, "mesh_inborder", which decides
	  about a point being or not in the border.
	  
	  The reason for the reorder, besides aesthetical, is that I will also
	  use the concept of "border" to re-define the LB94 potential, which I have
	  been experimentig with [I think I have some ideas about a safe way to
	  apply it].

2003-09-03  acastro

	* [r518] trunk/src/mesh_inc.F90, trunk/src/xc_GGA.F90:
	  I sorted out the GGA problem mentioned in previous commit. It seems
	  now that we retrieve the results that were obtained with version 1.1.
	  For that purpose:
	  * The extremely ugly calculation of the divergence of the functional
	  derivative of the "fxc" with respect to the gradient of the density
	  is removed from xc_GGA.
	  * A new subroutine is defined in mesh: R_FUNC(mesh_divergence), which
	  does the obvious thing. It is now only defined in real space, making
	  use of the "lookup table" stuff. In this way "lxyz", "lxyz_inv" and
	  all that crap is not used in xc_GGA (I don't think those components
	  should be used outside the internal mesh routines... I don't know if
	  there is even a way of declaring them "private")
	* [r517] trunk/src/xc_GGA.F90:
	  GGA calculations were broken since the derivation method had changed.
	  Two things to note:
	  * The way it is done now is extremely ugly.
	  * I don't retrieve exactly the same results with version 1.1 than
	  with current version, for GGA calculations (small difference).
	  Both things should be checked...
	* [r516] trunk/src/Makefile.am, trunk/src/math.F90, trunk/src/td_exp.F90:
	  I improved a bit the algorithm that calculates the exponential of a
	  matrix, making it a bit more general. Now it could be applied to matrices
	  with higher norms, and even to real matrices.
	  Now there is a "math_inc.F90", included from math.F90, to allow for
	  procedures defined for real and complex variables.

2003-09-02  acastro

	* [r515] trunk/src/Makefile.am:
	  Bug fixed.
	  The "==" operator is an extension in bash; Bourne shell only admits "=".

2003-08-28  acastro

	* [r514] trunk/configure.ac:
	  Bug fixed.
	  configure script was not doing what it should about FFTW3/FFTW2.

2003-08-27  acastro

	* [r513] trunk/configure.ac, trunk/liboct/config.h.in, trunk/src/config.h.in,
	  trunk/src/fft.F90, trunk/src/hartree.F90, trunk/src/hartree3D.F90, trunk/src/run.F90:
	  * Added support for FFTW, version 3. This required changing octopus since
	  the FFTW team changed the interface to their subroutines. I have left
	  support for FFTW, version 2, however. So now the configure script will
	  try to find FFTW3 first (which should be called libfftw3.a), and if it
	  does not, it will revert to FFTW2. Now there are thus two fft modules,
	  which one is compiled is selected by the preprocessor. The configure
	  option for fftw is called --with-fftw3; FFTW2 may be forced by doing
	  --without-fftw3.
	  
	  Of course, this is provisional; eventually FFTW2 support will die.
	  
	  I still have to do some checks (that is why the program emits a warning
	  when using FFTW3), and some benchmarks to see if FFTW3 is so much faster
	  as they claim.
	  
	  * Bug fixed: Program crased in my computer when finishing CalculationMode=1
	  in complex mode. It did so in run subroutine, run.F90 file, line 118, when
	  deallocating sys%st%R_FUNC(psi). I believe it is a compiler error. However
	  I avoided it by putting the optional "stat=" argument to deallocate.

2003-08-26  acastro

	* [r512] trunk/src/math.F90, trunk/src/td.F90, trunk/src/td_exp.F90:
	  * Removed "matmul" from td_exp, in favour of BLAS zgemm. The reason is
	  apparently some compilers have problems with matmul.
	  
	  * In the way, removed two bugs in the Lanczos procedure, one of them a
	  compiler bug (ifc, version 7.1.028), and another one mine. Probably this
	  latter one was responsible for some annoying results when using
	  Lanczos method.
	  
	  * Finally, mat_exp has been moved from td_exp, to math module, where I think
	  it belongs better. It also reduces the humongous (yes, that is an English
	  word) td module. Probably I will change again mat_exp later to
	  make it more general.
	  
	  * A number of matmul are still in atom module. I will change them also.

2003-08-25  acastro

	* [r511] trunk/configure.ac, trunk/liboct/config.h.in:
	  Applied Tobias' patch about the proper trlan web page.

2003-08-21  marques

	* [r510] trunk/doc/octopus.texi, trunk/src/fft.F90, trunk/src/h.F90,
	  trunk/src/h_external_pot.F90, trunk/src/h_forces.F90, trunk/src/hartree.F90,
	  trunk/src/hartree3D.F90, trunk/src/mesh.F90, trunk/src/mesh_create.F90,
	  trunk/src/mesh_inc.F90, trunk/src/out_inc.F90, trunk/src/pes.F90, trunk/src/pes_mask.F90,
	  trunk/src/run.F90, trunk/src/specie.F90, trunk/src/specie3D.F90, trunk/src/states_inc.F90,
	  trunk/src/td.F90, trunk/src/td_exp.F90, trunk/src/td_init.F90:
	  *) ffts are now abstracted by an interface module. This is, however, not enough to use
	  fftw 3.0. Further changes will be required.
	  *) got rid of most fft information from inside mesh. This information is now where it is
	  needed.
	  *) for practical reasons, got rid of nonlocalpseudopotential in FS. We never used it
	  anyway

2003-08-18  marques

	* [r509] trunk/src/mesh_create.F90:
	  Bug in the cretion of mesh found by Alberto killed.

2003-08-13  marques

	* [r508] trunk/src/choose_st.F90, trunk/src/eigen_cg2.F90, trunk/src/eigen_cg3.F90,
	  trunk/src/eigen_plan.F90, trunk/src/excitations.F90, trunk/src/global.F90,
	  trunk/src/h_inc.F90, trunk/src/h_so.F90, trunk/src/hartree.F90, trunk/src/hartree3D.F90,
	  trunk/src/lcao.F90, trunk/src/make_st.F90, trunk/src/mesh.F90, trunk/src/mesh_create.F90,
	  trunk/src/mesh_inc.F90, trunk/src/opt_control.F90, trunk/src/run.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/td.F90, trunk/src/td_calc.F90,
	  trunk/src/td_exp.F90, trunk/src/td_init.F90, trunk/src/td_rti.F90, trunk/src/td_write.F90,
	  trunk/src/unocc.F90, trunk/src/xc_GGA.F90, trunk/src/xc_KLI.F90, trunk/src/xc_KLI_SIC.F90,
	  trunk/src/xc_KLI_x.F90:
	  Started changing the mesh stuff. Notice
	  *) wfs now start at 1 and not at 0 as before. The 0 is no longer necessary, for the
	  information to calculate the deivatives is in a lookup table
	  *) hartree cg was completely changed. I benchemarked it, but the results were strange. The
	  first time it is called it is 50% slower than before, but the last time it is slightly
	  faster.
	  *) low frequency is broken now. The correct way to do it is to create a new mesh with a
	  different order for the laplacian (essencially m2 = m; allocate(m2%d); m2%d%norder=1; call
	  mesh_init_derivatives_coeff(m%d); call mesh_init_xyz(m2); and then use this auxiliary mesh
	  for the calculation of the derivatives)

2003-08-05  marques

	* [r507] trunk/src/td_write.F90:
	  I'm going to bed! I am forgetting too many things ;(
	* [r506] trunk/configure.ac, trunk/src/global.F90, trunk/src/td_write.F90:
	  *) changed version number to 1.2
	  *) cosmetics

2003-08-04  marques

	* [r505] trunk/configure.ac:
	  was still not OK... now it seems to work. What is this trlan by the way?
	* [r504] trunk/configure.ac:
	  Sorry, I had by accident delete Alberto's changes to configure.ac
	* [r503] trunk/autogen.sh, trunk/configure.ac, trunk/doc/octopus.texi,
	  trunk/liboct/config.h.in, trunk/liboct/oct_f.c, trunk/liboct/varia.h,
	  trunk/src/Makefile.am, trunk/src/atom.F90, trunk/src/atomic.F90, trunk/src/config.h.in,
	  trunk/src/eigen.F90, trunk/src/eigen_cg2.F90, trunk/src/eigen_cg3.F90,
	  trunk/src/eigen_plan.F90, trunk/src/geom_opt.F90, trunk/src/global.F90, trunk/src/h.F90,
	  trunk/src/h_external_pot.F90, trunk/src/h_forces.F90, trunk/src/h_inc.F90,
	  trunk/src/h_so.F90, trunk/src/hartree.F90, trunk/src/hartree1D.F90,
	  trunk/src/hartree2D.F90, trunk/src/hartree3D.F90, trunk/src/hgh.F90, trunk/src/lasers.F90,
	  trunk/src/lcao.F90, trunk/src/main.F90, trunk/src/mesh.F90, trunk/src/mesh_create.F90,
	  trunk/src/mesh_inc.F90, trunk/src/mix.F90, trunk/src/mix_inc.F90, trunk/src/ps.F90,
	  trunk/src/run.F90, trunk/src/scf.F90, trunk/src/specie.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/static_pol.F90, trunk/src/systm.F90, trunk/src/td.F90,
	  trunk/src/td_calc.F90, trunk/src/td_exp.F90, trunk/src/td_init.F90, trunk/src/td_rti.F90,
	  trunk/src/tm.F90, trunk/src/units.F90, trunk/src/unocc.F90, trunk/src/xc.F90,
	  trunk/src/xc_GGA.F90, trunk/src/xc_KLI.F90, trunk/src/xc_LDA.F90, trunk/src/xc_pot.F90:
	  *) octopus now has a --enable debug
	  *) all debug information goes to stderr
	  *) oct_gemem does something sensible now ;)
	  *) sorry for the inconvenience
	* [r502] trunk/liboct/varia.c, trunk/src/main.F90:
	  Instead of printing the operating system, octopus now prints the machine and the operating
	  system. This is quite useful, for sometimes I forget where the thing is swimming ;)
	* [r501] trunk/doc/octopus.texi, trunk/src/run.F90, trunk/src/td.F90, trunk/src/td_init.F90,
	  trunk/src/td_write.F90:
	  *) Small changes to the td output. Now I consider it *clean*
	  *) The famous projections (occ_analysis) are now back to the code
	  *) The manual is updated with the new names for the TDOutput variables. Sorry for changing
	  them, but you know my opinion about it ;)

2003-08-02  marques

	* [r500] trunk/liboct/Makefile.am, trunk/liboct/write_iter.c, trunk/src/h.F90,
	  trunk/src/run.F90, trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_init.F90,
	  trunk/src/td_write.F90:
	  I completely changed the output layer of the td part of octopus. Now instead of
	  storing the values in temporary arrays, it prints them into a buffered file that is
	  flushed only every N iterations. Also delete the stuff related to the occupation analysis.

2003-07-31  marques

	* [r499] trunk/doc/tutorial.tex:
	  Small patch by Tobias.
	* [r498] trunk/doc/Makefile.am, trunk/doc/img, trunk/doc/img/cover.ps,
	  trunk/doc/img/spacing.ps, trunk/doc/tutorial.tex:
	  First go at a tutorial for octopus. Kindly prepared by Nicole Helbig.

2003-07-29  acastro

	* [r497] trunk/src/h_inc.F90, trunk/src/mesh.F90:
	  Bug fixed.
	* [r496] trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/mesh.F90, trunk/src/mesh_inc.F90,
	  trunk/src/td_exp.F90:
	  If derivatives are calculated on Fourier space, a cutoff may be applied
	  now to the kinetic operator through the variable "KineticCutoff" in the
	  input file. The operator G^2/2 is now transformed to min(G^2/2, E_c).

2003-07-24  acastro

	* [r495] trunk/src/mesh_inc.F90, trunk/src/td_exp.F90:
	  A new subroutine called R_FUNC(mesh_explaplq) calculates the exponential
	  of the laplacian. It was done previously in td_exp. It is very similar
	  to R_FUNC(mesh_laplq), but I have preferred to keep them differently
	  for the moment.
	* [r494] trunk/src/td_exp.F90:
	  * Split-operator and Suzuki-Trotter were "potential-referenced"
	  [e^(-i*dt*H) = e^(-i*dt/2*K) e^(-i*dt*V) e^(-i*dt/2*K) ], which involves
	  four FFTs in our code. Doing it "kinetic-referenced" (the kinetic term
	  in the middle, applied only once) is equivalent and needs only 2 FFTs.
	  * A bug still lingered in the application of the non-local part of the
	  pseudopotential for split-operator and Suzuki-Trotter methods.

2003-07-23  acastro

	* [r493] trunk/src/h_forces.F90, trunk/src/mesh.F90, trunk/src/mesh_inc.F90:
	  Some reorganising... mesh_laplacian_in_fs and mesh_gradient_in_fs
	  are moved to R_FUNC(mesh_laplq) and R_FUNC(mesh_gradq).
	  Also, mesh_laplq allows now for a cutoff.

2003-07-22  acastro

	* [r492] trunk/doc/octopus.dvi, trunk/doc/octopus.info, trunk/doc/octopus.info-1,
	  trunk/doc/octopus.texi, trunk/src/mesh.F90:
	  I have added a line to the output of the code, showing the "cutoff energy"
	  of the mesh. This value is explained in the manual.
	* [r491] trunk/doc/octopus.dvi, trunk/doc/octopus.info, trunk/doc/octopus.info-1,
	  trunk/doc/octopus.info-2, trunk/doc/octopus.texi, trunk/src/out_inc.F90:
	  Applied Tobias' patches.
	  Thanks!
	* [r490] trunk/configure.ac, trunk/src/atom.F90, trunk/src/hgh.F90, trunk/src/main.F90,
	  trunk/src/ps.F90, trunk/src/spectrum.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/td_write.F90, trunk/src/tm.F90, trunk/src/units.F90:
	  Some changes needed to compile the code on a SGI O3000:
	  
	  * Weird compiler bug: write(string,'(a)') a//b//c causes
	  the compiler to crash. Substituted, where it appeared, to
	  string = a//b//c.
	  * All '//' concatenation symbols substituted to the overloaded '+'
	  * In configure.ac, added support for the SCSL library (that comprises
	  BLAS and LAPACK in Silicon Graphics machines)

2003-07-17  acastro

	* [r489] trunk/src/states.F90:
	  Removed some tabs, which are not standard to F90.
	* [r488] trunk/src/eigen_cg2.F90, trunk/src/states.F90, trunk/src/states_inc.F90:
	  Bug fixed.
	  In fact it is not a bug, but a serious performance problem.
	  It seems in Fortran there is no (an easy) way to find out what the hell
	  the processor does when the arguments are passed, specially arrays. In this
	  case, apparently in the alpha as well as in the linux machines, a copy
	  of the wavefunctions was made every time. This is absurd, only the pointer
	  should be passed. Since those copies are stored somewhere called the "stack",
	  and it is a huge variable, some of my alpha machines crashed at this point
	  ("not enough stack").
	  By doing the change I did, it seems to be OK. On linux machines, I can see
	  that now the memory does not grow when gram_schmidt is called (before it
	  did, and in fact it could grew *a lot*).
	  This problem could be elsewhere in the code (I am sure it is).
	  
	  * Note: a source of problems, probably related to this, is the fact that
	  functions that will undergo
	  derivation are defined from 0 to m%np, to have that auxiliar 0 point. We have
	  to change that. Suggestion: define from 1 to m%np+1, and let the m%np+1 be
	  the auxiliar point?

2003-07-16  acastro

	* [r487] trunk/doc/octopus.dvi:
	  Forgot the dvi file.
	* [r486] trunk/doc/octopus.info, trunk/doc/octopus.info-2, trunk/doc/octopus.texi:
	  Applied Tobias patch to the documentation (Actually, I changed it a bit)
	  Thanks!

2003-07-15  acastro

	* [r485] trunk/src/static_pol.F90:
	  Bug fixed.
	  The calculation of the static polarizability was broken.

2003-07-11  acastro

	* [r484] trunk/src/mesh_inc.F90:
	  In previous commit I submitted a version which is not yet ready.
	* [r483] trunk/src/mesh_inc.F90:
	  The low-frequency filter is applied now in a simpler and faster way.

2003-07-10  acastro

	* [r482] trunk/src/h_inc.F90:
	  Sorry, I did not really remove the bug...
	* [r481] trunk/src/h_inc.F90:
	  Bug fixed.
	  The eigenvalues were not updated in "hamiltonian setup" if the independent
	  particles option was selected.

2003-07-08  acastro

	* [r480] trunk/doc/octopus.dvi, trunk/doc/octopus.info, trunk/doc/octopus.info-1,
	  trunk/doc/octopus.info-2, trunk/doc/octopus.texi:
	  * Finished (more or less) the documentation of the wf.net utility. It is
	  also complemented in the octopus manual.
	  * The files octopus.info-1 and octopus.info-2 should be in the distribution
	  if octopus.info is (or else none of them should be there).

2003-07-07  acastro

	* [r479] trunk/src/run.F90, trunk/src/td.F90:
	  Bug fixed.
	  The extrapolation potential were not properly written/read to
	  the restart.td.xxx files.

2003-07-04  acastro

	* [r478] trunk/doc/octopus.dvi, trunk/doc/octopus.info, trunk/doc/octopus.texi:
	  Refined the visualization wf.net.
	  Added the necessary file wf.cfg, which I had forgotten.
	  Added documentation about it to the manual.
	  The embedded documentation is still missing, though.

2003-07-02  acastro

	* [r477] trunk/src/Makefile.am:
	  Bug fix.
	  File vxc.o was passed twice to the linker when linking excitations.
	  Some compilers don't like it.

2003-06-26  acastro

	* [r476] trunk/src/lcao.F90:
	  Bug fixed.
	  Only showed up in certain calculations of atoms with semicore.

2003-06-24  acastro

	* [r475] trunk/src/out_inc.F90:
	  Bug fixed.
	  dx function output was printing only the real part of a complex function.

2003-06-20  marques

	* [r474] trunk/src/h_external_pot.F90, trunk/src/liboct.F90:
	  Forgot these two files, sorry.
	* [r473] trunk/src/Makefile.am, trunk/src/atomic.F90, trunk/src/eigen.F90,
	  trunk/src/geom_opt.F90, trunk/src/global.F90, trunk/src/h.F90, trunk/src/h_inc.F90,
	  trunk/src/hartree.F90, trunk/src/liboct_parser.F90, trunk/src/mesh.F90, trunk/src/mix.F90,
	  trunk/src/opt_control.F90, trunk/src/out.F90, trunk/src/pes.F90, trunk/src/run.F90,
	  trunk/src/scf.F90, trunk/src/specie.F90, trunk/src/spline.F90, trunk/src/td.F90,
	  trunk/src/unocc.F90, trunk/src/xc.F90:
	  I broke the liboct in two parts: one containing only the parser, and the rest. I'm doing
	  this because there are persons that use the parser in other programs. Consequently, I had
	  to do very small changes in a lot of files (essencially in use statements).
	* [r472] trunk/liboct/Makefile.am, trunk/liboct/interface.c, trunk/liboct/liboct.h,
	  trunk/liboct/oct_f.c, trunk/liboct/parse.c, trunk/liboct/parse_exp.c,
	  trunk/liboct/parser.h, trunk/liboct/parser_f.c, trunk/liboct/string_f.c,
	  trunk/liboct/string_f.h:
	  I broke the liboct in two parts: one containing only the parser, and the rest.
	  I'm doing this because there are persons that use the parser in other programs.
	  Consequently, I had to do very small changes in a lot of files (essencially in u
	  se statements).

2003-06-18  rozzi

	* [r471] trunk/src/h_external_pot.F90:
	  This expression for the external potential looks like a bit better, but maybe we miss a
	  constant factor.
	* [r470] trunk/src/atom.F90:
	  Bug fixed (thanks to Alberto)

2003-06-17  rozzi

	* [r469] trunk/src/ps.F90:
	  I need the logrid to integrate the local pseudo part, but I am not able to get it as a
	  pointer, so I have awfully copied the part of the structure I need. I hope it will be more
	  elegant in future.
	* [r468] trunk/src/h_external_pot.F90:
	  *) Bug fixed in deallocation of atm%phases that is not used in finite systems
	  *) First attempt of getting the correct local potential for periodic 3D (this comment
	  should have be done one commit ago). At the moment I guess it is wrong...
	* [r467] trunk/src/atom.F90:
	  Bug fixed in deallocation of atm%phases that is not used in finite systems
	* [r466] trunk/src/h_external_pot.F90:
	  Bug fixed: the KB check was not working for cylindrical box

2003-06-17  acastro

	* [r465] trunk/src/ps.F90:
	  Bug fixed.
	  Don't want to explain.
	* [r464] trunk/liboct/interface.c, trunk/liboct/varia.c, trunk/src/liboct.F90,
	  trunk/src/main.F90:
	  Bug fixed.
	  Description: The memory calculation in oct_getmem function (interface.c)
	  worked apparently only in linux systems.
	  I have added a function "sysname" in varia.c, where the name of the
	  OS is obtained throught the utsname structure, which seems to be standard.
	  This way oct_getmem only works if "Linux" is read, and otherwise returns -1.
	  Fortran subroutines also have access to the OS name throught oct_sysname
	  subroutine.
	  Note: the oct_getmem function should be improved to work on other OSs,
	  and to work more elegantly on linux, by reading directly the /proc
	  filesystem.

2003-06-16  rozzi

	* [r463] trunk/src/h_external_pot.F90:
	  The program is stopped if the KB sphere is larger than the box.

2003-06-12  rozzi

	* [r462] trunk/src/states.F90:
	  I always forget the debug stuff. Sorry.

2003-06-12  marques

	* [r461] trunk/src/states_inc.F90:
	  Carlo overwrote a simple warning fix for the CRAY ;) Put it back in.

2003-06-12  rozzi

	* [r460] trunk/src/unocc.F90:
	  We want bands plotted for unoccupied states too.
	* [r459] trunk/src/td_calc.F90:
	  We have to pass the k-point index to subroutine for nonlocal potential
	* [r458] trunk/src/states_kpoints.F90:
	  *) Bug fixed for periodicity > 1 in the generation of the k-points mesh.
	  *) The new input variable CenterOfInversion allows to use only the irreducible part of the
	  BZ (only in 1D :)
	  *) Bug fixed: now the weights are correct ;)
	  *) If verbosity is > 80 the detailed list of k points is written to info file
	* [r457] trunk/src/states_inc.F90:
	  Added the routine to output squared modulus of wf.
	* [r456] trunk/src/states.F90:
	  I'm afraid I changed many things:
	  *) the subroutine states_write_bands is added to get bands in a gnuplot/xmgrace friendly
	  format;
	  *) the number of k-points now can be choosen on a per-axis basis: the variable
	  NumberKPoints is now a block_integer;
	  *) the default number of k-points is 5, because I like 5 more than 4, and because, if
	  there is no center of inversion, a point is close to G/2;
	  *) no extra states are added for periodic systems: the users must take care if the system
	  may be metallic
	* [r455] trunk/src/scf.F90:
	  We want bands plotted for periodic systems. This is the call to the relevant subroutine
	  states_write_bands.
	* [r454] trunk/src/out.F90:
	  Since the density output is still buggy for unoccupied states of periodic systems, at
	  least I added the possibility of plotting the square modulus of all the wave functions.
	* [r453] trunk/src/mesh_create.F90:
	  *) A small bug is corrected in the logic of mesh selection for periodic systems
	  *) The nearest neighbours images of the atoms used for the folding procedure are built in
	  a more efficient way if the periodicity is < 3.
	* [r452] trunk/src/mesh.F90:
	  Beauty farm operation: irrelevant change in the output.
	* [r451] trunk/src/h_inc.F90:
	  This is the tragic phase factor that screwed up the calculations in periodic systems with
	  nonlocal potential. We got you, at the end! Thank you Angel.
	* [r450] trunk/src/h_external_pot.F90:
	  Now the folding of the nonlocal part of pseudo in periodic systems works for TM2 too.
	* [r449] trunk/src/atom.F90:
	  The structure "phases" has been added to store the phase factors exp(ikr) that are used to
	  build the periodic nonlocal part of the pseudopotential

2003-06-11  acastro

	* [r448] trunk/src/Makefile.am, trunk/src/atomic.F90, trunk/src/hgh.F90, trunk/src/mix.F90,
	  trunk/src/ps.F90, trunk/src/tm.F90:
	  Very stupid changes:
	  * Removed all the 0d0, 1d0... bad style constants... (the CRAY complained
	  about them)
	  * Fixed some problem with the linking of the "xyzanim" program.

2003-06-11  marques

	* [r447] trunk/liboct/interface.c:
	  Bug fixed. The array c should be alloced to l+1 and not l characters.

2003-06-10  acastro

	* [r446] trunk/src/xc_GGA.F90:
	  Bug fixed.

2003-06-09  marques

	* [r445] trunk/liboct/config.h.in, trunk/liboct/interface.c, trunk/liboct/parse.c,
	  trunk/src/hartree3D.F90, trunk/src/math.F90, trunk/src/states_inc.F90, trunk/src/td.F90:
	  Code now compiles and runs in the CRAY T3E ;)

2003-06-09  acastro

	* [r444] trunk/src/geom_opt.F90, trunk/src/liboct.F90:
	  Bug fixes:
	  * oct_geom_opt is no longer existent. CRAY compiler compiled because
	  it was declared, although not used.
	  * Default integer type should be used everywhere to avoid problems...

2003-06-08  marques

	* [r443] trunk/liboct/interface.c, trunk/src/atom.F90, trunk/src/atomic.F90,
	  trunk/src/broad.F90, trunk/src/choose_st.F90, trunk/src/eigen.F90,
	  trunk/src/excitations.F90, trunk/src/geom_opt.F90, trunk/src/global.F90, trunk/src/h.F90,
	  trunk/src/hartree.F90, trunk/src/hgh.F90, trunk/src/hs_from_acc.F90,
	  trunk/src/hs_from_mult.F90, trunk/src/lasers.F90, trunk/src/liboct.F90,
	  trunk/src/linear.F90, trunk/src/main.F90, trunk/src/make_st.F90, trunk/src/mesh.F90,
	  trunk/src/mesh_create.F90, trunk/src/mix.F90, trunk/src/opt_control.F90,
	  trunk/src/out.F90, trunk/src/out_inc.F90, trunk/src/pes_rc.F90,
	  trunk/src/phonon_spectrum.F90, trunk/src/phonons.F90, trunk/src/ps.F90,
	  trunk/src/pulpo.F90, trunk/src/run.F90, trunk/src/scf.F90, trunk/src/specie.F90,
	  trunk/src/specie1D.F90, trunk/src/specie3D.F90, trunk/src/states.F90,
	  trunk/src/static_pol.F90, trunk/src/strength_function.F90, trunk/src/systm.F90,
	  trunk/src/td.F90, trunk/src/td_init.F90, trunk/src/tm.F90, trunk/src/units.F90,
	  trunk/src/unocc.F90, trunk/src/xc.F90, trunk/src/xyzanim.F90:
	  Got rid of all the C_string stuff. The string convertion is now completely handl
	  ed by the C. It seems to work in the PCs, alphas and IBM. The code is not, howev
	  er, completely portable. It is not my fault! It is Fortran's fault for not knowi
	  ng what a string is!
	* [r442] trunk/share/PP/HGH/Ag.hgh, trunk/share/PP/HGH/Ag_sc.hgh, trunk/share/PP/HGH/Al.hgh,
	  trunk/share/PP/HGH/Ar.hgh, trunk/share/PP/HGH/As.hgh, trunk/share/PP/HGH/At.hgh,
	  trunk/share/PP/HGH/Au.hgh, trunk/share/PP/HGH/Au_sc.hgh, trunk/share/PP/HGH/B.hgh,
	  trunk/share/PP/HGH/Ba.hgh, trunk/share/PP/HGH/Ba_sc.hgh, trunk/share/PP/HGH/Be.hgh,
	  trunk/share/PP/HGH/Be_sc.hgh, trunk/share/PP/HGH/Bi.hgh, trunk/share/PP/HGH/Br.hgh,
	  trunk/share/PP/HGH/C.hgh, trunk/share/PP/HGH/Ca.hgh, trunk/share/PP/HGH/Ca_sc.hgh,
	  trunk/share/PP/HGH/Cd.hgh, trunk/share/PP/HGH/Cd_sc.hgh, trunk/share/PP/HGH/Ce_sc.hgh,
	  trunk/share/PP/HGH/Cl.hgh, trunk/share/PP/HGH/Co.hgh, trunk/share/PP/HGH/Co_sc.hgh,
	  trunk/share/PP/HGH/Cr.hgh, trunk/share/PP/HGH/Cr_sc.hgh, trunk/share/PP/HGH/Cs.hgh,
	  trunk/share/PP/HGH/Cs_sc.hgh, trunk/share/PP/HGH/Cu.hgh, trunk/share/PP/HGH/Cu_sc.hgh,
	  trunk/share/PP/HGH/Dy_sc.hgh, trunk/share/PP/HGH/Er_sc.hgh, trunk/share/PP/HGH/Eu_sc.hgh,
	  trunk/share/PP/HGH/F.hgh, trunk/share/PP/HGH/Fe.hgh, trunk/share/PP/HGH/Fe_sc.hgh,
	  trunk/share/PP/HGH/Ga.hgh, trunk/share/PP/HGH/Ga_sc.hgh, trunk/share/PP/HGH/Gd_sc.hgh,
	  trunk/share/PP/HGH/Ge.hgh, trunk/share/PP/HGH/H.hgh, trunk/share/PP/HGH/He.hgh,
	  trunk/share/PP/HGH/Hf_sc.hgh, trunk/share/PP/HGH/Hg.hgh, trunk/share/PP/HGH/Hg_sc.hgh,
	  trunk/share/PP/HGH/Ho_sc.hgh, trunk/share/PP/HGH/I.hgh, trunk/share/PP/HGH/In.hgh,
	  trunk/share/PP/HGH/In_sc.hgh, trunk/share/PP/HGH/Ir.hgh, trunk/share/PP/HGH/Ir_sc.hgh,
	  trunk/share/PP/HGH/K.hgh, trunk/share/PP/HGH/K_sc.hgh, trunk/share/PP/HGH/Kr.hgh,
	  trunk/share/PP/HGH/La_sc.hgh, trunk/share/PP/HGH/Li.hgh, trunk/share/PP/HGH/Li_sc.hgh,
	  trunk/share/PP/HGH/Lu_sc.hgh, trunk/share/PP/HGH/Mg.hgh, trunk/share/PP/HGH/Mg_sc.hgh,
	  trunk/share/PP/HGH/Mn.hgh, trunk/share/PP/HGH/Mn_sc.hgh, trunk/share/PP/HGH/Mo.hgh,
	  trunk/share/PP/HGH/Mo_sc.hgh, trunk/share/PP/HGH/N.hgh, trunk/share/PP/HGH/Na.hgh,
	  trunk/share/PP/HGH/Na_sc.hgh, trunk/share/PP/HGH/Nb.hgh, trunk/share/PP/HGH/Nb_sc.hgh,
	  trunk/share/PP/HGH/Nd_sc.hgh, trunk/share/PP/HGH/Ne.hgh, trunk/share/PP/HGH/Ni.hgh,
	  trunk/share/PP/HGH/Ni_sc.hgh, trunk/share/PP/HGH/O.hgh, trunk/share/PP/HGH/Os.hgh,
	  trunk/share/PP/HGH/Os_sc.hgh, trunk/share/PP/HGH/P.hgh, trunk/share/PP/HGH/Pb.hgh,
	  trunk/share/PP/HGH/Pd.hgh, trunk/share/PP/HGH/Pd_sc.hgh, trunk/share/PP/HGH/Pm_sc.hgh,
	  trunk/share/PP/HGH/Po.hgh, trunk/share/PP/HGH/Pr_sc.hgh, trunk/share/PP/HGH/Pt.hgh,
	  trunk/share/PP/HGH/Pt_sc.hgh, trunk/share/PP/HGH/Rb.hgh, trunk/share/PP/HGH/Rb_sc.hgh,
	  trunk/share/PP/HGH/Re.hgh, trunk/share/PP/HGH/Re_sc.hgh, trunk/share/PP/HGH/Rh.hgh,
	  trunk/share/PP/HGH/Rh_sc.hgh, trunk/share/PP/HGH/Rn.hgh, trunk/share/PP/HGH/Ru.hgh,
	  trunk/share/PP/HGH/Ru_sc.hgh, trunk/share/PP/HGH/S.hgh, trunk/share/PP/HGH/Sb.hgh,
	  trunk/share/PP/HGH/Sc.hgh, trunk/share/PP/HGH/Sc_sc.hgh, trunk/share/PP/HGH/Se.hgh,
	  trunk/share/PP/HGH/Si.hgh, trunk/share/PP/HGH/Sm_sc.hgh, trunk/share/PP/HGH/Sn.hgh,
	  trunk/share/PP/HGH/Sr.hgh, trunk/share/PP/HGH/Sr_sc.hgh, trunk/share/PP/HGH/Ta.hgh,
	  trunk/share/PP/HGH/Ta_sc.hgh, trunk/share/PP/HGH/Tb_sc.hgh, trunk/share/PP/HGH/Tc.hgh,
	  trunk/share/PP/HGH/Tc_sc.hgh, trunk/share/PP/HGH/Te.hgh, trunk/share/PP/HGH/Ti.hgh,
	  trunk/share/PP/HGH/Ti_sc.hgh, trunk/share/PP/HGH/Tl.hgh, trunk/share/PP/HGH/Tl_sc.hgh,
	  trunk/share/PP/HGH/Tm_sc.hgh, trunk/share/PP/HGH/V.hgh, trunk/share/PP/HGH/V_sc.hgh,
	  trunk/share/PP/HGH/W.hgh, trunk/share/PP/HGH/W_sc.hgh, trunk/share/PP/HGH/Xe.hgh,
	  trunk/share/PP/HGH/Y.hgh, trunk/share/PP/HGH/Y_sc.hgh, trunk/share/PP/HGH/Yb_sc.hgh,
	  trunk/share/PP/HGH/Zn.hgh, trunk/share/PP/HGH/Zn_sc.hgh, trunk/share/PP/HGH/Zr.hgh,
	  trunk/share/PP/HGH/Zr_sc.hgh, trunk/share/PP/HGH/configurations, trunk/src/atomic.F90,
	  trunk/src/hgh.F90:
	  The file configurations was not closed, which lead to some nice IO error.
	  As I had to change it, as took the oportunity to put the configurations
	  where they belonged to, i.e., in the .hgh files, instead of in an external file.

2003-06-08  acastro

	* [r441] trunk/liboct/interface.c:
	  Let us use gsl_asinh instead of asinh, to make sure it is loaded always.
	* [r440] trunk/liboct/interface.c, trunk/src/td_exp.F90:
	  Bug fixes:
	  * In interface.c, the upper case name of oct_erf was wrong.
	  * Apparently, (M_ONE, M_ZERO) is not a standard Fortran 90 complex constant...

2003-06-07  marques

	* [r439] trunk/doc/octopus.texi, trunk/share/PP/TM2/Li.ascii:
	  texi did not compile. Patch by Tobias.
	  added the Li potential to the cvs.

2003-06-06  acastro

	* [r438] trunk/src/Makefile.am:
	  Bug fixed.

2003-05-31  acastro

	* [r437] trunk/src/atomic.F90, trunk/src/hgh.F90, trunk/src/tm.F90:
	  Code-saving change: subroutines "calculate_valence_screening" in
	  hgh and tm modules go away, on behalf of "atomhxc" subroutine
	  in module atomic, where it belongs more naturally.
	* [r436] trunk/doc/octopus.dvi, trunk/doc/octopus.info, trunk/doc/octopus.texi:
	  Bug fixed in octopus.texi

2003-05-30  acastro

	* [r435] trunk/src/atomic.F90, trunk/src/h_external_pot.F90, trunk/src/hgh.F90,
	  trunk/src/lcao.F90, trunk/src/ps.F90, trunk/src/tm.F90:
	  Semicore HGH pseudopotentials are now handled.
	  (e.g., Na with 2s^2 2p^6 3s configuration)
	  It involved quite a few small changes in a lot of subroutines, so
	  although I checked a few atoms to make sure I did not introduce any
	  bug in the process, the first commit is always buggy...
	  
	  To make use of them, in the "species" block, instead of "Na", "Cr" for
	  the normal valence configuration, one has to put "Na_sc", "Cr_sc", and
	  so on (not that not all the elements have a semicore configuration).
	  The name changes then accordingly in the "Coordinates" block or in the
	  xyz file. The pdb files pose a problem to this.

2003-05-29  acastro

	* [r434] trunk/src/states.F90:
	  Bug fix.
	  This bug has been there two months unnoticed...

2003-05-28  acastro

	* [r433] trunk/share/PP/HGH/Ag.hgh, trunk/share/PP/HGH/Al.hgh, trunk/share/PP/HGH/Ar.hgh,
	  trunk/share/PP/HGH/As.hgh, trunk/share/PP/HGH/At.hgh, trunk/share/PP/HGH/Au.hgh,
	  trunk/share/PP/HGH/B.hgh, trunk/share/PP/HGH/Ba.hgh, trunk/share/PP/HGH/Be.hgh,
	  trunk/share/PP/HGH/Bi.hgh, trunk/share/PP/HGH/Br.hgh, trunk/share/PP/HGH/C.hgh,
	  trunk/share/PP/HGH/Ca.hgh, trunk/share/PP/HGH/Cd.hgh, trunk/share/PP/HGH/Cl.hgh,
	  trunk/share/PP/HGH/Co.hgh, trunk/share/PP/HGH/Cr.hgh, trunk/share/PP/HGH/Cs.hgh,
	  trunk/share/PP/HGH/Cu.hgh, trunk/share/PP/HGH/F.hgh, trunk/share/PP/HGH/Fe.hgh,
	  trunk/share/PP/HGH/Ga.hgh, trunk/share/PP/HGH/Ge.hgh, trunk/share/PP/HGH/H.hgh,
	  trunk/share/PP/HGH/He.hgh, trunk/share/PP/HGH/Hg.hgh, trunk/share/PP/HGH/I.hgh,
	  trunk/share/PP/HGH/Ir.hgh, trunk/share/PP/HGH/K.hgh, trunk/share/PP/HGH/Kr.hgh,
	  trunk/share/PP/HGH/Li.hgh, trunk/share/PP/HGH/Mg.hgh, trunk/share/PP/HGH/Mn.hgh,
	  trunk/share/PP/HGH/Mo.hgh, trunk/share/PP/HGH/N.hgh, trunk/share/PP/HGH/Na.hgh,
	  trunk/share/PP/HGH/Nb.hgh, trunk/share/PP/HGH/Ne.hgh, trunk/share/PP/HGH/Ni.hgh,
	  trunk/share/PP/HGH/O.hgh, trunk/share/PP/HGH/Os.hgh, trunk/share/PP/HGH/P.hgh,
	  trunk/share/PP/HGH/Pb.hgh, trunk/share/PP/HGH/Pd.hgh, trunk/share/PP/HGH/Po.hgh,
	  trunk/share/PP/HGH/Pt.hgh, trunk/share/PP/HGH/Rb.hgh, trunk/share/PP/HGH/Re.hgh,
	  trunk/share/PP/HGH/Rh.hgh, trunk/share/PP/HGH/Rn.hgh, trunk/share/PP/HGH/Ru.hgh,
	  trunk/share/PP/HGH/S.hgh, trunk/share/PP/HGH/Sb.hgh, trunk/share/PP/HGH/Sc.hgh,
	  trunk/share/PP/HGH/Se.hgh, trunk/share/PP/HGH/Sn.hgh, trunk/share/PP/HGH/Sr.hgh,
	  trunk/share/PP/HGH/Ta.hgh, trunk/share/PP/HGH/Tc.hgh, trunk/share/PP/HGH/Te.hgh,
	  trunk/share/PP/HGH/Ti.hgh, trunk/share/PP/HGH/Tl.hgh, trunk/share/PP/HGH/V.hgh,
	  trunk/share/PP/HGH/W.hgh, trunk/share/PP/HGH/Xe.hgh, trunk/share/PP/HGH/Y.hgh,
	  trunk/share/PP/HGH/Zn.hgh, trunk/share/PP/HGH/Zr.hgh, trunk/src/atomic.F90,
	  trunk/src/hgh.F90:
	  (*) Added in module atomic, utilities to read and write atomic valence
	  configurations. Used by hgh to build the pseudo-atomic-wavefunctions.
	  (**) In hgh module, the occupations are now read through the
	  SHARE_OCTOPUS/PP/HGH/configurations file, not in the first line
	  of the pseudopotential *.hgh file.
	  (***) Removed that first line from all the *.hgh files.
	* [r432] trunk/share/PP/HGH/Makefile.am:
	  I forgot to change this.
	* [r431] trunk/share/PP/HGH/configurations:
	  Added a "configurations" file, to characterise the valence configurations
	  used by Goedecker to build his pseudopotentials.
	* [r430] trunk/share/PP/HGH/W_sc.hgh:
	  Bug fixed.
	* [r429] trunk/share/PP/HGH/Yb_sc.hgh:
	  Bug fix.
	  Fixed the number of valence electrons also for Ytterbium.
	* [r428] trunk/share/PP/HGH/Sm_sc.hgh:
	  Bug fix.
	  The important "Samarium" atom, whose existence I had completely ignored,
	  and which costs about $5/g, has 16 electrons in its HGH valence
	  configuration.

2003-05-22  marques

	* [r427] trunk/doc/octopus.texi:
	  Tobias added an entry to the manual, describing the make_st utility.

2003-05-22  acastro

	* [r426] trunk/src/tm.F90:
	  Bug fixed.
	  Bug found and tracked by Eugene Kadantsev.
	  Some day I will do the cleaning up of the pseudo stuff, which
	  is in the wish list for next release...
	* [r425] trunk/src/global.F90:
	  Bug fixed.
	  This subtle thing crashed in some alpha machine.

2003-05-21  marques

	* [r424] trunk/src/make_st.F90:
	  Some bugs fixed.
	  Also the syntax of the input (that is still not described in the manual) changed.

2003-05-20  acastro

	* [r423] trunk/src/xc_GGA.F90:
	  Change of the noncollinear GGA routine.
	  
	  Last version of GGA lead to non-converging calculation (e.g., Au3).
	  Now it turns out that everything may be simplified, since apparentyly
	  the operators R(r) (local rotation in spin space to the frame where the
	  density is diagonal) and the gradient commute. So:
	  
	  R(r)*grad[rho(r)]*conjg(R(r)) = grad[R(r)*rho(r)*conjg(R(r))]
	  
	  (conjg(R(r)) is the hermitian conjugate of R(r)).
	  
	  Before the routine was doing R(r)*grad[rho(r)]*conjg(R(r)),
	  it involved the explicit calculation of the matrices R(r),
	  it was complicated and did not work. Now it is doing
	  grad[R(r)*rho(r)*conjg(R(r))], the matrices R don't need to be
	  calculated, and seems to work. The point is that before I thought
	  that grad[R(r)*rho(r)*conjg(R(r))] did not make any sense at all.
	  
	  I think this is what the (few) people that has done non-collinear GGA
	  has done (except for Kleinman, who has added some extra term). I do not
	  know if they are aware of previous equality, because I have not seen
	  it prooved or even stated anywhere.

2003-05-19  marques

	* [r422] trunk/liboct/symbols.c:
	  Forgot to deallocate a string (bug tracked by Wang Feng)

2003-05-19  acastro

	* [r421] trunk/src/eigen.F90:
	  Bug fixed.
	  That initialized variable made the code crash sometimes.

2003-05-13  marques

	* [r420] trunk/src/Makefile.am:
	  Someone forgot to add this file ;))))
	* [r419] trunk/src/opt_control.F90:
	  A few changes by Tobias.

2003-05-09  acastro

	* [r418] trunk/src/xc_GGA.F90:
	  Bug fixed.

2003-05-08  marques

	* [r417] trunk/src/h.F90:
	  Corrected bug found by Dr. Wang Feng in the calculation of the absorbing
	  boundaries.

2003-05-07  acastro

	* [r416] trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/td.F90,
	  trunk/src/td_init.F90, trunk/src/td_write.F90:
	  I have added a facility to calculate the component of the ground state
	  in the time-dependent TDDFT many-electron wave-function. That thing is
	  just the determinant of the matrix formed by the dot-products of the
	  single particle states of one and other Slater determinant.
	  It is written when the variable TDWriteGSComponent is set to yes in the input
	  file. It is written every OutputEvery iterations, to file
	  "td.general/gs_projection".
	  It took me a while to set the MPI version; some communication is needed.
	  It is the first version of it, so it might have some bugs, since debugging
	  MPI stuff is awful. Also, I am not very confident about the way partial
	  occupancies are (dis)regarded. But I wanted to finally submit this crap.
	  
	  To do that, I have done some extra things that could very well go away,
	  namely routines "states_copy" and "states_null". But we can talk about that
	  in next octopus meeting.

2003-05-05  acastro

	* [r415] trunk/src/specie.F90:
	  Bug fix.
	  Those not-nullified pointers caused some error in the linux cluster.

2003-04-29  acastro

	* [r414] trunk/src/math.F90:
	  Functions cdet and zdet return the determinant of a square matrix a,
	  using LAPACK.

2003-04-27  acastro

	* [r413] trunk/src/eigen_plan.F90, trunk/src/mesh_inc.F90:
	  Bug fixed.

2003-04-23  acastro

	* [r412] trunk/src/eigen.F90, trunk/src/eigen_cg2.F90, trunk/src/scf.F90,
	  trunk/src/states_inc.F90, trunk/src/unocc.F90:
	  (1) The criterium to consider if a given eigenpair is converged within
	  the diagonalization process is now the same for all the methods (CG and
	  preconditioned Lanczos): it considers the norm of the residue (that
	  is, || H|psi> - <psi|H|psi>|psi> ||, for normalized |psi> ). So now
	  the methods can be compared consistently. The variables
	  EigenSolverInitTolerance and EigenSolverFinalTolerance refer to this
	  number and should of the order of 1e-4 or 1e-5, I think.
	  
	  (2) After the diagonalization, the eigenvalues are not calculated again
	  because are already known. I have changed a bit the way the SCF cycle is
	  done because I think this looks better, but I am not sure about this. It
	  does not seem to make much difference, but take a look at the code in case
	  you liked it better before.

2003-04-17  marques

	* [r411] trunk/src/eigen_plan.F90:
	  File is now properly indented (my F90 compiler was complaining that tabs are
	  an extension to Fortran 90!)
	* [r410] trunk/src/states.F90:
	  Bug corrected: calc_current did not compile with MPI.

2003-04-15  acastro

	* [r409] trunk/src/Makefile.am, trunk/src/eigen.F90, trunk/src/eigen_plan.F90,
	  trunk/src/mesh_inc.F90, trunk/src/states.F90, trunk/src/states_inc.F90:
	  Preconditioned Lanczos (PLAN) as implemented by Chelikowsky's group (credit
	  is to be given to Y. Saad and K. Wu, I think) is now available in octopus.
	  Preconditioned is implemented via their idea of filtering (and thus it is
	  good for real space). I think that it is much better that CG as we had it
	  before. I don't know if it is better to preconditioned-CG, since we don't
	  have that yet -- still working on it. Some comments:
	  * Careful bechmarking between the methods is not yet possible, since the
	  convergence checks are now not compatible: in CG it compared previous
	  eigenvalue to current one, and in PLAN it checks out the residuals. I
	  think this is the correct thing, and will change CG in the next days.
	  * Related to previous comment, the variables EigenSolverInitTolerance,...
	  should now have a much bigger value (1e-4, for example) for PLAN, since
	  we don't need the residuals to be that small (I think).
	  * Incidentally, I changed the random state builder a bit (a R_FUNC(mesh_random)
	  routine is now defined...)

2003-04-12  rozzi

	* [r408] trunk/src/mesh_create.F90:
	  compatibility with spheric and cylindric mesh (when allowed) and calculation of primitive
	  lattice vectors

2003-04-11  rozzi

	* [r407] trunk/src/states_kpoints.F90:
	  Bug corrected in output format

2003-04-10  rozzi

	* [r406] trunk/src/scf.F90:
	  Added call kpoints_write_info
	* [r405] trunk/src/mesh_create.F90:
	  Now it generates primitive vectors and shifts to nearest neighbour primitive cells
	  (necessary for Non local Pesudo folding for periodic systems)
	* [r404] trunk/src/mesh.F90:
	  *) Added lattice and reciprocal lattice primitive vectors. Generated shift to reach all
	  the equivalent points in the nearest neighbour primitive cells.
	  *) Added primitive lattice info in output
	* [r403] trunk/src/hartree.F90:
	  Automatically switches to the correct Poisson solver for periodic systems (more user
	  friendly)
	* [r402] trunk/src/states_kpoints.F90:
	  Added kpoints_write_info subroutine

2003-04-08  acastro

	* [r401] trunk/configure.ac, trunk/src/eigen.F90:
	  A couple of bugs created by previous commit are here fixed.
	* [r400] trunk/configure.ac, trunk/src/Makefile.am, trunk/src/config.h.in,
	  trunk/src/eigen.F90, trunk/src/eigen_cg3.F90, trunk/src/states.F90:
	  Added a Lanczos diagonalization, by making use of the TRLan package,
	  by K. Wu and H. Simon. If TRLan is not installed, all the stuff is
	  ignored thanks to the preprocessor. I have added some stuff in the
	  configure.ac in order to detect it, although maybe I will have to
	  refine that in the future (I am not very good in writing autoconf
	  scripts). I have put it in my (hopeless?) effort
	  to converge the azobenzene, and also for the sake of comparison. For
	  the moment, I am having some troubles with degeneracies, I am going
	  to ask Dr Wu.
	  (Note: this used to be in the code in the past)

2003-04-08  marques

	* [r399] trunk/src/Makefile.am:
	  Something missing in this file for 5 days and 22 hours ;)

2003-04-07  rozzi

	* [r398] trunk/src/Makefile.am:
	  states_kpoints.F90 was missing
	* [r397] trunk/src/out_inc.F90:
	  Bug corrected: different offset in periodic directions
	* [r396] trunk/src/mesh_create.F90:
	  mesh spacing is adjusted to fit the boxsize (irrelevant for finite systems, but necessary
	  for periodic)
	* [r395] trunk/src/mesh.F90:
	  Bug corrected: the fourier transfor had the wrong periodicity for polymers
	* [r394] trunk/src/out_inc.F90:
	  Now, if OutputDX is set, the .dx files are in native DX format, but, for polymers, only
	  the real part of the wave function is written.

2003-04-05  marques

	* [r393] trunk/src/out_inc.F90, trunk/src/states.F90, trunk/src/states_inc.F90:
	  *) Fixed bug in outputtinh netCDF format. I had forgotten that stupid fortran
	  uses transposed matrices ;(
	  *) I think the ELF is now correct... let us find it if it is also useful ;)
	* [r392] trunk/src/mesh_inc.F90:
	  debug stuff forgotten, now deleted ;)

2003-04-04  rozzi

	* [r391] trunk/src/mesh_inc.F90:
	  bug corrected in the folding procedure
	* [r390] trunk/src/h.F90:
	  reciprocal space for local potential must be used for periodic systems: inserted a check
	  on input
	* [r389] trunk/src/main.F90:
	  info about dimensions are written only after the logo

2003-04-04  marques

	* [r388] trunk/src/mix.F90, trunk/src/states.F90, trunk/src/states_inc.F90:
	  The expression for the TDELF was not correct!!!!! I think it is OK now.
	* [r387] trunk/configure.ac:
	  NetCDF is *not* used by default. Use ./configure --with-netcdf to turn it on.

2003-04-03  marques

	* [r386] trunk/configure.ac, trunk/doc/octopus.texi, trunk/src/Makefile.am,
	  trunk/src/config.h.in, trunk/src/out.F90, trunk/src/out_inc.F90:
	  *) Changes to configuration scripts to look for the netcdf library
	  *) ?octopus-pol* no longer needed, so it was removed from the configuration
	  *) octopus can now output (binary) netcdf things that can be read by openDX.
	  the files are 3 times smaller than the corresponding text files.

2003-04-03  rozzi

	* [r385] trunk/src/states_kpoints.F90:
	  kpoints are generated along the periodic dimension(s) of the system, assuming that a
	  center of inversion exists. k-weights don't take the symmetry into account. At the
	  moment...
	* [r384] trunk/src/states_inc.F90:
	  m%zsize -> m%xsize in write_restart
	* [r383] trunk/src/states.F90:
	  added some checks on NumberKPoints and PeriodicDimensions
	* [r382] trunk/src/run.F90:
	  writes info about PeriodicDimensions
	* [r381] trunk/src/mesh_inc.F90:
	  changed boundary, and zero boundary, in the periodic direction(s)
	* [r380] trunk/src/mesh_create.F90:
	  last mesh point is removed in periodic direction(s);
	  box check extended
	* [r379] trunk/src/mesh.F90:
	  conf%periodic_dim is used to control double box, and fft_optimization
	* [r378] trunk/src/hartree.F90:
	  solver method 2 is controlled by conf%periodic_dim
	* [r377] trunk/src/h_inc.F90:
	  correct expression for kinetic energy
	* [r376] trunk/src/h.F90:
	  cylinder potential has now the axis along x direction
	* [r375] trunk/src/global.F90:
	  the new variable conf%periodic_dim obviously indicates the number of periodic dimension of
	  the system: 1=x; 2=x,y; 3=x,y,z

2003-04-02  marques

	* [r374] trunk/src/states_inc.F90:
	  sorry, file had a bug. This is the correct file.
	* [r373] trunk/src/states_inc.F90:
	  very small changes in the elf routine.

2003-04-02  acastro

	* [r372] trunk/src/states_inc.F90:
	  Now the dot products, norms and orthonormalization for the states in
	  Fourier space. Also the transformations between RS and FS.
	* [r371] trunk/src/mesh.F90, trunk/src/mesh_inc.F90:
	  * Dot products, norms, and integrations defined now in Fourier space.
	  The names of the functions are equal but with an extra "q".
	  * Two subroutines ease the RS<=>FS transformations (mesh_rs2fs/mesh_fs2rs).
	  * Data type mesh now includes the dnpw/znpw integer, which are the number
	  of plane waves when using real/complex wavefunction (roughly double in
	  this latter case). Also, the integration volume in FS, vol_ppw.
	  
	  I have disregarded k points. This stuff should not definitive, but it
	  will do the job for defining a preconditioning in the CG algorithm (which,
	  by the way, finally works -- will commit soon).
	  The definitions are in the "mesh" module; next step is defining all the
	  stuff also in the states module.
	* [r370] trunk/src/Makefile.am, trunk/src/eigen.F90, trunk/src/eigen_cg1.F90,
	  trunk/src/unocc.F90:
	  Removed the "old-style" cg algorithm. The file "eigen_cg1" is now
	  empty, awaiting for the FS version of current algorithm.

2003-04-01  acastro

	* [r369] trunk/src/ps.F90:
	  Bug fix.

2003-03-31  marques

	* [r368] trunk/share/recipes/en/sugo_zucchini.txt:
	  We are today with a poetic vein. From Carlo.
	* [r367] trunk/share/recipes/en/porc_honey.txt:
	  Why not also a pork recipe ;))))
	* [r366] trunk/configure.ac, trunk/share/recipes/Makefile.am, trunk/share/recipes/it,
	  trunk/share/recipes/it/Makefile.am, trunk/share/recipes/it/polpo_galiziana.txt:
	  Added a recipe in italian. Carlo's translation;)
	* [r365] trunk/src/Makefile.am, trunk/src/make_st.F90, trunk/src/ps.F90:
	  *) ps.F90 needed a slight change in order to run with the -C flag
	  *) added small utility to add a gaussian wave-packet for octopus. It is
	  not trivial to use such thing (one has to play with ExtraStates and
	  ExcessCharge), but it seems to work. At least I am throwing an electron
	  at Na_8^2+ now ;)

2003-03-30  acastro

	* [r364] trunk/src/h_external_pot.F90:
	  Bug fix.
	  Description: Now variable "ps%so_l_max" is -1 if no spin-orbit corrections
	  could be read from the pseudopotential file. In that case, subroutine
	  "specie_get_nl_part" should not be called in "build_nl_part". Also,
	  if l=0, it should not be called (there are no spin-orbit corrections
	  for l=0).
	* [r363] trunk/src/ps.F90, trunk/src/tm.F90:
	  Some bugs fixed in tm.F90 and ps.F90. They only showed up when
	  compiling with the "-C" option in the ifc compiler.

2003-03-28  marques

	* [r362] trunk/doc/octopus.texi:
	  RecipeLang is no longer needed ;)
	* [r361] trunk/liboct/interface.c, trunk/liboct/recipes.c, trunk/share/Makefile.am,
	  trunk/share/recipes, trunk/share/recipes/Makefile.am, trunk/share/recipes/disclaimer.txt,
	  trunk/share/recipes/en, trunk/share/recipes/en/Makefile.am,
	  trunk/share/recipes/en/octopus_gallega.txt, trunk/share/recipes/es,
	  trunk/share/recipes/es/Makefile.am, trunk/share/recipes/es/pulpo_a_feira.txt,
	  trunk/src/pulpo.F90:
	  Rewrote runmode 99. It is much nicer now ;)

2003-03-27  marques

	* [r360] trunk/build/octopus.spec.in:
	  Small changes to make make rpm work again.

2003-03-20  acastro

	* [r359] trunk/src/atom.F90:
	  Now the initial random velocities are set in such a way that the
	  initial center of mass velocity is null.
	* [r358] trunk/src/Makefile.am, trunk/src/nbo2xyz.F90, trunk/src/xyzanim.F90:
	  Bug fix. (first one for octopus-1.1...)
	  The little program "nbo2xyz" was broken. I renamed to a more
	  logical name "xyzanim", and fixed it.

2003-03-18  marques

	* [r357] trunk/Makefile.am, trunk/build/octopus.spec.in, trunk/doc/Makefile.am,
	  trunk/liboct/config.h.in:
	  small changes to rpm build.

2003-03-17  marques

	* [r356] trunk/debian/info:
	  small bug in debian rules

2003-03-17  acastro

	* [r355] trunk/doc/octopus.dvi, trunk/doc/octopus.info, trunk/doc/octopus.texi:
	  Removed the warning from the manual.

2003-03-17  marques

	* [r354] trunk/configure.ac, trunk/debian/changelog:
	  changed version number to 1.1

2003-03-17  acastro

	* [r353] trunk/src/h_external_pot.F90, trunk/src/ps.F90:
	  (Damned) buf fix.
	  Description: SO was not properly working if the local component of
	  the pseudopotential was not null. The reason was a couple of pretty
	  hidden bugs.
	* [r352] trunk/doc/cosine.eps, trunk/doc/gaussian.eps, trunk/doc/octopus.dvi,
	  trunk/doc/octopus.info, trunk/doc/octopus.texi, trunk/doc/ramp.eps:
	  Finished the propagators stuff. Added some (hopefully) clarifying
	  plots to describe the laser shapes.

2003-03-17  marques

	* [r351] trunk/doc/octopus.dvi, trunk/doc/octopus.info, trunk/doc/octopus.texi:
	  Some more changes to the manual (By the way, don't you think we should delete
	  the .info and the .dvi from the cvs?)

2003-03-16  acastro

	* [r350] trunk/doc/octopus.dvi, trunk/doc/octopus.info, trunk/doc/octopus.texi:
	  Some more changes to the manual.

2003-03-15  marques

	* [r349] trunk/configure.ac, trunk/doc/octopus-faq.texi, trunk/doc/octopus.info,
	  trunk/doc/octopus.texi, trunk/src/broad.F90, trunk/src/choose_st.F90,
	  trunk/src/excitations.F90, trunk/src/global.F90, trunk/src/h.F90,
	  trunk/src/hs_from_acc.F90, trunk/src/hs_from_mult.F90, trunk/src/main.F90,
	  trunk/src/mesh_create.F90, trunk/src/nbo2xyz.F90, trunk/src/phonon_spectrum.F90,
	  trunk/src/strength_function.F90, trunk/src/td_init.F90:
	  Lots of small changes.
	  *) the "z" had misteriously disappeared when compiling with complex wf. Fixed
	  *) lsize is now *half* the side of the box. This is consistent with the
	  manual, and with the other boxes.
	  *) Removed "TD" from the variables (TD)OutputLaser, (TD)AbsorbingBoud...,
	  (TD)AB... I think it is nicer like this.
	  *) Dimensions are now print in main.F90
	  *) Updated the manual. There are still things missing, but it is better now ;)

2003-03-14  acastro

	* [r348] trunk/doc/octopus.dvi, trunk/doc/octopus.info, trunk/doc/octopus.texi:
	  Some changes to the manual. A lot has to be done previous to the
	  release (we have to make sure we don't overlap; I will take care
	  of the time propagators and related stuff).
	* [r347] trunk/src/h_external_pot.F90:
	  Bug fix.
	  Description: the comparison between the "uvu" pseudopotential variables
	  calculated in the logarithmic grid and in the cartesian grid was no
	  longer working. For two reasons, I think: the expression for the
	  cartesian calculation was wrong, and when using spin-polarized or
	  spinors calculation, the comparison should not work, because the
	  wave functions used in the cartesian expression are the spin-polarized
	  ones, whereas the expression in the logarithmic grid make use of the
	  spin-unpolarized wavefuctions (since these are the ones used to define
	  the KB projectors). So I removed the comparison in this case.
	  Anyway this should be cleared up a bit more, but I will leave it as is
	  for this release.

2003-03-13  acastro

	* [r346] trunk/src/ps.F90, trunk/src/tm.F90:
	  (*) The threshold value used to define the radius of the nonlocal regions
	  of the pseudopotentials, in "get_cutoff_radii" subroutine (tm.F90), has
	  been relaxed from 1e-8 to 1e-6. This reduces the value of the radii, but
	  the new values should be enough. The reason for this is the radius obtained
	  when using Vanderbilt-type function for the local part were unnecesarily
	  big for the old value, and this could be the reason of the reported bug
	  when using that feature (but I am not sure about this).
	  (**) Vanderbilt function cannot be used if l_max = 0 (e.g. H).
	  (***) The "cut-off" radius that defines Vanderbilt function has been
	  reduced from 5.0 to 3.0.

2003-03-12  acastro

	* [r345] trunk/src/td_exp.F90:
	  Lanczos method works now for both hermitian (no imaginary potential
	  absorption in the boundaries) or non-hermitian hamiltonians (the
	  contrary).

2003-03-10  acastro

	* [r344] trunk/src/lcao.F90:
	  Bug fix.
	  Description: minimum size for work array passed to dsygv in lcao
	  made "sometimes" the routine to crash in an alpha machine. I increased
	  the size from 3*dimension-1 to 5*dimension, and it seems to work.
	  (It is not our bug, but either the compiler, or the dxml fault!)

2003-03-06  marques

	* [r343] trunk/doc/octopus.texi:
	  Update from Tobias:
	  remove TDSaveIter
	  Make review of TDDFT available to info users

2003-03-03  acastro

	* [r342] trunk/src/ps.F90:
	  Bug fix.
	  Description: wrong limits defining the spin-orbit coupling constants.
	  Fortunately you warned me you had changed that! I don't know what
	  the ifc complained about, but this is the way it should be.
	  Anyway, before code release I will try to clean up a bit more that part.

2003-03-03  marques

	* [r341] trunk/src/out.F90, trunk/src/td.F90, trunk/src/td_init.F90, trunk/src/td_write.F90,
	  trunk/src/unocc.F90:
	  *) unoccupied eigenvalues now go to the static directory, as they should
	  *) I cast TDSaveIter to oblivion in favor of OutputIter.

2003-03-03  acastro

	* [r340] trunk/src/td_exp.F90, trunk/src/xc_GGA.F90:
	  (*) Bug fix: In xc_GGA.F90, stupid alpha compiler has a bug that
	  made the compiler crash with no reason, issuing a compiler bug
	  message. I finally could make that stupid hack to circunvent it.
	  (*) Bug fix: In td_exp.F90, subroutine lanczos, the zero-th component
	  of array v should be initialized to zero, or else the code will
	  misbehave on alpha machines.
	  (*) Buf fix: In td_exp.F90, subroutine suzuki, variable ik should not
	  be defined, since it is a global variable of subroutine td_exp.
	* [r339] trunk/src/td_exp.F90:
	  Bug fix.
	  Description: Lanczos exponential method, on some occasions, did not
	  work. I introduced this bug when I corrected the last one.

2003-03-02  acastro

	* [r338] trunk/src/run.F90:
	  Bug fix.
	  Description: in parallel runs, hamiltonian_span crashed on some
	  compilers/platforms and was wrongly calculated on others. The reason
	  is it needs the lowest eigenvalues, known on by process #0. I have
	  put a brodcast before the call to hamiltonian_span.
	* [r337] trunk/src/ps.F90:
	  Bug fix.
	  Description : some compilers/platforms (i.e. DIGITAL Fortran 95 v5.3 on
	  alpha OSF1 V4.0) crash if a variable is not initialized explicitly and
	  an operation is performed on it. It happened with "ps%k" in "tm_load".

2003-03-01  marques

	* [r336] trunk/doc/octopus-faq.texi, trunk/src/Makefile.am, trunk/src/global.F90,
	  trunk/src/h_external_pot.F90, trunk/src/h_forces.F90, trunk/src/main.F90,
	  trunk/src/scf.F90, trunk/src/specie.F90, trunk/src/specie1D.F90, trunk/src/specie3D.F90:
	  *) More changes to the FAQ from Tobias
	  *) Forces half-cleaned. The rest is just astetics ;) As a side-product I also got the
	  forces working for 1D/2D/usdef systems. Not fast, but works ;)
	  *) Octopus now prints at the beginning not only the version, but the build date. Feature
	  requested by Heiko.

2003-02-28  marques

	* [r335] trunk/Makefile.am, trunk/configure.ac, trunk/doc/Makefile.am,
	  trunk/doc/octopus-faq.texi, trunk/src/config.h.in, trunk/src/opt_control.F90,
	  trunk/src/out_inc.F90, trunk/src/ps.F90, trunk/src/states_inc.F90:
	  *) Got rid of the faq directory (now everything is under docs)
	  *) Applied Tobias patch for octopus-faq
	  *) A couple of details that made ifc -C itch (it does not work properly with
	  states_inc.F90, though)
	  *) out_inc now prints complex wfs also

2003-02-28  acastro

	* [r334] trunk/src/atom.F90:
	  Bug fixed.
	  Description: unformatted read on a formatted file (XYY velocities).

2003-02-26  acastro

	* [r333] trunk/share/logo:
	  *** empty log message ***
	* [r332] trunk/src/run.F90, trunk/src/unocc.F90:
	  This is the right commit; previous files were the wrong ones.
	* [r331] trunk/src/eigen.F90, trunk/src/run.F90, trunk/src/unocc.F90:
	  * Code crashed if LCAOStart = yes and any of the species was not
	  a pseudopotential. So I have added a couple of lines to avoid the
	  call to LCAO if any of the species has the flag "local". Two
	  comments: (i) the name "local", as previously noted, is a bit
	  unfortunate, and (ii) maybe in the future LCAO should work in
	  all cases. But the easiest way out was this one.
	  * The "unoccupied" states calculation needs not be self-consistent.
	  This way it is simpler.
	  * I added a short copyright notice after the logo, with the disclaimer
	  of warranty, in case someone wants to sue us if they get wrong
	  results that lead to an airplane crash on a orphanage, for example.
	  I don't know, maybe it should not be there, what do you think?

2003-02-26  marques

	* [r330] trunk/src/choose_st.F90, trunk/src/eigen_cg2.F90, trunk/src/lasers.F90,
	  trunk/src/mesh_create.F90, trunk/src/opt_control.F90, trunk/src/out_inc.F90,
	  trunk/src/specie.F90, trunk/src/specie1D.F90, trunk/src/states_inc.F90,
	  trunk/src/td_exp.F90, trunk/src/td_rti.F90, trunk/src/unocc.F90:
	  *) Optimum control seems to be working, at least for the 1D harmonic oscillator
	  with non interacting particles ;)
	  *) I have a concern related to states_dotp: when I used this routine from the
	  optimum control it gava crap
	  *) Several small bugs and itches found when compiling octopus with the "-C"
	  (check array bounds, etc.) of the intel compiler.
	  *) Changed slightly the times in the application of the laser field in the
	  split-operator method.

2003-02-24  acastro

	* [r329] trunk/src/mesh.F90, trunk/src/spectrum.F90, trunk/src/td.F90, trunk/src/td_exp.F90:
	  * td_exp.F90: bug fixed in the lanczos method. It only showed up when
	  using it to calculate the exponential part of the nonlocal part
	  of the pseudopotential (so it did not show up in real calculation.
	  But it was a bug nevertheless.
	  * td_exp.F90: bug fixed in the split operator method. It also affected
	  the nonlocal part of the pseudopotential, but in this case it showed
	  up always. Now I think that finally split operator and higuer order
	  Suzuki-Trotter behave as they should.
	  * spectrum.F90: the writing of the files is now formatted. (In some
	  systems, if it is not formatted, long lines are wrapped).
	  * mesh.F90: New input variable: FFTOptimize (logical). It decides wether
	  the FFT grids are optimized or not (that is, wether to add more points
	  in order to have better performance). The reason to have the option
	  to disconnect it is that, for the split operator method to be accurate,
	  we need the operation real-space <=> fourier space to be really
	  inversible, which was not.
	  * td.F90: Removed my last change in the way the first potential is calculated.
	* [r328] trunk/src/Makefile.am, trunk/src/main.F90:
	  Now the code version is written to the output file. I think this was
	  needed for next release of the code (it is a new feature rather than
	  a bug fix, I know, but I thought this just had to be there).

2003-02-21  acastro

	* [r327] trunk/src/Makefile.am:
	  Forgot one dx.
	* [r326] trunk/src/Makefile.am:
	  Removed also the references to the dx stuff in Makefile.am.
	* [r325] trunk/src/xc.F90, trunk/src/xc_GGA.F90:
	  Performance hacks for the GGA calculations:
	  (1) Changed a lot of the stuff in the rotation matrix, etc.
	  (2) GGA correlation mode "PBX" (previously there was only the PBE
	  possibility) now sets the exchange mode to null, but includes
	  exchange in the correlation call. This way a lot of performance
	  is gained. I will explain this carefully in the manual since
	  it is not very clear and elegant.
	  
	  At the end, for a (pretty fine) grid of 270000 points, calculation
	  of the xc potential is reduced from 167 seconds (!!!!) to 17 seconds
	  in a spinors case. Maybe some more hacks can be done. This has to be
	  really fast, since it is a sequential part of the code.

2003-02-21  marques

	* [r324] trunk/doc/octopus.texi, trunk/src/dx.F90, trunk/src/dx_inc.F90,
	  trunk/src/function_to_dx.F90:
	  Removed all traces of not so used utility function_to_dx. Besides, it was
	  not using the correct dx output routine, or interface.
	* [r323] trunk/src/out_inc.F90:
	  DX output is only in one .dx file now => No more absolute filenames

2003-02-21  acastro

	* [r322] trunk/src/td.F90:
	  Sorry about last commit, it was an accident. Now the good one.
	  
	  What I have done is: if the delta kick is applied, the potential
	  is calculated with the perturbed density. That is the potential
	  which should be used when the evolustion starts. I have moved back
	  the calculation of the dipole at t=0, so that it is calculated
	  with the unperturbed density. I think this is correct, isn't it?
	* [r321] trunk/src/td.F90:
	  * A little bug fix in the initialization of td%v_old.
	  * The code is now more informative about the delta field for dipole strength
	  calculations.

2003-02-20  marques

	* [r320] trunk/doc/octopus.texi, trunk/src/Makefile.am, trunk/src/atom.F90,
	  trunk/src/choose_st.F90, trunk/src/excitations.F90, trunk/src/global.F90,
	  trunk/src/h_external_pot.F90, trunk/src/h_forces.F90, trunk/src/h_inc.F90,
	  trunk/src/lcao.F90, trunk/src/main.F90, trunk/src/opt_control.F90, trunk/src/ps.F90,
	  trunk/src/states.F90:
	  Continuing cleaning - several small changes:
	  *) more fixes to the manual by Tobias
	  *) ps%Ur now *is* the wavefunction and not some funny thing as before
	  *) added Debuglevel to control the depth of the print in debug mode
	  *) created a global_init where most things from main now are
	  *) optimum control still has bugs ;(
	* [r319] trunk/doc/octopus.texi:
	  From Tobias Burnus
	  this huge patch does:
	  - Remove O(100) spaces before a colon (French spacing)
	  - Use ``nice'' quotes
	  - Use \rm i (for i^2 = -1) and \rm d for the d t in the integral
	  - Fix several typos

2003-02-20  acastro

	* [r318] trunk/src/tm.F90:
	  Bug fixed.

2003-02-19  marques

	* [r317] trunk/doc/octopus.texi:
	  As Tobias convinced me, there was an umlaut missing!
	* [r316] trunk/doc/octopus.texi:
	  Some corrections to the manual by Tobias Burnus.

2003-02-19  acastro

	* [r315] trunk/src/states.F90, trunk/src/td.F90, trunk/src/td_calc.F90,
	  trunk/src/td_write.F90:
	  * Bug fixed in the calculation/writing of the occupations of the
	  single-particle states.
	  * The calculation of those occupations is moved from an internal
	  subroutine in td to the states module.
	* [r314] trunk/src/td.F90, trunk/src/td_exp.F90:
	  Bug fixes:
	  * The td%v_old was improperly initialized for spinors in td_run_zero_iter.
	  * An arbitrary cut-off slipped in "kinetic" for the split-operator method,
	  because of one of my endless tests.
	  * Removed the "ik" local variable in "local_part", also for the split
	  operator method. (Note: was there any rationale behind its reappearance?)
	  
	  I am working on a couple of other bugs.

2003-02-19  marques

	* [r313] trunk/doc/octopus.texi:
	  Sorry, there were some problems with texinfo versions. File now should work.
	  Also removed the "Donostia" from the adresses. San Sebastian is clearly enough!
	* [r312] trunk/doc/octopus.texi, trunk/src/excitations.F90, trunk/src/function_to_dx.F90,
	  trunk/src/lasers.F90, trunk/src/main.F90, trunk/src/opt_control.F90, trunk/src/run.F90,
	  trunk/src/scf.F90, trunk/src/states_inc.F90, trunk/src/td.F90, trunk/src/td_exp.F90,
	  trunk/src/td_init.F90, trunk/src/td_rti.F90, trunk/src/unocc.F90:
	  *) Merged my code with the one in the cvs
	  -) Several details in the td calculation
	  -) Hopefully bug fixes in the optimum control part (still not working)
	  -) texinfo file did not compile at least in debian.
	  -) read/write_restart does not assume file to be in ./tmp now.

2003-02-18  acastro

	* [r311] trunk/src/h_forces.F90, trunk/src/h_inc.F90, trunk/src/lcao.F90:
	  Three bugs fixed.

2003-02-14  acastro

	* [r310] trunk/liboct/interface.c, trunk/src/hartree.F90, trunk/src/hartree3D.F90,
	  trunk/src/mesh_create.F90:
	  * FFT Poisson solver with spherical cut-off may now be used for all
	  box shapes, either isotropic or not. Maybe useful for quantum dots.
	  * Little bug fixes.

2003-02-12  acastro

	* [r309] trunk/src/td_exp.F90:
	  Horrifying bug fixed in split-operator method.

2003-02-11  acastro

	* [r308] trunk/src/h_inc.F90:
	  More signs...
	* [r307] trunk/src/h_inc.F90, trunk/src/scf.F90:
	  Bug fixed in the calculation of the total energy:
	  * A sign flipped that affected *all* calculations.
	  * In the spinors case, the non-diagonal term was missing.
	  
	  Now, the expression for the energy is:
	  
	  E = sum_i eps_i - 1/2 sum_i <phi_i | V_hartree | phi_i>
	  - sum_i <phi_i | V_xc | phi_i> =
	  sum_i eps_i - 1/2 IntegralOf{d*v_hartree}
	  - IntegralOf{rho(1,1)*v_xc(1,1)}
	  - IntegralOf{rho(2,2)*v_xc(2,2)}
	  - 2*Real[ IntegralOf{rho(1,2)*v_xc(2,1)} ]
	  
	  where i is the KS state index, eps_i the eigenvalues,
	  phi_i the eigenvectors, rho and v_xc the 2x2 density
	  and xc-potential matrices in spin space, and d = Tr[rho]
	  
	  This is correct, isn't it?
	* [r306] trunk/src/vxc.F90, trunk/src/xc_GGA.F90, trunk/src/xc_LDA.F90:
	  More code cleaning. One bug fixed.
	  * Now pbexc and pzxc is not called twice; I split them into
	  pbex/pbec, and pzx/pzc.
	  * Improved a bit xc_GGA. There is still some room to improve the
	  performance (rotation matrix should be calculated only once).

2003-02-10  acastro

	* [r305] trunk/src/h.F90, trunk/src/xc_GGA.F90:
	  "Some kind" of non-collinear magnetism is now implemented also
	  for GGA. Only the orbital-functionals are now missing. Some comments:
	  * I say "some kind" because we agree that, after all, ignoring the
	  non-diagonal terms of the gradients is just wrong. But since it is
	  not crucial for our research, let us leave what apparently everybody
	  else does (to my knowledge).
	  * It is now implemented in a very inefficient way. I will do more
	  commits in the following days to try and sort this out.
	  * In fact, I have not yet used any non-collinear system, so I have not
	  really tested this. I just tested that spinors or spin-polarized
	  yield the same thing for carbon, gold or sodium atoms.
	  * IT WAS A PAIN TO IMPLEMENT THIS!
	  
	  Conclusion: this is not definitive. But I felt like committing.
	* [r304] trunk/src/ps.F90, trunk/src/xc_LDA.F90:
	  * Removed the annoying segmentation fault that occurred sometimes
	  at the end of the runs. Really subtle.
	  * Removed a bug that I had slipped in the expression of the rotation
	  in spin space.

2003-02-09  acastro

	* [r303] trunk/src/h_inc.F90, trunk/src/hartree.F90, trunk/src/hartree1D.F90,
	  trunk/src/hartree2D.F90, trunk/src/hartree3D.F90, trunk/src/lcao.F90,
	  trunk/src/linear.F90, trunk/src/mix_inc.F90, trunk/src/vxc.F90, trunk/src/xc.F90,
	  trunk/src/xc_GGA.F90, trunk/src/xc_HJU.F90, trunk/src/xc_KLI_SIC.F90,
	  trunk/src/xc_KLI_x.F90, trunk/src/xc_LDA.F90, trunk/src/xc_pot.F90:
	  A lot of cleaning in the xc part:
	  (i) If dens is the density matrix, rho is now defined as:
	  rho(1) = dens(1, 1); rho(2) = dens(2, 2); rho(3) = Re[dens(1, 2)];
	  rho(4) = Im[dens(1, 2)]. That is, it looks more like it was before.
	  (ii) All the subroutines in xc_LDA.F90 are gone. The file persists because
	  I moved subroutine R_FUNC(xc_lda) there. A couple of subroutines in
	  xc_GGA are gone. They were the duplicated xc subroutines; now the
	  pseudopotential stuff and the main code itself share them in vxc
	  module.
	  (iii) Noncollinear GGA is not yet included. I will include it soon.
	  (iv) Sometimes now the exchange and correlation is calculated twice.
	  I will change that.
	  (v) Broyden mixing does not work well when some component of rho
	  is null. I will look into that.

2003-02-07  acastro

	* [r302] trunk/src/vxc.F90:
	  This bug slipped in after all this changing of the mathematical parameters
	  names (ONE => M_ONE). You can't imagine how difficult it was to hunt...

2003-02-07  marques

	* [r301] trunk/configure.ac, trunk/src/Makefile.am, trunk/src/eigen.F90,
	  trunk/src/eigen_cg1.F90, trunk/src/eigen_cg2.F90, trunk/src/h.F90,
	  trunk/src/h_external_pot.F90, trunk/src/h_forces.F90, trunk/src/h_inc.F90,
	  trunk/src/hartree.F90, trunk/src/hartree1D.F90, trunk/src/hartree2D.F90,
	  trunk/src/hartree3D.F90, trunk/src/lcao.F90, trunk/src/main.F90,
	  trunk/src/mesh_create.F90, trunk/src/mesh_inc.F90, trunk/src/opt_control.F90,
	  trunk/src/out.F90, trunk/src/ps.F90, trunk/src/ps3D.F90, trunk/src/run.F90,
	  trunk/src/scf.F90, trunk/src/specie.F90, trunk/src/specie1D.F90, trunk/src/specie3D.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/static_pol.F90,
	  trunk/src/systm.F90, trunk/src/td_calc.F90, trunk/src/td_exp.F90, trunk/src/unocc.F90,
	  trunk/src/xc.F90, trunk/src/xc_GGA.F90, trunk/src/xc_HJU.F90, trunk/src/xc_KLI.F90,
	  trunk/src/xc_KLI_SIC.F90, trunk/src/xc_pot.F90:
	  *) small bug fixes in calculation of unoccupied states
	  *) there is now more --enable-1d, etc. Now the same code handles 1, 2 and 3D
	  *) moved nlcc from states to system where it makes more sense. By this I increased
	  slightly the entropy in the xc module (that needs to be cleaned in any way)

2003-02-05  marques

	* [r300] trunk/Makefile.am, trunk/configure.ac, trunk/debian/README.Debian,
	  trunk/debian/changelog, trunk/debian/control, trunk/debian/rules,
	  trunk/liboct/config.h.in, trunk/src/Makefile.am, trunk/src/config.h.in,
	  trunk/src/lcao.F90, trunk/src/ps1D.F90:
	  *) small bug corrected in lcao.F90
	  *) make deb now makes debian packages (in my machine, at least)
	  *) small things forgotten from the 2D commit
	* [r299] trunk/src/td.F90, trunk/src/td_exp.F90, trunk/src/td_rti.F90:
	  Bug in rti2 related to spin corrected (the code segfaulted for nspin=1).

2003-02-05  acastro

	* [r298] trunk/doc/octopus.dvi, trunk/doc/octopus.info, trunk/doc/octopus.texi,
	  trunk/doc/texinfo.tex:
	  An update of the manual. I have written it is the manual of
	  octopus 1.1, waiting for the next release. However it is still
	  unfinished. But at least quite a few errors have been eliminated.
	  
	  The distribution now includes, besides the octopus.texi source,
	  the octopus.info and octopus.dvi files. The texinfo.tex file has
	  been removed from the distribution, since it should be installed
	  in the computer.
	  
	  For generating other formats, I believe that the latest version
	  of texinfo, 4.4, is needed.
	  
	  I need to improve the "Makefile.am" file. Now it does not work too
	  well.

2003-02-04  marques

	* [r297] trunk/configure.ac, trunk/src/Makefile.am, trunk/src/dx.F90, trunk/src/dx_inc.F90,
	  trunk/src/function_to_dx.F90, trunk/src/global.F90, trunk/src/h.F90,
	  trunk/src/h_external_pot.F90, trunk/src/h_forces.F90, trunk/src/hartree.F90,
	  trunk/src/hartree2D.F90, trunk/src/main.F90, trunk/src/mesh.F90, trunk/src/mesh1D.F90,
	  trunk/src/mesh1D_inc.F90, trunk/src/mesh3D.F90, trunk/src/mesh3D_inc.F90,
	  trunk/src/mesh_create.F90, trunk/src/mesh_inc.F90, trunk/src/out.F90,
	  trunk/src/specie.F90, trunk/src/specie1D.F90, trunk/src/states_inc.F90,
	  trunk/src/systm.F90, trunk/src/td_calc.F90, trunk/src/td_write.F90:
	  *) Code now runs in 2D! At least the non-interacting harmonic oscillator gives
	  the correct eigenspectrum in 1, 2, and 3D ;)
	  *) Derivatives and (local) potential can be calculated in Fourier space for
	  1D and 2D
	  3) Neither LCAO nor the forces are working properly for 1 or 2D

2003-01-31  marques

	* [r296] trunk/src/h_inc.F90, trunk/src/hartree3D.F90, trunk/src/lcao.F90,
	  trunk/src/mesh.F90, trunk/src/mesh1D.F90, trunk/src/mesh1D_create.F90,
	  trunk/src/mesh1D_inc.F90, trunk/src/mesh3D.F90, trunk/src/mesh3D_create.F90,
	  trunk/src/mesh3D_inc.F90, trunk/src/mesh_create.F90, trunk/src/mesh_inc.F90,
	  trunk/src/opt_control.F90, trunk/src/out_inc.F90, trunk/src/pes_mask.F90,
	  trunk/src/ps.F90, trunk/src/ps1D.F90, trunk/src/scf.F90, trunk/src/specie.F90,
	  trunk/src/specie1D.F90, trunk/src/specie3D.F90, trunk/src/static_pol.F90,
	  trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_exp.F90, trunk/src/td_init.F90,
	  trunk/src/vxc.F90, trunk/src/xc.F90, trunk/src/xc_GGA.F90, trunk/src/xc_HJU.F90,
	  trunk/src/xc_LDA.F90:
	  Cleaning the code for it to work better in 1 and 2D. This is the first
	  strike, so thinks may not work still!

2003-01-29  acastro

	* [r295] trunk/src/td_rti.F90:
	  Finally I could fix this damned bug, after four beers and a lot of
	  beers and blaspheming. It only showed up in spinors calculations, so
	  don't worry otherwise. Energy is conserved again, blessed be the gods.

2003-01-29  marques

	* [r294] trunk/src/Makefile.am, trunk/src/eigen_cg1.F90, trunk/src/eigen_cg2.F90,
	  trunk/src/geom_opt.F90, trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/h_so.F90,
	  trunk/src/lasers.F90, trunk/src/lcao.F90, trunk/src/mix.F90, trunk/src/opt_control.F90,
	  trunk/src/phonons.F90, trunk/src/run.F90, trunk/src/scf.F90, trunk/src/td.F90,
	  trunk/src/td_calc.F90, trunk/src/td_exp.F90, trunk/src/td_rti.F90, trunk/src/unocc.F90:
	  First strike at optimum control. There are changes all over the place, for I
	  changed the interface to some standard (basic) routines.
	* [r293] trunk/Makefile.in, trunk/aclocal.m4, trunk/config.guess, trunk/config.sub,
	  trunk/configure, trunk/depcomp, trunk/doc/Makefile.in, trunk/install-sh,
	  trunk/liboct/Makefile.in, trunk/ltmain.sh, trunk/missing, trunk/mkinstalldirs,
	  trunk/share/Makefile.in, trunk/share/PP/HGH/Makefile.in, trunk/share/PP/Makefile.in,
	  trunk/share/PP/TM2/Makefile.in, trunk/src/Makefile.in:
	  Removed autottols automatic generated files. Now you are forced to run
	  ./autogen.sh when taking the src from the cvs.

2003-01-29  acastro

	* [r292] trunk/liboct/varia.c:
	  This will probably avoid problems compiling in some systems.

2003-01-28  acastro

	* [r291] trunk/src/mesh3D_inc.F90:
	  Bug fixed.
	  (laplacian was not properly calculated with anysotropic grids)

2003-01-27  acastro

	* [r290] trunk/src/h.F90, trunk/src/h_forces.F90, trunk/src/mix_inc.F90,
	  trunk/src/specie.F90, trunk/src/td_calc.F90:
	  Those things seem to be bugs for the alpha compiler (I don't know
	  if it is a bug in "theoretical" standard Fortran 90, but anyway
	  it is safer now).
	  (The things are the "if(present(x).and.x)" constructs, which crash
	  if x is not present in the kerma alpha machine)
	* [r289] trunk/liboct/varia.c:
	  Now varia.c compiles both on alpha and linux machines. Probably
	  also on the IBMs.
	  (Don't know wether the progress line works, though. I think it does.)
	* [r288] trunk/src/Makefile.am, trunk/src/Makefile.in, trunk/src/atomic.F90,
	  trunk/src/h.F90, trunk/src/h_inc.F90, trunk/src/hgh.F90, trunk/src/ps.F90,
	  trunk/src/ps_kb.F90, trunk/src/ps_xc.F90, trunk/src/tm.F90, trunk/src/vxc.F90,
	  trunk/src/xc.F90, trunk/src/xc_GGA.F90:
	  (*) Fixed, at least in a temporary way, a bug in the GGA part (after changing
	  the way rho stores the information, it did not work any more). It is
	  not the definitive way it will look.
	  (**) Changed the names of a couple of files ("ps_kb" and "ps_xc", rather
	  odd). Removed some unnecessary code. The fact is there is quite a lot
	  of duplicated code in previous ps_xc.F90 (now vxc.F90) and xc_LDA/xc_GGA
	  files, and I want to put it only in one place (did not do it, yet).
	  (***) I think that now the total energy is well calculated, even with
	  spin, collinear or not.

2003-01-24  acastro

	* [r287] trunk/src/global.F90, trunk/src/h.F90, trunk/src/h_inc.F90,
	  trunk/src/hartree1D.F90, trunk/src/hartree3D.F90, trunk/src/lcao.F90,
	  trunk/src/linear.F90, trunk/src/mix_inc.F90, trunk/src/ps_xc.F90, trunk/src/run.F90,
	  trunk/src/states.F90, trunk/src/xc.F90, trunk/src/xc_GGA.F90, trunk/src/xc_HJU.F90,
	  trunk/src/xc_KLI_SIC.F90, trunk/src/xc_KLI_x.F90, trunk/src/xc_LDA.F90,
	  trunk/src/xc_pot.F90:
	  Finally I commit the non-collinear magnetism stuff. Now we can proudly
	  say that octopus does "fully unconstrained noncollinear magnetism",
	  as it is pompously said in the literature.
	  The catch is I have not been able to do it for nothing else but LDA.
	  I have been quite a lot of time working and reading about the GGA
	  case, but could not do it.
	  Technically, now when working with spinors, rho has four components,
	  being the trace of the density matrix the first one, and the magnetisation
	  density vector the other three. When working in the spin polarized case,
	  rho has still two componets, but instead of being respectively the
	  (11) and (22) component of the density matrix, they are the trace
	  and (11)-(22), respectively.
	  The exchange and correlation potential has now as many components
	  as the density in each case. The "nondiagonal" or noncollinear components
	  of the hamiltonian data type now are gone.

2003-01-15  acastro

	* [r286] trunk/liboct/interface.c, trunk/src/h.F90, trunk/src/liboct.F90, trunk/src/run.F90,
	  trunk/src/td.F90, trunk/src/td_exp.F90, trunk/src/td_init.F90, trunk/src/td_rti.F90:
	  * Added Suzuki-Trotter supposedly 5th order method to calculate the
	  exponential of a matrix. Does not seem to work very well.
	  * Reshaped the Split-Operator method. I am not yet sure if it is
	  implemented in the proper way. If it is not, it may be the reason why
	  the Suzuki-Trotter is not working (ST is based in SO).
	  * Added the Chebyshev expansion of the exponential of the hamiltonian.
	  For high orders it is much better than previous expansion in the
	  canonical polynomial base {1, x, x^2, ...}.
	  
	  In any case, it seems the Lanczos method works better.

2003-01-08  acastro

	* [r285] trunk/src/run.F90, trunk/src/td_exp.F90, trunk/src/td_init.F90,
	  trunk/src/td_rti.F90:
	  Bugs fixed. Small performance enhancements.
	* [r284] trunk/src/states_inc.F90, trunk/src/td_exp.F90:
	  Bug fixed.

2003-01-07  acastro

	* [r283] trunk/doc/octopus.info, trunk/doc/octopus.texi, trunk/src/Makefile.am,
	  trunk/src/Makefile.in, trunk/src/h.F90, trunk/src/h_forces.F90, trunk/src/h_inc.F90,
	  trunk/src/run.F90, trunk/src/td.F90, trunk/src/td_calc.F90, trunk/src/td_exp.F90,
	  trunk/src/td_init.F90, trunk/src/td_rti.F90, trunk/src/td_rti3.F90,
	  trunk/src/td_write.F90:
	  Some of the new evolution methods. Check out the manual to see
	  how to setup the input file. I don't have yet final conclusions,
	  and think that some bugs still linger in the code for some of the options,
	  so I left previous methods as default. For safe runs, use the previous
	  stuff. I will keep on looking at the problem....

2002-12-18  acastro

	* [r282] trunk/liboct/interface.c, trunk/src/global.F90, trunk/src/liboct.F90,
	  trunk/src/td.F90:
	  Two little things...
	  - The time meter should not fail now as it sometimes did -- removed
	  the "elapsed_time" function, in favour of the C clock function.
	  - In debugging mode, now the size of the process (of the node 0)
	  is printed. This way maybe I am able of finding where the memory leakage
	  takes place in the IBM machine.

2002-12-09  marques

	* [r281] trunk/liboct/Makefile.am, trunk/liboct/Makefile.in, trunk/liboct/geom_opt.c,
	  trunk/share/PP/TM2/Si.ascii, trunk/src/Makefile.am, trunk/src/Makefile.in,
	  trunk/src/geom_opt.F90, trunk/src/phonons.F90, trunk/src/ps3D.F90, trunk/src/run.F90,
	  trunk/src/scf.F90:
	  *) Code did not work for TM pseudos withonly one spin component. Hack to
	  go around it.
	  
	  *) Changed geometry optimization to a simple steepest descents with an
	  adaptative step, for the old GSL code did not work properly.
	  
	  *) Experimental utility to calculate vibrational frequencies.

2002-12-05  acastro

	* [r280] trunk/configure, trunk/configure.ac, trunk/src/Makefile.am, trunk/src/Makefile.in,
	  trunk/src/linear.F90, trunk/src/mesh.F90, trunk/src/mesh3D_create.F90,
	  trunk/src/mesh3D_inc.F90:
	  Several changes:
	  1. The most important: convergence speedup! By changing the way in
	  which the laplacian was calculated, the speed of that part is
	  multiplied by 3 something. Basicly what I do is creating an integer
	  array which contains the indexes of the neighbours of one given
	  point, instead of using the lxyz_inv intermediate, which saves
	  some memory, but slows down things. For the tests I have done,
	  (carbon atom) the code runs 2.2 times faster!
	  2. When the code is compiled for complex wave functions, the executables
	  are now called "zoctopus", "zoctopus-mpi", etc. In the spirit of
	  LAPACK.
	  3. linear.F90 did not compile for complex wf. I changed one type, I
	  think it is OK to do it and corrects the bug. But please check that
	  since I don't control that part of the code.

2002-11-29  marques

	* [r279] trunk/share/PP/HGH/Ag.hgh:
	  too much whitespace removed.
	* [r278] trunk/src/hgh.F90:
	  routine hgh_occ was no longer used and was therefore removed.
	* [r277] trunk/share/PP/HGH/Ag.hgh, trunk/share/PP/HGH/Ag_sc.hgh, trunk/share/PP/HGH/Al.hgh,
	  trunk/share/PP/HGH/Ar.hgh, trunk/share/PP/HGH/As.hgh, trunk/share/PP/HGH/At.hgh,
	  trunk/share/PP/HGH/Au.hgh, trunk/share/PP/HGH/Au_sc.hgh, trunk/share/PP/HGH/B.hgh,
	  trunk/share/PP/HGH/Ba.hgh, trunk/share/PP/HGH/Be.hgh, trunk/share/PP/HGH/Bi.hgh,
	  trunk/share/PP/HGH/Br.hgh, trunk/share/PP/HGH/C.hgh, trunk/share/PP/HGH/Ca.hgh,
	  trunk/share/PP/HGH/Cd.hgh, trunk/share/PP/HGH/Cd_sc.hgh, trunk/share/PP/HGH/Cl.hgh,
	  trunk/share/PP/HGH/Co.hgh, trunk/share/PP/HGH/Cr.hgh, trunk/share/PP/HGH/Cs.hgh,
	  trunk/share/PP/HGH/Cu.hgh, trunk/share/PP/HGH/Cu_sc.hgh, trunk/share/PP/HGH/F.hgh,
	  trunk/share/PP/HGH/Fe.hgh, trunk/share/PP/HGH/Ga.hgh, trunk/share/PP/HGH/Ga_sc.hgh,
	  trunk/share/PP/HGH/Ge.hgh, trunk/share/PP/HGH/H.hgh, trunk/share/PP/HGH/He.hgh,
	  trunk/share/PP/HGH/Hg.hgh, trunk/share/PP/HGH/Hg_sc.hgh, trunk/share/PP/HGH/I.hgh,
	  trunk/share/PP/HGH/In.hgh, trunk/share/PP/HGH/In_sc.hgh, trunk/share/PP/HGH/Ir.hgh,
	  trunk/share/PP/HGH/K.hgh, trunk/share/PP/HGH/Kr.hgh, trunk/share/PP/HGH/Li.hgh,
	  trunk/share/PP/HGH/Mg.hgh, trunk/share/PP/HGH/Mn.hgh, trunk/share/PP/HGH/Mo.hgh,
	  trunk/share/PP/HGH/N.hgh, trunk/share/PP/HGH/Na.hgh, trunk/share/PP/HGH/Nb.hgh,
	  trunk/share/PP/HGH/Ne.hgh, trunk/share/PP/HGH/Ni.hgh, trunk/share/PP/HGH/O.hgh,
	  trunk/share/PP/HGH/Os.hgh, trunk/share/PP/HGH/P.hgh, trunk/share/PP/HGH/Pb.hgh,
	  trunk/share/PP/HGH/Pd.hgh, trunk/share/PP/HGH/Po.hgh, trunk/share/PP/HGH/Pt.hgh,
	  trunk/share/PP/HGH/Rb.hgh, trunk/share/PP/HGH/Re.hgh, trunk/share/PP/HGH/Rh.hgh,
	  trunk/share/PP/HGH/Rn.hgh, trunk/share/PP/HGH/Ru.hgh, trunk/share/PP/HGH/S.hgh,
	  trunk/share/PP/HGH/Sb.hgh, trunk/share/PP/HGH/Sc.hgh, trunk/share/PP/HGH/Se.hgh,
	  trunk/share/PP/HGH/Si.hgh, trunk/share/PP/HGH/Sn.hgh, trunk/share/PP/HGH/Sr.hgh,
	  trunk/share/PP/HGH/Ta.hgh, trunk/share/PP/HGH/Tc.hgh, trunk/share/PP/HGH/Te.hgh,
	  trunk/share/PP/HGH/Ti.hgh, trunk/share/PP/HGH/Tl.hgh, trunk/share/PP/HGH/V.hgh,
	  trunk/share/PP/HGH/W.hgh, trunk/share/PP/HGH/Xe.hgh, trunk/share/PP/HGH/Y.hgh,
	  trunk/share/PP/HGH/Zn.hgh, trunk/share/PP/HGH/Zn_sc.hgh, trunk/share/PP/HGH/Zr.hgh,
	  trunk/src/hgh.F90:
	  Fixed bug that prevented hgh pseudopotential for H and He to work.
	  occupation numbers are now in pp file.
	* [r276] trunk/src/broad.F90, trunk/src/excitations.F90, trunk/src/lcao.F90,
	  trunk/src/linear.F90:
	  small bug fixes.
	  the routine now outputs the eigenvectors in casida's approach.

2002-11-18  acastro

	* [r275] trunk/src/h_inc.F90:
	  Bug fixed.
	* [r274] trunk/src/tm.F90:
	  Bug fixed.
	* [r273] trunk/src/atom.F90, trunk/src/h_external_pot.F90, trunk/src/h_so.F90,
	  trunk/src/ps3D.F90:
	  OK, after several hours and four beers from previous commit,
	  I think I have a pretty definitive version of SO. The gradient
	  is moved from the wavefuntion to the projector, thus speeding
	  the code to almost a factor of two. The price to pay is that I
	  think only I would be able to understand the code I wrote. But now
	  calculations with SO are almost as fast as without it.
	  Pretty productive night, but I am running out of beers.

2002-11-17  acastro

	* [r272] trunk/src/atom.F90, trunk/src/h.F90, trunk/src/h_external_pot.F90,
	  trunk/src/h_forces.F90, trunk/src/h_inc.F90, trunk/src/h_so.F90, trunk/src/ps3D.F90,
	  trunk/src/specie.F90, trunk/src/td_rti3.F90, trunk/src/tm.F90:
	  Two things:
	  (i) The most important, finally SO finally works also for TM. It took
	  me some time. I had to add new components to the ps_type.
	  (ii) More performance changes, for application of nonlocal projectors.
	  Basicly, duplicating the atom%uv... components to both real and
	  complex types. Of course, they are always real, but it is better
	  to use real with real wavefunctions, and complex with complex
	  wavefunctions. The speed is really noticeable (type conversion
	  sucks at least for the Intel compiler).
	  
	  I did *not* clean the pseudo part, of course. I did *not* remove the
	  stupid occupation number database from the code, of course. Some day.
	  
	  Application of SO is slow due to the gradient calculation of the
	  wavefunctions. Derivation may be moved to the projector, instead;
	  that should increase speed dramatically.
	* [r271] trunk/src/atom.F90, trunk/src/h_external_pot.F90, trunk/src/h_inc.F90,
	  trunk/src/h_so.F90, trunk/src/specie.F90:
	  Cannot move uv to complex without screwing up things.
	* [r270] trunk/src/atom.F90, trunk/src/h_external_pot.F90, trunk/src/h_inc.F90,
	  trunk/src/h_so.F90, trunk/src/hgh.F90, trunk/src/specie.F90:
	  This is a performance enhancement. Changes are:
	  (i) the way the nonlocal projectors are applied (both
	  in the nonlocal part of the normal potential, and in the spin-orbit
	  correction) is modified in a stupid way which seems to work faster.
	  (ii) For the complex wave functions case, the atm%uv, etc.
	  arrays are now complex. This seems to be important for the previous
	  trick to work. I am not yet sure that this is going to work for all
	  cases.
	  (iii) The radius of the nonlocal components in the Goedecker
	  case are now reduced.
	  
	  This seems to reduce by a factor of 3-5 the time of calculations
	  for Goedecker-gold with spin-orbit.

2002-11-16  acastro

	* [r269] trunk/src/run.F90:
	  New (in fact, the same but in other place) bug fixed.

2002-11-15  marques

	* [r268] trunk/src/lcao.F90:
	  Nothing!

2002-11-15  acastro

	* [r267] trunk/src/run.F90:
	  Bug fixed.

2002-11-15  marques

	* [r266] trunk/share/PP/TM2/Ar.ascii, trunk/share/PP/TM2/Ne.ascii,
	  trunk/share/PP/TM2/Xe.ascii:
	  Added Ne, Ar and Xe Troullier-Martins pseudopotential.
	* [r265] trunk/src/tm.F90:
	  Code did not compile in the alphas.

2002-11-15  acastro

	* [r264] trunk/src/h.F90, trunk/src/lcao.F90, trunk/src/run.F90:
	  LCAO also works now for spinors. The price to pay is that
	  (i) the "CPUIntensive" mode does not longer exist. So it is always
	  memory intensive.
	  (ii) The kinetic + external field is not calculated once and for all,
	  but calculated every time lcao_wf is called. Usually lcao_wf is called
	  only once, anyway.
	  Of course, these drawbacks are not unavoidable and could be recovered.
	  But the code gets ugly and confusing, due to the spinors and k-points
	  treatment. So I will leave it as it is.

2002-11-13  acastro

	* [r263] trunk/configure, trunk/configure.ac, trunk/src/Makefile.am, trunk/src/Makefile.in,
	  trunk/src/atom.F90, trunk/src/h.F90, trunk/src/h_external_pot.F90, trunk/src/h_inc.F90,
	  trunk/src/h_so.F90, trunk/src/hgh.F90, trunk/src/lcao.F90, trunk/src/linear.F90,
	  trunk/src/ps3D.F90, trunk/src/run.F90, trunk/src/specie.F90, trunk/src/states.F90,
	  trunk/src/tm.F90:
	  Spin-Orbit coupling seems to work now. It is however restricted to
	  the case where only Goedecker-pseudos are used as species.
	  
	  Some other bugs are corrected.
	  
	  However, a lot remains to be done, specially in the lcao, hgh, tm and
	  ps3D modules. But I submit before this gets unmanageable.

2002-10-25  marques

	* [r262] trunk/build/octopus.spec.in, trunk/src/Makefile.am, trunk/src/Makefile.in,
	  trunk/src/broad.F90, trunk/src/excitations.F90, trunk/src/hs_from_acc.F90:
	  * Added small utility to broaden the spectra calculated with the excitations
	  program
	  * Minor fixes

2002-10-18  marques

	* [r261] trunk/src/excitations.F90, trunk/src/linear.F90:
	  Calculation of the excitations in Fourier space (a la Petersilka, and a la
	  Casida is now possible. The excited states have to have good quality for it
	  to work.
	* [r260] trunk/liboct/Makefile.am, trunk/liboct/Makefile.in, trunk/liboct/config.h.in,
	  trunk/liboct/geom_opt.c, trunk/liboct/interface.c, trunk/liboct/varia.c,
	  trunk/liboct/varia.h:
	  Added progress bar.

2002-10-18  acastro

	* [r259] trunk/src/eigen.F90, trunk/src/global.F90, trunk/src/h.F90, trunk/src/h_inc.F90,
	  trunk/src/run.F90, trunk/src/scf.F90, trunk/src/states.F90, trunk/src/xc.F90,
	  trunk/src/xc_pot.F90:
	  Mostly all changes that allow to do spinors calculations.

2002-10-03  marques

	* [r258] trunk/src/atom.F90, trunk/src/scf.F90:
	  small bug in atom_adjust corrected (only appeared in very special circunstances)
	  scf now prints dipole information in 'info'

2002-10-03  acastro

	* [r257] trunk/src/hgh.F90, trunk/src/ps3D.F90, trunk/src/tm.F90:
	  The debugging information for the pseudopotentials is now placed
	  in a directory called "pseudos".

2002-10-02  acastro

	* [r256] trunk/src/hgh.F90:
	  Couple of bugs fixed in hgh subroutine. They only showed up in some
	  of the alpha machines.

2002-10-01  acastro

	* [r255] trunk/Makefile.in, trunk/configure, trunk/configure.ac, trunk/liboct/config.h.in,
	  trunk/src/Makefile.am, trunk/src/Makefile.in, trunk/src/complex.F90, trunk/src/dx.F90,
	  trunk/src/dx_inc.F90, trunk/src/eigen_cg2.F90, trunk/src/function_to_dx.F90,
	  trunk/src/lcao.F90, trunk/src/xc.F90:
	  * By adding the option "--enable-complex" to configure, now the code is
	  built with complex wavefunctions also for the ground state. So the spin
	  orbit coupling may be added.
	  * For that purpose, I have removed quite a few bugs that only appeared
	  when using complex wavefunctions.
	  * Also, the Makefile.in has now the trick for the debian package (I guess
	  Heiko forgot to submit this one)

2002-10-01  appel

	* [r254] trunk/Makefile.am:
	  running make deb on Debian systems makes octopus debs and sends them to the
	  web page. Can be run as user.
	  Note this works only if:
	  - CVSROOT/val-tags on nautilus is changed to group (cvsusers) writable
	  (otherwise cvs-buildpackage fails)
	  - the local cvsdeb.conf contains conf_rootdir='/usr/src/debain/debs/i386/octopus'
	  and conf_rootdir has write permissions for the respective user
	* [r253] trunk/debian, trunk/debian/README.Debian, trunk/debian/changelog,
	  trunk/debian/control, trunk/debian/copyright, trunk/debian/dirs, trunk/debian/info,
	  trunk/debian/rules:
	  debianizing octopus. This directory contains all information
	  to create deb packages. On a Debian system run simply debuild
	  in the top level directory of the octopus tree.

2002-09-30  marques

	* [r252] trunk/Makefile.am, trunk/Makefile.in, trunk/build/octopus.spec.in, trunk/configure,
	  trunk/configure.ac:
	  make rpm now makes an rpm and sends it to the web page. Must be run as root.

2002-09-30  acastro

	* [r251] trunk/share/PP/HGH/Ag_sc.hgh, trunk/share/PP/HGH/Au_sc.hgh,
	  trunk/share/PP/HGH/Ba_sc.hgh, trunk/share/PP/HGH/Be_sc.hgh, trunk/share/PP/HGH/Ca_sc.hgh,
	  trunk/share/PP/HGH/Cd_sc.hgh, trunk/share/PP/HGH/Ce_sc.hgh, trunk/share/PP/HGH/Co_sc.hgh,
	  trunk/share/PP/HGH/Cr_sc.hgh, trunk/share/PP/HGH/Cs_sc.hgh, trunk/share/PP/HGH/Cu_sc.hgh,
	  trunk/share/PP/HGH/Dy_sc.hgh, trunk/share/PP/HGH/Er_sc.hgh, trunk/share/PP/HGH/Eu_sc.hgh,
	  trunk/share/PP/HGH/Fe_sc.hgh, trunk/share/PP/HGH/Ga_sc.hgh, trunk/share/PP/HGH/Gd_sc.hgh,
	  trunk/share/PP/HGH/Hf_sc.hgh, trunk/share/PP/HGH/Hg_sc.hgh, trunk/share/PP/HGH/Ho_sc.hgh,
	  trunk/share/PP/HGH/In_sc.hgh, trunk/share/PP/HGH/Ir_sc.hgh, trunk/share/PP/HGH/K_sc.hgh,
	  trunk/share/PP/HGH/La_sc.hgh, trunk/share/PP/HGH/Li_sc.hgh, trunk/share/PP/HGH/Lu_sc.hgh,
	  trunk/share/PP/HGH/Mg_sc.hgh, trunk/share/PP/HGH/Mn_sc.hgh, trunk/share/PP/HGH/Mo_sc.hgh,
	  trunk/share/PP/HGH/Na_sc.hgh, trunk/share/PP/HGH/Nb_sc.hgh, trunk/share/PP/HGH/Nd_sc.hgh,
	  trunk/share/PP/HGH/Ni_sc.hgh, trunk/share/PP/HGH/Os_sc.hgh, trunk/share/PP/HGH/Pd_sc.hgh,
	  trunk/share/PP/HGH/Pm_sc.hgh, trunk/share/PP/HGH/Pr_sc.hgh, trunk/share/PP/HGH/Pt_sc.hgh,
	  trunk/share/PP/HGH/Rb_sc.hgh, trunk/share/PP/HGH/Re_sc.hgh, trunk/share/PP/HGH/Rh_sc.hgh,
	  trunk/share/PP/HGH/Ru_sc.hgh, trunk/share/PP/HGH/Sc_sc.hgh, trunk/share/PP/HGH/Sm_sc.hgh,
	  trunk/share/PP/HGH/Sr_sc.hgh, trunk/share/PP/HGH/Ta_sc.hgh, trunk/share/PP/HGH/Tb_sc.hgh,
	  trunk/share/PP/HGH/Tc_sc.hgh, trunk/share/PP/HGH/Ti_sc.hgh, trunk/share/PP/HGH/Tl_sc.hgh,
	  trunk/share/PP/HGH/Tm_sc.hgh, trunk/share/PP/HGH/V_sc.hgh, trunk/share/PP/HGH/W_sc.hgh,
	  trunk/share/PP/HGH/Y_sc.hgh, trunk/share/PP/HGH/Yb_sc.hgh, trunk/share/PP/HGH/Zn_sc.hgh,
	  trunk/share/PP/HGH/Zr_sc.hgh, trunk/src/hgh.F90:
	  HGH pseudos with semicore should work now - at least the gold one
	  does, now.

2002-09-29  acastro

	* [r250] trunk/configure, trunk/configure.ac:
	  Another change to the mkl stuff

2002-09-28  marques

	* [r249] trunk/README, trunk/liboct/geom_opt.c, trunk/liboct/interface.c,
	  trunk/src/excitations.F90, trunk/src/linear.F90:
	  nothing special... just synching trees

2002-09-27  acastro

	* [r248] trunk/liboct/interface.c:
	  This little bug made the code crash in the cluster.

2002-09-25  acastro

	* [r247] trunk/src/mix.F90, trunk/src/td.F90:
	  Two bug fixes:
	  (i) td.F90: just affected the kick to the ions, which has never been
	  seriously used.
	  (ii) mix.F90: the broyden mixing cracked when one of the densities is
	  null (e.g. there is only one electron and it is a spin polarized calculation)
	* [r246] trunk/configure:
	  This changed after doing autogen.sh
	* [r245] trunk/configure.ac, trunk/src/ps_kb.F90:
	  I guess that:
	  (i) configure.ac has changed to permit compilation with the intel compiler.
	  (ii) ps_kb.F90 had some bug? Was it Fernando who found it?

2002-09-23  acastro

	* [r244] trunk/src/states_inc.F90:
	  Bug in the preprocessor directive: it is not #elseif but #elif.
	  At least it made octopus crash in the alphas.

2002-09-13  acastro

	* [r243] trunk/share/PP/TM2/Au.ascii:
	  Gold rel gga pseudopotential with core correction. Needed to remove
	  the ugly wiggle in the core region.

2002-09-10  acastro

	* [r242] trunk/src/hgh.F90, trunk/src/lcao.F90, trunk/src/ps3D.F90, trunk/src/xc_GGA.F90:
	  (1) New bug fixed in xc_GGA.F90. When some value of the density is
	  negative (may happen when using Broyden) it crashed when using
	  spin polarized calculations.
	  (2) Bug fixed in lcao.F90. Now the LCAO calculations also work
	  even if spin polarized calculations are set (it crashed before).
	  (3) Now the occupations of the pseudo-atomic states are correctly
	  read, and the initial density is constructed accordingly (important
	  when the filling order S, P, D is not followed, as it is the case
	  of gold, titanium, etc)
	* [r241] trunk/share/PP/TM2/Au.ascii:
	  Uzi Landman gold pseudopotential added.
	* [r240] trunk/src/xc_GGA.F90:
	  GGA bug fixed. But I will do some tests to see if it really works as
	  it should...

2002-09-09  acastro

	* [r239] trunk/src/Makefile.am, trunk/src/Makefile.in:
	  *** empty log message ***
	* [r238] trunk/src/phonon_spectrum.F90:
	  *** empty log message ***
	* [r237] trunk/liboct/interface.c, trunk/src/liboct.F90:
	  The utility phonon-spectrum will (eventually) calculate it from
	  the velocity autocorrelation function. But it doew not do it yet.
	  
	  The liboct function number_of_lines(file) has been added and seems to
	  work. It returns the number of lines of the file if it can open it, and
	  -1 otherwise.

2002-09-05  acastro

	* [r236] trunk/src/td.F90:
	  Now the kick on the electronic wave functions is also applied
	  to the ions, which means an instantaneous modification of the
	  velocities.

2002-08-30  acastro

	* [r235] trunk/share/logo:
	  *** empty log message ***
	* [r234] trunk/liboct/interface.c, trunk/share/Makefile.am, trunk/share/Makefile.in,
	  trunk/src/h.F90, trunk/src/h_external_pot.F90, trunk/src/hgh.F90, trunk/src/liboct.F90,
	  trunk/src/main.F90, trunk/src/out.F90, trunk/src/out_inc.F90, trunk/src/ps3D.F90,
	  trunk/src/tm.F90:
	  Bug fixes, and cosmetic changes. Besides that:
	  * Now the output layer admits printing the functions in a given axis (x y or z)
	  * The logo gets out of main and goes as a file to share/logo. It is printed
	  via a new C function in liboct: print_function.

2002-08-29  acastro

	* [r233] trunk/src/hgh.F90, trunk/src/lcao.F90, trunk/src/ps3D.F90:
	  Solved the problem with H and He.

2002-08-28  acastro

	* [r232] trunk/src/hgh.F90, trunk/src/logrid.F90, trunk/src/ps3D.F90, trunk/src/tm.F90:
	  Finally LCAO works also for the hgh case. The pseudo-wavefunctions
	  are properly calculated now. Code is also a bit cleaner (again).
	  BUT:
	  * Problems with H and He, regarding the occupations. In fact, I think
	  atomic occupations have not been properly treated also in the case of
	  Troullier-Martins. I will solve that asap.
	  * It takes a couple of minutes to calculate the pseudo-wavefunctions
	  for some elements (I have not checked all of them, of course). This
	  is a bit annoying. We may think of directly storing the pseudo-wavefunctions
	  in the share directory. I don't know how big that database would be. If
	  it is not huge, we should do it.

2002-08-27  acastro

	* [r231] trunk/src/logrid.F90:
	  As usual, forgot something.

2002-08-26  acastro

	* [r230] trunk/src/Makefile.am, trunk/src/Makefile.in, trunk/src/h_external_pot.F90,
	  trunk/src/hgh.F90, trunk/src/ps.F90, trunk/src/ps1D.F90, trunk/src/ps3D.F90,
	  trunk/src/specie.F90, trunk/src/tm.F90:
	  Another step in the cleanup of the pseudopotential mess. Just
	  intermediate, but I commit before it gets too messy. From the
	  user's point of view, the infomative output about the pseudoptentials
	  is gone. Info now only comes up if verbose mode is chosen. In that
	  case, a directory with each species name appears, and info is there.

2002-08-26  marques

	* [r229] trunk/src/Makefile.am, trunk/src/Makefile.in, trunk/src/excitations.F90,
	  trunk/src/linear.F90, trunk/src/xc_LDA.F90:
	  Added utility to calculate linear response excitations a la Petersilka
	  It also calculates the dipole matrix elements.

2002-08-25  marques

	* [r228] trunk/src/run.F90, trunk/src/td_calc.F90:
	  Unimportant bug fixes.

2002-08-20  acastro

	* [r227] trunk/liboct/interface.c:
	  Forgot to commit interface.c
	* [r226] trunk/src/Makefile.am, trunk/src/Makefile.in, trunk/src/global.F90,
	  trunk/src/liboct.F90, trunk/src/main.F90:
	  * main.F90: removed the useless test function.
	  
	  * Timing is now done throught the C library clock() function, for which
	  there is now an interface in liboct. Previous timing was giving crap
	  sometimes. That means:
	  - Added the interface to liboct/interface.c
	  - Added the second interface to src/liboct.F90 as usual.
	  - Now global uses liboct, and not the other way around.
	  - As a consequence, I had to change Makefile.am (hence Makefile.in) so
	  that liboct.F90 is compiled first. config_F90.h also now depends on
	  liboct.F90 as well as on global.F90
	  
	  * Suggestion: should liboct be organised somehow? Maybe three different
	  libraries should look prettier: one for the parser, one for the gsl
	  interface and one for auxiliary stuff -- such as interfaces to the C standard
	  library as clock().

2002-07-24  marques

	* [r225] trunk/src/h.F90, trunk/src/h_external_pot.F90:
	  New classic potential for QM/MM

2002-07-24  acastro

	* [r224] trunk/src/strength_function.F90:
	  Bug fixed.
	* [r223] trunk/src/strength_function.F90:
	  Bug fixed.

2002-07-23  marques

	* [r222] trunk/src/xc_HJU.F90:
	  now this functional seems to work :)

2002-07-23  acastro

	* [r221] trunk/src/geom_opt.F90:
	  Bug fixed.

2002-07-22  acastro

	* [r220] trunk/src/h_external_pot.F90:
	  Bug fix (this bug showed only in the alphas when the local potential
	  space is represented in Fourier space...)
	* [r219] trunk/liboct/interface.c, trunk/src/atom.F90, trunk/src/global.F90,
	  trunk/src/liboct.F90:
	  A Mawxwell-Boltzmann initial velocity distribution may now be
	  assigned to the ions, by using the variable "RandomVelocityTemp",
	  which must be given as value the desired temperature (default = 0).
	  TODO: Update the manual!!!

2002-07-19  marques

	* [r218] trunk/src/xc.F90, trunk/src/xc_HJU.F90:
	  A couple of bug fixes in the HJU functional.
	* [r217] trunk/src/td.F90:
	  Alberto: you reentered this bug in your commit!

2002-07-19  acastro

	* [r216] trunk/src/Makefile.am, trunk/src/Makefile.in, trunk/src/h_inc.F90,
	  trunk/src/mesh3D_inc.F90, trunk/src/ps3D.F90, trunk/src/specie.F90, trunk/src/td.F90,
	  trunk/src/td_calc.F90, trunk/src/td_write.F90:
	  * td.F90 split: td_calc and td_write are included by the preprocessor.
	  * Bug in ps3D.F90 fixed (origin was not correctly treated for Troullier-
	  Martins nonlocal components of the pseudopotentials)
	  * The optional argument "alpha" in the derivatives definition in
	  mesh3D_inc.F90 is now either real or complex.
	  * Bug fixed in specie.F90: the limits of the nonlocal pseudopotential
	  components when r goes to zero were not properly fixed.
	  * And td_calc_tacc now works! Finally! So the harmonic spectrum may
	  now be calculated, with the next considerations:
	  - Ions should *not* move.
	  - When using hgh, don't know what happens.
	  - When using user defined potentials, don't know what happens.

2002-07-16  marques

	* [r215] trunk/src/Makefile.am, trunk/src/Makefile.in, trunk/src/td.F90, trunk/src/xc.F90,
	  trunk/src/xc_HJU.F90, trunk/src/xc_KLI.F90:
	  First attempt at Hans-Juergen SIC functional.

2002-07-10  acastro

	* [r214] trunk/doc/octopus.info, trunk/doc/octopus.texi:
	  Ready for tag.

2002-07-10  marques

	* [r213] trunk/share/PP/TM2/N.ascii, trunk/share/PP/TM2/O.ascii:
	  Added TM pseudopotential for N and O

2002-07-10  acastro

	* [r212] trunk/doc/octopus.info, trunk/doc/octopus.texi:
	  New version of the manual.

2002-07-10  marques

	* [r211] trunk/src/td.F90:
	  Alberto forgot to also change the error message :)

2002-07-10  acastro

	* [r210] trunk/src/td.F90:
	  Little stupid bug corrected.
	* [r209] trunk/src/out.F90:
	  OutputXYZ is not used.
	* [r208] trunk/samples/inp:
	  File 'inp' is now updated, and more complete.

2002-07-09  acastro

	* [r207] trunk/src/mesh1D_create.F90:
	  It was rather stupid before...

2002-07-09  marques

	* [r206] trunk/src/hs_from_acc.F90, trunk/src/hs_from_mult.F90, trunk/src/main.F90,
	  trunk/src/spectrum.F90, trunk/src/strength_function.F90:
	  inp can now be read from standard input!
	  Changed filenames for spectra.

2002-07-09  acastro

	* [r205] trunk/src/out_inc.F90:
	  It was not "#else if" nor "#elseif" but "#elif"!

2002-07-09  marques

	* [r204] trunk/configure, trunk/configure.ac:
	  changed version number to 1.0. cvs will be tagged soon!
	* [r203] trunk/build/fortran90.m4, trunk/configure:
	  Changed ifc default options.

2002-07-09  acastro

	* [r202] trunk/src/global.F90, trunk/src/lcao.F90, trunk/src/main.F90,
	  trunk/src/nbo2xyz.F90:
	  verbose mode if and only if Verbose > 999. Now it is clear.
	* [r201] trunk/src/Makefile.am, trunk/src/Makefile.in:
	  Forgot to change these two files (to remove the nbo2xyz_main thing).

2002-07-09  marques

	* [r200] trunk/src/atom.F90, trunk/src/global.F90:
	  Bug regarding coordinate ajusts fixed (compiler bug, not mine, I think)

2002-07-09  acastro

	* [r199] trunk/src/nbo2xyz.F90, trunk/src/nbo2xyz.h, trunk/src/nbo2xyz_main.c:
	  nbo2xyz compilation should not crash now in alphas.
	  (but command-line flags are no longer possible. Whenever
	  I find out the way to do it in a fully standard and easy
	  way I will do it...)

2002-06-25  acastro

	* [r198] trunk/src/mix.F90:
	  Refixing what already was fixed.
	* [r197] trunk/src/mix.F90:
	  Little bug fixed.
	* [r196] trunk/src/mix.F90, trunk/src/td.F90:
	  Bug fixes.

2002-06-24  acastro

	* [r195] trunk/src/td.F90, trunk/src/td_init.F90:
	  Now the HS may be calculated from Ehrenfest theorem also with nonlocal
	  potentials. However: (i) user defined potentials are not considered,
	  and (ii) movement of the ions is also not considered. This will come later.
	* [r194] trunk/src/run.F90:
	  LCAO also when static restart file is not found.
	* [r193] trunk/src/out_inc.F90, trunk/src/states_inc.F90:
	  Bug fixes in preprocessor directives.

2002-06-18  acastro

	* [r192] trunk/AUTHORS:
	  George wants this slight modification.

2002-06-17  acastro

	* [r191] trunk/src/spectrum.F90:
	  strength-function took *ages* to calculate a spectrum when the "pol"
	  damping was used... This way it should be only one second (OK, it was
	  just maybe half a minute before, but it was annoying!)
	* [r190] trunk/src/spectrum.F90:
	  Just two stupid changes, so that strength-function can keep on working
	  after you changed the way output files are named...
	* [r189] trunk/src/scf.F90:
	  Sorry, submitted the wrong file...
	* [r188] trunk/src/scf.F90:
	  Had to add that stupid line because Intel 6.0 compiler issued
	  an "Address Error". I think it was proper Fortran before, but
	  nevertheless this way it works. (It was a nightmare to find the bug...)

2002-06-12  acastro

	* [r187] trunk/configure, trunk/configure.ac:
	  I think that the proper way to include BLAS/LAPACK libraries when using
	  the intel compiler is through the Math Kernel Library (mkl) of Intel.
	  Please Miguel check wether I changed properly the configure.ac file,
	  it works in my computer but I am not an expert in those macros.

2002-06-05  marques

	* [r186] trunk/src/mix.F90, trunk/src/mix_inc.F90, trunk/src/states_inc.F90:
	  Added subroutine to calculate the current
	  ELF needed an extra term in case we have complex wave-functions

2002-06-04  marques

	* [r185] trunk/src/out_inc.F90, trunk/src/run.F90, trunk/src/scf.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/td.F90, trunk/src/td_init.F90, trunk/src/unocc.F90:
	  OK, finished rewritting output layer. Now it creates (lots of) directories
	  everywhere ;) See if you like it better!
	  Also one can output density, etc with time.
	* [r184] trunk/ChangeLog, trunk/src/mesh1D_inc.F90, trunk/src/mesh3D_inc.F90,
	  trunk/src/run.F90, trunk/src/scf.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/static_pol.F90, trunk/src/td_init.F90, trunk/src/unocc.F90:
	  Elf now seems to work (funny bug in derivatives fixed)
	  Second step at rewritting the output systems (only td left)

2002-05-31  marques

	* [r183] trunk/src/states.F90:
	  stupid units! The ELF is dimensionless!!!!
	* [r182] trunk/ChangeLog, trunk/liboct/interface.c, trunk/src/Makefile.am,
	  trunk/src/Makefile.in, trunk/src/geom_opt.F90, trunk/src/h.F90,
	  trunk/src/h_external_pot.F90, trunk/src/lasers.F90, trunk/src/liboct.F90,
	  trunk/src/out.F90, trunk/src/ps3D.F90, trunk/src/scf.F90, trunk/src/states.F90,
	  trunk/src/systm.F90, trunk/src/xc.F90:
	  Started rewitting the output system (first attempt at elf)
	  funny thing with strings (hard to explain... fortran...)
	* [r181] trunk/src/hs_from_acc.F90, trunk/src/hs_from_mult.F90, trunk/src/spectrum.F90:
	  Now we can ask for a lower limit for the calculation of the spectra.

2002-05-30  marques

	* [r180] trunk/liboct/interface.c, trunk/src/lasers.F90:
	  New laser mode '10' (read amplitude and phase from a file)

2002-05-29  marques

	* [r179] trunk/configure, trunk/configure.ac, trunk/src/nbo2xyz.F90,
	  trunk/src/nbo2xyz_main.c:
	  Sorry, screwed up the configuratino in the last commit.
	  Also a couple of changes not to get compiler warnings ;)
	* [r178] trunk/configure, trunk/configure.ac, trunk/src/eigen_cg1.F90, trunk/src/h_inc.F90,
	  trunk/src/scf.F90, trunk/src/states.F90, trunk/src/xc_pot.F90:
	  Code merge - a couple of new things on non-collinear spin
	  (still doesn't converge), and a couple of bug fixes.

2002-05-28  acastro

	* [r177] trunk/src/dx.F90, trunk/src/function_to_dx.F90, trunk/src/global.F90,
	  trunk/src/mesh1D_inc.F90:
	  The alpha argument was not passed to the derivatives subroutine in 1D
	  version, so it did not compile. Besides that, I have overloaded the +
	  operator to concatenate strings; this way the operator '//' should not
	  be used because it interacts badly with the preprocessor - I had problems
	  compiling the 1D version because of that. So, from now on, '+' instead
	  of '//'.

2002-05-21  acastro

	* [r176] trunk/src/td_init.F90, trunk/src/td_rti.F90:
	  TDEvolution = 4. Let's try it...
	* [r175] trunk/configure, trunk/configure.ac:
	  So that C and Fortran blas/lapack libraries can coexist peacefully in
	  the same computer (relevant for linux).
	* [r174] trunk/src/nbo2xyz.F90, trunk/src/nbo2xyz_main.c:
	  Bug fixed.

2002-05-20  acastro

	* [r173] trunk/src/global.F90, trunk/src/h_inc.F90, trunk/src/mesh3D_inc.F90,
	  trunk/src/td.F90:
	  Two things:
	  (i) In stdout, the annoying dipole is not printed any longer, but
	  the elapsed time in each iteration. This will ease benchmarking, since
	  I have seen that debuggin mode changes the execution time of some of
	  the subroutines sometimes, specially when using the optimizer.
	  (ii) A *very* stupid hack in the laplacian allows to increase
	  the overall speed in 10% (test made with the formaldiminium molecule).

2002-05-19  acastro

	* [r172] trunk/src/Makefile.am, trunk/src/Makefile.in, trunk/src/nbo2xyz.F90,
	  trunk/src/nbo2xyz.h, trunk/src/nbo2xyz_main.c:
	  By using the GNU "gengetopt" it is very easy to allow the external
	  utilities to accept command line options; I have included it in the
	  nbo2xyz. It now is a 4 lines C program (in nbo2xyc.c) that calls a
	  Fortran subroutine. The rest of the file nbo2xyz.c is automatically
	  generated by gengetopt.
	  This will eventually free nbo2xyz of the existence of the "inp" file,
	  and wil not need to call "atom_init". And the user will not have to
	  modify the inp file to change the sampling rate.

2002-05-17  acastro

	* [r171] trunk/src/nbo2xyz.F90:
	  alpha compiler is annoyingly picky.
	* [r170] trunk/src/Makefile.am, trunk/src/Makefile.in:
	  Better this way

2002-05-17  marques

	* [r169] trunk/src/function_to_dx.F90:
	  simple mistype corrected.

2002-05-17  acastro

	* [r168] trunk/src/Makefile.am, trunk/src/Makefile.in, trunk/src/nbo2xyz.F90:
	  The utility nbo2xyz now reads a nbo file and prints out a xyz file
	  with a sequence of configurations to make a movie.
	* [r167] trunk/src/Makefile.in, trunk/src/dx.F90, trunk/src/function_to_dx.F90:
	  Some bug fixes

2002-05-15  acastro

	* [r166] trunk/configure:
	  This was missing
	* [r165] trunk/Makefile.am, trunk/Makefile.in, trunk/configure.ac:
	  Started the faq section with some question about units. I did not
	  finish them, though.

2002-05-14  acastro

	* [r164] trunk/src/dx.F90, trunk/src/function_to_dx.F90:
	  Sorry, last commit was not complete..
	* [r163] trunk/liboct/interface.c, trunk/src/Makefile.am, trunk/src/liboct.F90:
	  A first attempt of module dx -- that builds the necessary interface
	  to dx -- has been added. Also, a first version of an auxiliary
	  utility, function-to-dx. It will read a restart/cont file and build
	  the necessary data and header files for dx. It is very preliminary!!
	* [r162] trunk/src/mesh.F90, trunk/src/mesh1D_create.F90, trunk/src/mesh3D_create.F90,
	  trunk/src/mesh3D_inc.F90:
	  The laplacian/gradient is calculated now differently if aa isotropical
	  mesh is used. The reason is efficiency. Using abf90 in linux, the td
	  part now seems to go 50% faster.
	* [r161] trunk/src/td_rti.F90:
	  I need this to benchmark.

2002-05-13  marques

	* [r160] trunk/src/out.F90:
	  New output layer.
	  New output layer (forgot this file, sorry!)
	* [r159] trunk/ChangeLog, trunk/liboct/interface.c, trunk/src/Makefile.am,
	  trunk/src/Makefile.in, trunk/src/h.F90, trunk/src/h_external_pot.F90, trunk/src/h_inc.F90,
	  trunk/src/hamiltonian.F90, trunk/src/hamiltonian_inc.F90, trunk/src/liboct.F90,
	  trunk/src/systm.F90:
	  Rename files.
	  Started rewritting the output layer.
	* [r158] trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/systm.F90,
	  trunk/src/td.F90:
	  Restart is now done from .nbo file.

2002-05-09  acastro

	* [r157] trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/systm.F90:
	  The restart may now be made with the ions moving.

2002-05-08  acastro

	* [r156] trunk/src/h_external_pot.F90, trunk/src/mesh1D_inc.F90, trunk/src/ps1D.F90:
	  The 1D part had to be updated after the hgh ps were introduced (it did
	  not compile)

2002-05-06  marques

	* [r155] trunk/share/PP/HGH/Ag.hgh, trunk/share/PP/HGH/Ag_sc.hgh, trunk/share/PP/HGH/Al.hgh,
	  trunk/share/PP/HGH/Ar.hgh, trunk/share/PP/HGH/As.hgh, trunk/share/PP/HGH/At.hgh,
	  trunk/share/PP/HGH/Au.hgh, trunk/share/PP/HGH/Au_sc.hgh, trunk/share/PP/HGH/B.hgh,
	  trunk/share/PP/HGH/Ba.hgh, trunk/share/PP/HGH/Ba_sc.hgh, trunk/share/PP/HGH/Be.hgh,
	  trunk/share/PP/HGH/Be_sc.hgh, trunk/share/PP/HGH/Bi.hgh, trunk/share/PP/HGH/Br.hgh,
	  trunk/share/PP/HGH/C.hgh, trunk/share/PP/HGH/Ca.hgh, trunk/share/PP/HGH/Ca_sc.hgh,
	  trunk/share/PP/HGH/Cd.hgh, trunk/share/PP/HGH/Cd_sc.hgh, trunk/share/PP/HGH/Ce_sc.hgh,
	  trunk/share/PP/HGH/Cl.hgh, trunk/share/PP/HGH/Co.hgh, trunk/share/PP/HGH/Co_sc.hgh,
	  trunk/share/PP/HGH/Cr.hgh, trunk/share/PP/HGH/Cr_sc.hgh, trunk/share/PP/HGH/Cs.hgh,
	  trunk/share/PP/HGH/Cs_sc.hgh, trunk/share/PP/HGH/Cu.hgh, trunk/share/PP/HGH/Cu_sc.hgh,
	  trunk/share/PP/HGH/Dy_sc.hgh, trunk/share/PP/HGH/Er_sc.hgh, trunk/share/PP/HGH/Eu_sc.hgh,
	  trunk/share/PP/HGH/F.hgh, trunk/share/PP/HGH/Fe.hgh, trunk/share/PP/HGH/Fe_sc.hgh,
	  trunk/share/PP/HGH/Ga.hgh, trunk/share/PP/HGH/Ga_sc.hgh, trunk/share/PP/HGH/Gd_sc.hgh,
	  trunk/share/PP/HGH/Ge.hgh, trunk/share/PP/HGH/H.hgh, trunk/share/PP/HGH/He.hgh,
	  trunk/share/PP/HGH/Hf_sc.hgh, trunk/share/PP/HGH/Hg.hgh, trunk/share/PP/HGH/Hg_sc.hgh,
	  trunk/share/PP/HGH/Ho_sc.hgh, trunk/share/PP/HGH/I.hgh, trunk/share/PP/HGH/In.hgh,
	  trunk/share/PP/HGH/In_sc.hgh, trunk/share/PP/HGH/Ir.hgh, trunk/share/PP/HGH/Ir_sc.hgh,
	  trunk/share/PP/HGH/K.hgh, trunk/share/PP/HGH/K_sc.hgh, trunk/share/PP/HGH/Kr.hgh,
	  trunk/share/PP/HGH/La_sc.hgh, trunk/share/PP/HGH/Li.hgh, trunk/share/PP/HGH/Li_sc.hgh,
	  trunk/share/PP/HGH/Lu_sc.hgh, trunk/share/PP/HGH/Mg.hgh, trunk/share/PP/HGH/Mg_sc.hgh,
	  trunk/share/PP/HGH/Mn.hgh, trunk/share/PP/HGH/Mn_sc.hgh, trunk/share/PP/HGH/Mo.hgh,
	  trunk/share/PP/HGH/Mo_sc.hgh, trunk/share/PP/HGH/N.hgh, trunk/share/PP/HGH/Na.hgh,
	  trunk/share/PP/HGH/Na_sc.hgh, trunk/share/PP/HGH/Nb.hgh, trunk/share/PP/HGH/Nb_sc.hgh,
	  trunk/share/PP/HGH/Nd_sc.hgh, trunk/share/PP/HGH/Ne.hgh, trunk/share/PP/HGH/Ni.hgh,
	  trunk/share/PP/HGH/Ni_sc.hgh, trunk/share/PP/HGH/O.hgh, trunk/share/PP/HGH/Os.hgh,
	  trunk/share/PP/HGH/Os_sc.hgh, trunk/share/PP/HGH/P.hgh, trunk/share/PP/HGH/Pb.hgh,
	  trunk/share/PP/HGH/Pd.hgh, trunk/share/PP/HGH/Pd_sc.hgh, trunk/share/PP/HGH/Pm_sc.hgh,
	  trunk/share/PP/HGH/Po.hgh, trunk/share/PP/HGH/Pr_sc.hgh, trunk/share/PP/HGH/Pt.hgh,
	  trunk/share/PP/HGH/Pt_sc.hgh, trunk/share/PP/HGH/Rb.hgh, trunk/share/PP/HGH/Rb_sc.hgh,
	  trunk/share/PP/HGH/Re.hgh, trunk/share/PP/HGH/Re_sc.hgh, trunk/share/PP/HGH/Rh.hgh,
	  trunk/share/PP/HGH/Rh_sc.hgh, trunk/share/PP/HGH/Rn.hgh, trunk/share/PP/HGH/Ru.hgh,
	  trunk/share/PP/HGH/Ru_sc.hgh, trunk/share/PP/HGH/S.hgh, trunk/share/PP/HGH/Sb.hgh,
	  trunk/share/PP/HGH/Sc.hgh, trunk/share/PP/HGH/Sc_sc.hgh, trunk/share/PP/HGH/Se.hgh,
	  trunk/share/PP/HGH/Si.hgh, trunk/share/PP/HGH/Sm_sc.hgh, trunk/share/PP/HGH/Sn.hgh,
	  trunk/share/PP/HGH/Sr.hgh, trunk/share/PP/HGH/Sr_sc.hgh, trunk/share/PP/HGH/Ta.hgh,
	  trunk/share/PP/HGH/Ta_sc.hgh, trunk/share/PP/HGH/Tb_sc.hgh, trunk/share/PP/HGH/Tc.hgh,
	  trunk/share/PP/HGH/Tc_sc.hgh, trunk/share/PP/HGH/Te.hgh, trunk/share/PP/HGH/Ti.hgh,
	  trunk/share/PP/HGH/Ti_sc.hgh, trunk/share/PP/HGH/Tl.hgh, trunk/share/PP/HGH/Tl_sc.hgh,
	  trunk/share/PP/HGH/Tm_sc.hgh, trunk/share/PP/HGH/V.hgh, trunk/share/PP/HGH/V_sc.hgh,
	  trunk/share/PP/HGH/W.hgh, trunk/share/PP/HGH/W_sc.hgh, trunk/share/PP/HGH/Xe.hgh,
	  trunk/share/PP/HGH/Y.hgh, trunk/share/PP/HGH/Y_sc.hgh, trunk/share/PP/HGH/Yb_sc.hgh,
	  trunk/share/PP/HGH/Zn.hgh, trunk/share/PP/HGH/Zn_sc.hgh, trunk/share/PP/HGH/Zr.hgh,
	  trunk/share/PP/HGH/Zr_sc.hgh:
	  Added the rest of the pseudopotential files.
	  Someone should check it they are OK!

2002-05-05  marques

	* [r154] trunk/Makefile.am, trunk/Makefile.in:
	  Delete config.status and config.log when make dist-clean
	* [r153] trunk/ChangeLog, trunk/liboct/parse.c, trunk/share/PP/HGH/B.hgh,
	  trunk/share/PP/HGH/Be.hgh, trunk/share/PP/HGH/Be_sc.hgh, trunk/share/PP/HGH/C.hgh,
	  trunk/share/PP/HGH/H.hgh, trunk/share/PP/HGH/He.hgh, trunk/share/PP/HGH/Li.hgh,
	  trunk/share/PP/HGH/Li_sc.hgh, trunk/share/PP/HGH/N.hgh, trunk/share/PP/HGH/Na.hgh,
	  trunk/share/PP/HGH/Ti.hgh:
	  Added a couple of .hgh files
	* [r152] trunk/src/h_external_pot.F90, trunk/src/hgh.F90, trunk/src/ps3D.F90:
	  A couple of bug fixes.
	* [r151] trunk/src/hgh.F90, trunk/src/ps3D.F90, trunk/src/tm.F90:
	  Fixed input/output bugs!
	* [r150] trunk/src/hamiltonian_inc.F90, trunk/src/hgh.F90, trunk/src/td_rti3.F90:
	  Code now compiles without errors.

2002-05-05  acastro

	* [r149] trunk/src/h_external_pot.F90, trunk/src/specie.F90:
	  Bug fixed.

2002-05-05  marques

	* [r148] trunk/ChangeLog, trunk/configure, trunk/configure.ac,
	  trunk/share/PP/HGH/Makefile.am, trunk/share/PP/HGH/Makefile.in,
	  trunk/share/PP/Makefile.am, trunk/share/PP/Makefile.in, trunk/share/PP/TM2/C.ascii,
	  trunk/share/PP/TM2/H.ascii, trunk/src/Makefile.am, trunk/src/Makefile.in,
	  trunk/src/hamiltonian_inc.F90, trunk/src/ps.F90, trunk/src/td.F90, trunk/src/td_init.F90,
	  trunk/src/td_rti.F90, trunk/src/td_rti3.F90:
	  Created Makefiles for HGH share directory
	  Added split-operator propagator (do *not* use with velocity gauge)

2002-05-04  acastro

	* [r147] trunk/share/PP/HGH, trunk/share/PP/HGH/C.hgh, trunk/share/PP/HGH/H.hgh,
	  trunk/share/PP/HGH/He.hgh, trunk/share/PP/HGH/Na.hgh, trunk/share/PP/HGH/Ti.hgh,
	  trunk/src/hgh.F90, trunk/src/tm.F90:
	  hgh ps added to the share/PP/HGH directory, that I created. The program
	  tries to read them from there. *BUT* the building process has probably
	  to be touched, and I don't know how to do it :((

2002-05-03  acastro

	* [r146] trunk/src/atom.F90, trunk/src/h_external_pot.F90, trunk/src/h_forces.F90,
	  trunk/src/hamiltonian_inc.F90, trunk/src/hgh.F90, trunk/src/lcao.F90,
	  trunk/src/liboct.F90, trunk/src/ps.F90, trunk/src/ps3D.F90, trunk/src/specie.F90,
	  trunk/src/tm.F90:
	  Goedecker pseudopotentials added. Some comments:
	  (1) LCAO calculations don't work properly, because the Goedecker
	  pseudoeigenfunctions are badly calculated. It can be fixed, but
	  it will take time.
	  (2) The files ps3D.F90, tm.F90 and hgh.F90 are still a mess, but they
	  are on their way of looking nice. Need some work.
	  (3) The pseudopotential files for Goedecker may be obtained from their
	  paper, just copying 10 or 12 numbers, in the same format they use in their
	  paper. Those files should
	  go into the share directory, as Miguel did for the TM2 ps. Question: do
	  I just have to add a "HGH" directory to share/PP, and it is done?
	  (4) The "Species" input format changed (one more field to specify "tm"
	  or "hgh"). I will change the manual.

2002-05-03  marques

	* [r145] trunk/liboct/interface.c:
	  Comment was out of place.

2002-05-03  acastro

	* [r144] trunk/liboct/interface.c:
	  Gamma function added to liboct

2002-04-29  marques

	* [r143] trunk/ChangeLog, trunk/Makefile.am, trunk/Makefile.in, trunk/acinclude.m4,
	  trunk/aclocal.m4, trunk/autogen.sh, trunk/build/acx.m4, trunk/build/fortran90.m4,
	  trunk/configure, trunk/configure.ac, trunk/doc/octopus.info, trunk/liboct/geom_opt.c,
	  trunk/liboct/grammar.c, trunk/liboct/grammar.y, trunk/liboct/interface.c,
	  trunk/liboct/liboct.h, trunk/liboct/parse.c, trunk/liboct/parse_exp.c,
	  trunk/liboct/recipes.c, trunk/liboct/symbols.c, trunk/liboct/symbols.h,
	  trunk/liboct/varia.c, trunk/liboct/ylm.c, trunk/share, trunk/share/Makefile.am,
	  trunk/share/Makefile.in, trunk/share/PP, trunk/share/PP/Makefile.am,
	  trunk/share/PP/Makefile.in, trunk/share/PP/TM2, trunk/share/PP/TM2/Makefile.am,
	  trunk/share/PP/TM2/Makefile.in, trunk/share/PP/TM2/Na.ascii, trunk/src/Makefile.am,
	  trunk/src/Makefile.in, trunk/src/atom.F90, trunk/src/complex.F90, trunk/src/eigen.F90,
	  trunk/src/eigen_cg1.F90, trunk/src/eigen_cg2.F90, trunk/src/fft.F90,
	  trunk/src/geom_opt.F90, trunk/src/global.F90, trunk/src/h_external_pot.F90,
	  trunk/src/h_forces.F90, trunk/src/hamiltonian.F90, trunk/src/hamiltonian_inc.F90,
	  trunk/src/hartree.F90, trunk/src/hartree1D.F90, trunk/src/hartree3D.F90,
	  trunk/src/hs_from_acc.F90, trunk/src/hs_from_mult.F90, trunk/src/lasers.F90,
	  trunk/src/lcao.F90, trunk/src/liboct.F90, trunk/src/main.F90, trunk/src/math.F90,
	  trunk/src/mesh.F90, trunk/src/mesh1D.F90, trunk/src/mesh1D_create.F90,
	  trunk/src/mesh1D_inc.F90, trunk/src/mesh3D.F90, trunk/src/mesh3D_create.F90,
	  trunk/src/mesh3D_inc.F90, trunk/src/mesh_inc.F90, trunk/src/mix.F90,
	  trunk/src/mix_inc.F90, trunk/src/pes.F90, trunk/src/pes_mask.F90, trunk/src/pes_rc.F90,
	  trunk/src/ps.F90, trunk/src/ps1D.F90, trunk/src/ps3D.F90, trunk/src/pulpo.F90,
	  trunk/src/real.F90, trunk/src/run.F90, trunk/src/scf.F90, trunk/src/specie.F90,
	  trunk/src/spectrum.F90, trunk/src/spline.F90, trunk/src/states.F90,
	  trunk/src/states_inc.F90, trunk/src/states_kpoints.F90, trunk/src/static_pol.F90,
	  trunk/src/strength_function.F90, trunk/src/systm.F90, trunk/src/td.F90,
	  trunk/src/td_init.F90, trunk/src/td_rti.F90, trunk/src/undef.F90, trunk/src/units.F90,
	  trunk/src/unocc.F90, trunk/src/xc.F90, trunk/src/xc_GGA.F90, trunk/src/xc_KLI.F90,
	  trunk/src/xc_KLI_SIC.F90, trunk/src/xc_KLI_x.F90, trunk/src/xc_LDA.F90,
	  trunk/src/xc_pot.F90:
	  Added GPL header to (almost) all files
	  Added share directory to put pseudopotentials

2002-04-26  marques

	* [r142] trunk/liboct/parse.c:
	  Alberto had changed parse_block_int, but not parse_int
	* [r141] trunk/liboct/parse.c:
	  Cosmetics

2002-04-26  acastro

	* [r140] trunk/liboct/parse.c:
	  Negative integer numbers were not well handled in parse_block_int.

2002-04-24  acastro

	* [r139] trunk/src/h_external_pot.F90, trunk/src/ps3D.F90, trunk/src/specie.F90:
	  Removed the unnecesary dividing by r**l in the definition of uv. This
	  simplifies calculating the gradient for the forces.
	  Also, in h_external_pot, the uvu terms are always calculated in both
	  ways (numerically and analytically) and consistency check is performed.
	  However, the analytical form is always used.

2002-04-23  marques

	* [r138] trunk/ChangeLog, trunk/src/hamiltonian_inc.F90:
	  Memory leak fixed in Hpsi (hamiltonian_inc.F90)
	* [r137] trunk/ChangeLog, trunk/src/atom.F90, trunk/src/geom_opt.F90,
	  trunk/src/h_external_pot.F90, trunk/src/hamiltonian.F90, trunk/src/hamiltonian_inc.F90,
	  trunk/src/run.F90, trunk/src/specie.F90, trunk/src/states.F90, trunk/src/systm.F90,
	  trunk/src/xc_GGA.F90, trunk/src/xc_KLI.F90, trunk/src/xc_KLI_SIC.F90,
	  trunk/src/xc_pot.F90:
	  Bug fix in restart in mpi mode (run.F90)
	  Cleaned up non-linear core corrections (faster, smaller)

2002-04-20  marques

	* [r136] trunk/ChangeLog, trunk/build/fortran90.m4, trunk/configure, trunk/src/Makefile.am,
	  trunk/src/Makefile.in, trunk/src/h_external_pot.F90, trunk/src/hamiltonian.F90,
	  trunk/src/hamiltonian_inc.F90, trunk/src/hs_from_acc.F90, trunk/src/hs_from_mult.F90,
	  trunk/src/mesh3D_create.F90, trunk/src/mix_inc.F90, trunk/src/spectrum.F90:
	  Changed AIX compiler options in fortran.m4
	  Bug fix related to the reading of OutputPotential...
	  Added utility to calculate harmonic spectrum from accelaration file
	  (currently only works for local potentials)

2002-04-18  acastro

	* [r135] trunk/src/hartree3D.F90, trunk/src/mesh3D.F90, trunk/src/states.F90:
	  Bug fixes.

2002-04-17  marques

	* [r134] trunk/ChangeLog, trunk/Makefile.am, trunk/Makefile.in, trunk/build/octopus.spec.in,
	  trunk/configure, trunk/configure.ac, trunk/liboct/config.h.in, trunk/src/Makefile.am,
	  trunk/src/Makefile.in, trunk/src/config.h.in, trunk/src/hamiltonian_inc.F90,
	  trunk/src/hartree3D.F90, trunk/src/mesh3D.F90, trunk/src/mesh3D_create.F90,
	  trunk/src/mesh3D_inc.F90, trunk/src/states.F90, trunk/src/states_kpoints.F90:
	  First round at polymers.

2002-04-16  marques

	* [r133] trunk/ChangeLog, trunk/src/spectrum.F90, trunk/src/strength_function.F90:
	  bug fix in spectrum.F90

2002-04-16  cvsusers

	* [r132] trunk/src/hamiltonian_inc.F90, trunk/src/lcao.F90, trunk/src/run.F90,
	  trunk/src/scf.F90:
	  LCAO is done now calculating all matrix elements at the beginning,
	  except that part that has to be updated every step.

2002-04-16  marques

	* [r131] trunk/AUTHORS, trunk/ChangeLog, trunk/INSTALL:
	  This should have been done a long time ago!
	* [r130] trunk/Makefile.am, trunk/Makefile.in, trunk/acinclude.m4, trunk/aclocal.m4,
	  trunk/build, trunk/build/acx.m4, trunk/build/fortran90.m4, trunk/configure,
	  trunk/configure.ac, trunk/doc/Makefile.in, trunk/fortran90.m4, trunk/liboct/Makefile.in,
	  trunk/liboct/config.h.in, trunk/liboct/geom_opt.c, trunk/liboct/recipes.c,
	  trunk/src/Makefile.am, trunk/src/Makefile.in, trunk/src/config.h.in,
	  trunk/src/h_forces.F90, trunk/src/hamiltonian_inc.F90, trunk/src/mix_inc.F90,
	  trunk/src/pes.F90, trunk/src/pes_mask.F90, trunk/src/run.F90, trunk/src/states_inc.F90,
	  trunk/src/td.F90:
	  MPI code now working
	  build system simplifyed a bit (GSL part)

2002-04-12  marques

	* [r129] trunk/src/geom_opt.F90, trunk/src/scf.F90:
	  Geometry optimization seems to work for:
	  steepest descents
	  alphas (code crashes miserably in i686 god know why!)
	* [r128] trunk/src/states.F90:
	  changed EmptyStates -> ExtraStates to avoid confusion.
	* [r127] trunk/src/units.F90:
	  Force factor was wrong.

2002-04-12  cvsusers

	* [r126] trunk/src/lcao.F90, trunk/src/run.F90, trunk/src/scf.F90:
	  SCF within LCAO subspace (not very smart yet...)

2002-04-11  cvsusers

	* [r125] trunk/src/lcao.F90:
	  Bug fixed. Pointers caused troubles, I just removed them because
	  I think they will always cause trouble in Fortran...

2002-04-10  cvsusers

	* [r124] trunk/src/atom.F90:
	  Nullify instead of allocating to zero. To keep Compaq compiler happy.
	* [r123] trunk/src/h_external_pot.F90, trunk/src/mesh3D_inc.F90:
	  Functionality of mesh_write_function improved. Local potential
	  may now be printed in a line or plane. Should keep improving,
	  nevertheless.

2002-04-10  marques

	* [r122] trunk/TODO, trunk/liboct/Makefile.am, trunk/liboct/Makefile.in,
	  trunk/liboct/f77_func.h, trunk/liboct/geom_opt.c, trunk/liboct/interface.c,
	  trunk/src/Makefile.am, trunk/src/Makefile.in, trunk/src/geom_opt.F90,
	  trunk/src/hamiltonian.F90, trunk/src/hamiltonian_inc.F90, trunk/src/pes.F90,
	  trunk/src/pes_mask.F90, trunk/src/run.F90, trunk/src/td_init.F90:
	  Added geometry optimization (using GSL)
	  Ansorbing boundaries now work with parallelepiped box.

2002-04-09  cvsusers

	* [r121] trunk/src/atom.F90, trunk/src/lcao.F90:
	  Stupid Compaq compiler does not like to be passed an unallocated array,
	  so I allocate ca%atom to zero. Also, the compiler did not like
	  something about lcao, I don't know very well why. Since it is not
	  very important, I left it as it was before, which worked.

2002-04-06  marques

	* [r120] trunk/configure, trunk/configure.ac, trunk/src/Makefile.am, trunk/src/Makefile.in,
	  trunk/src/complex.F90, trunk/src/hamiltonian.F90, trunk/src/hamiltonian_inc.F90,
	  trunk/src/hs_from_mult.F90, trunk/src/liboct.F90, trunk/src/mix_inc.F90,
	  trunk/src/ps_xc.F90, trunk/src/real.F90, trunk/src/run.F90, trunk/src/spectrum.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/strength_function.F90,
	  trunk/src/td.F90, trunk/src/td_rti.F90, trunk/src/undef.F90, trunk/src/xc.F90,
	  trunk/src/xc_KLI.F90, trunk/src/xc_KLI_SIC.F90, trunk/src/xc_LDA.F90,
	  trunk/src/xc_pot.F90:
	  Added non-collineal spin (not tested)
	  Added a couple of utilities to calculate spectra.

2002-04-05  cvsusers

	* [r119] trunk/src/mesh.F90, trunk/src/mesh1D.F90, trunk/src/mesh1D_inc.F90,
	  trunk/src/mesh3D.F90, trunk/src/mesh3D_inc.F90, trunk/src/mesh_inc.F90:
	  Common code in 1D and 3D indentified. Some more simplifications
	  in the 1D part may be done
	* [r118] trunk/src/h_forces.F90, trunk/src/td.F90:
	  Bug fixed in mesh1D_inc.F90, h_forces, and td.F90...

2002-04-04  cvsusers

	* [r117] trunk/src/mesh1D_inc.F90:
	  Bug fixed: gradient wasn not properly calculated

2002-04-03  marques

	* [r116] trunk/TODO:
	  *** empty log message ***
	* [r115] trunk/TODO:
	  nada de especial

2002-04-02  marques

	* [r114] trunk/src/td.F90:
	  small bug fix
	* [r113] trunk/src/td.F90:
	  Correction to the calculation of the acceleration.

2002-04-01  marques

	* [r112] trunk/Makefile.am, trunk/Makefile.in, trunk/TODO, trunk/acinclude.m4,
	  trunk/aclocal.m4, trunk/configure, trunk/configure.ac, trunk/doc/Makefile.in,
	  trunk/fortran90.m4, trunk/liboct/Makefile.in, trunk/liboct/config.h.in,
	  trunk/liboct/interface.c, trunk/liboct/recipes.c, trunk/src/Makefile.am,
	  trunk/src/Makefile.in, trunk/src/config.h.in, trunk/src/global.F90,
	  trunk/src/h_external_pot.F90, trunk/src/h_forces.F90, trunk/src/mesh1D_inc.F90,
	  trunk/src/mesh3D_inc.F90, trunk/src/run.F90, trunk/src/td.F90, trunk/src/td_init.F90,
	  trunk/src/xc.F90:
	  --enable-mpi now works
	  Cleaned up build system

2002-03-30  cvsusers

	* [r111] trunk/src/td.F90:
	  A sligth change in td_calc_tacc

2002-03-29  cvsusers

	* [r110] trunk/src/td.F90, trunk/src/td_init.F90, trunk/src/units.F90:
	  Horrible bug fixed in td.F90! It seems that the laser was not
	  updated for the ionic force! And I think this is the second time
	  I slip that bug in the code...
	  Besides that, system dipole acceleration may now be output on the fly.

2002-03-28  cvsusers

	* [r109] trunk/src/h_external_pot.F90, trunk/src/ps.F90, trunk/src/ps1D.F90,
	  trunk/src/ps3D.F90, trunk/src/specie.F90:
	  ps1D cleaned. Now the 1D atoms potentials should be read from input
	  file, parsing the appropriate potential. Also, user defined potentials
	  are now available in 1D, too.
	* [r108] trunk/src/h_external_pot.F90, trunk/src/mesh1D_inc.F90, trunk/src/mesh3D_inc.F90:
	  Within mesh, the utility RFUNC(write_mesh_function) is added to
	  write a function defined in the mesh to a given file. More sophisticated
	  things of this sort should be added, I think, or either this one improved.
	  I use it at the end of h_external_pot, now, to output the local potential
	  if desired.
	* [r107] trunk/src/h_forces.F90:
	  Bug fix: the local part was not added...

2002-03-27  marques

	* [r106] trunk/liboct/interface.c, trunk/src/h_forces.F90, trunk/src/hartree3D.F90,
	  trunk/src/lcao.F90, trunk/src/specie.F90:
	  Several bug fixes (now userdef potential works better)

2002-03-26  marques

	* [r105] trunk/liboct/interface.c, trunk/liboct/parse.c, trunk/liboct/symbols.c,
	  trunk/liboct/symbols.h, trunk/src/h_external_pot.F90, trunk/src/liboct.F90,
	  trunk/src/mesh3D_create.F90, trunk/src/specie.F90, trunk/src/states_inc.F90,
	  trunk/src/td_init.F90:
	  User defined potentials now work (they are cute)
	  Removed restrictions regarding the mesh inputs
	  Couple irrelevant bug fixes
	* [r104] trunk/src/eigen_cg2.F90, trunk/src/ps3D.F90, trunk/src/run.F90,
	  trunk/src/states.F90, trunk/src/states_inc.F90:
	  Better initialization of zpsi
	  Pseudopotentials can be read from .ascii file

2002-03-14  marques

	* [r103] trunk/Makefile.am, trunk/Makefile.in, trunk/acinclude.m4, trunk/aclocal.m4,
	  trunk/configure, trunk/samples/inp, trunk/src/Makefile.in, trunk/src/eigen_cg1.F90,
	  trunk/src/eigen_cg2.F90, trunk/src/mix.F90:
	  Bug in broyden caught and smashed! Let us hope this is the last of the BIG bugs!
	  Updated the inp file which was outdated.
	* [r102] trunk/src/Makefile.am, trunk/src/eigen_cg2.F90, trunk/src/mix_inc.F90,
	  trunk/src/pes_mask.F90, trunk/src/states_inc.F90, trunk/src/td_init.F90:
	  Small fixes.
	  Major bug present in the code!!! In the scf cycle (somewhere) Beware!
	* [r101] trunk/liboct/symbols.c, trunk/src/mesh1D.F90, trunk/src/mesh3D.F90,
	  trunk/src/mesh3D_create.F90:
	  Missplels corrected
	  cilinder -> cylinder
	  parallelpe.. -> pasallelepe..
	  This means two options changed!!!
	* [r100] trunk/acinclude.m4, trunk/aclocal.m4, trunk/configure, trunk/configure.ac,
	  trunk/doc/octopus.info, trunk/doc/octopus.texi, trunk/src/atom.F90, trunk/src/global.F90,
	  trunk/src/td.F90, trunk/src/units.F90:
	  Troubleshooting section in the manual.
	  Code now compiles seemleesly with the intel compiler.
	* [r99] trunk/acinclude.m4, trunk/aclocal.m4, trunk/configure, trunk/src/atom.F90,
	  trunk/src/lcao.F90, trunk/src/ps3D.F90:
	  Code now works on the Intel compiler for Linux.

2002-03-13  marques

	* [r98] trunk/acinclude.m4, trunk/aclocal.m4, trunk/configure, trunk/configure.ac,
	  trunk/doc/octopus.info, trunk/doc/octopus.texi, trunk/liboct/interface.c,
	  trunk/liboct/liboct.h, trunk/liboct/parse.c, trunk/liboct/recipes.c,
	  trunk/liboct/symbols.c, trunk/liboct/symbols.h, trunk/liboct/varia.c, trunk/liboct/ylm.c:
	  Bug fixes to make octopus run in the IBM
	  preliminary support for the intel compiler
	* [r97] trunk/doc/octopus.texi:
	  Some aditions to the manual.
	* [r96] trunk/doc/octopus.texi:
	  Angel's additions to manual.

2002-03-12  cvsusers

	* [r95] trunk/src/atom.F90, trunk/src/h_external_pot.F90, trunk/src/systm.F90,
	  trunk/src/td.F90:
	  I have moved kinetic_energy, ion_ion_energy and geom_write_xyz from
	  module systm to module atom, where I think it should belong. This
	  way systm is small :)

2002-03-12  marques

	* [r94] trunk/acinclude.m4, trunk/aclocal.m4, trunk/configure, trunk/doc/octopus.info,
	  trunk/doc/octopus.texi, trunk/src/Makefile.am, trunk/src/Makefile.in,
	  trunk/src/config_F90.h, trunk/src/global.F90, trunk/src/hamiltonian.F90,
	  trunk/src/lcao.F90, trunk/src/pes.F90, trunk/src/pes_mask.F90, trunk/src/pes_rc.F90,
	  trunk/src/scf.F90, trunk/src/states_inc.F90, trunk/src/td.F90, trunk/src/td_init.F90:
	  Included Photo-electron analysis
	  Several bug fixes, derived from the attempt to run retinal in kerma.
	  Most were workarounds to compiler bugs ;)

2002-03-12  cvsusers

	* [r93] trunk/src/h_external_pot.F90, trunk/src/h_forces.F90, trunk/src/mesh1D.F90,
	  trunk/src/mesh3D.F90, trunk/src/specie.F90:
	  Local potential may be calculated in FS now also in ONE_D
	  Also, phase_factor is moved to mesh, where I think it belongs
	* [r92] trunk/src/h_external_pot.F90, trunk/src/h_forces.F90, trunk/src/mesh1D.F90,
	  trunk/src/mesh1D_inc.F90:
	  In 1D, code should work now also with derivatives calculated in
	  Fourier space.

2002-03-11  marques

	* [r91] trunk/Makefile.in, trunk/configure, trunk/configure.ac, trunk/doc/Makefile.in,
	  trunk/liboct/Makefile.in, trunk/liboct/symbols.c, trunk/src/Makefile.am,
	  trunk/src/Makefile.in, trunk/src/atom.F90, trunk/src/h_external_pot.F90,
	  trunk/src/lcao.F90:
	  Bug fixes!
	  Code now runs on alpha-osf, and was successfully compiled in a HP 9000/800
	* [r90] trunk/mkinstalldirs:
	  Removed annoying line!
	* [r89] trunk/Makefile.am, trunk/Makefile.in, trunk/acinclude.m4, trunk/aclocal.m4,
	  trunk/autogen.sh, trunk/automake, trunk/config.guess, trunk/config.sub, trunk/configure,
	  trunk/configure.ac, trunk/configure.in, trunk/depcomp, trunk/doc/Makefile.am,
	  trunk/doc/Makefile.in, trunk/doc/octopus.info, trunk/doc/octopus.texi,
	  trunk/liboct/Makefile.am, trunk/liboct/Makefile.in, trunk/liboct/config.h.in,
	  trunk/liboct/f77_func.h, trunk/liboct/stamp-h1.in, trunk/libtool, trunk/ltconfig,
	  trunk/ltmain.sh, trunk/missing, trunk/mkinstalldirs, trunk/src/Makefile.am,
	  trunk/src/Makefile.in, trunk/src/config_F90.h, trunk/src/eigen.F90, trunk/src/fft.F90,
	  trunk/src/global.F90, trunk/src/hamiltonian.F90, trunk/src/hartree.F90,
	  trunk/src/lasers.F90, trunk/src/lcao.F90, trunk/src/main.F90, trunk/src/math.F90,
	  trunk/src/mesh.F90, trunk/src/mesh1D_inc.F90, trunk/src/mix.F90, trunk/src/ps.F90,
	  trunk/src/ps_kb.F90, trunk/src/ps_xc.F90, trunk/src/run.F90, trunk/src/scf.F90,
	  trunk/src/specie.F90, trunk/src/spline.F90, trunk/src/stamp-h2.in, trunk/src/states.F90,
	  trunk/src/static_pol.F90, trunk/src/td.F90, trunk/src/undef.F90, trunk/src/unocc.F90,
	  trunk/src/xc.F90:
	  Upgraded autoconf/automake/libtool
	  Cleaned up build files
	  configure/make/make install now works in Linux (ix86/alpha) and OSF
	  Have to try other machines ;))

2002-03-10  cvsusers

	* [r88] trunk/src/h_external_pot.F90, trunk/src/xc_KLI_x.F90:
	  A couple of bug fixes to avoid memory growth when doing the ionic
	  movement. The change in h_external_pot does not seem to me
	  as definitive.
	* [r87] trunk/src/hamiltonian.F90:
	  Small bug fixed (h%vpsl => h%nextra)

2002-03-09  marques

	* [r86] trunk/Makefile.in, trunk/configure, trunk/configure.in, trunk/doc/octopus.texi,
	  trunk/mkinstalldirs, trunk/src/atom.F90:
	  Changes to make octopus run in linux alpha with Compac's fort.
	  And it seems to work!
	* [r85] trunk/ltconfig:
	  This file was needed to build in the alphas, so we include it!
	* [r84] trunk/configure, trunk/configure.in, trunk/doc/octopus.info, trunk/doc/octopus.texi,
	  trunk/liboct/symbols.c, trunk/mkinstalldirs, trunk/src/atom.F90:
	  Couple of bug fixes. Nothing special!
	* [r83] trunk/doc/GPL, trunk/doc/octopus.texi:
	  Documentation has grown considerably this night. I think we can
	  already call it a manual now :))
	* [r82] trunk/doc/octopus.texi:
	  Quite some work in manual. But still quite some work to do :))
	* [r81] trunk/liboct/stamp-h1.in, trunk/src/stamp-h2.in:
	  These files were missing!
	* [r80] trunk/Makefile, trunk/Makefile.in, trunk/doc/Makefile, trunk/liboct/Makefile,
	  trunk/liboct/config.h, trunk/src/Makefile, trunk/src/config.h:
	  Build was still not OK. Let us see if it improves now!
	* [r79] trunk/Makefile, trunk/Makefile.am, trunk/Makefile.in, trunk/config.guess,
	  trunk/config.status, trunk/config.sub, trunk/configure, trunk/configure.in,
	  trunk/doc/Makefile, trunk/doc/octopus.texinfo, trunk/liboct/Makefile,
	  trunk/liboct/Makefile.am, trunk/liboct/Makefile.in, trunk/libtool, trunk/ltmain.sh,
	  trunk/missing, trunk/mkinstalldirs, trunk/src/Makefile, trunk/src/Makefile.am,
	  trunk/src/Makefile.in, trunk/src/atom.F90, trunk/src/config.h, trunk/src/specie.F90,
	  trunk/src/systm.F90:
	  Fixed small issues in build system
	  Added missing libtool files
	  Added subroutine to adjust atomic coordinates
	  Couple of bug fixes regarding units

2002-03-07  marques

	* [r78] trunk/src/config.h.in:
	  and this one :))
	* [r77] trunk/liboct/grammar.c:
	  forgot this file :)
	* [r76] trunk/AUTHORS, trunk/COPYING, trunk/ChangeLog, trunk/INSTALL, trunk/Make.i686,
	  trunk/Makefile, trunk/Makefile.am, trunk/Makefile.in, trunk/NEWS, trunk/README,
	  trunk/acinclude.m4, trunk/aclocal.m4, trunk/automake, trunk/config.guess,
	  trunk/config.status, trunk/config.sub, trunk/configure, trunk/configure.in,
	  trunk/doc/Makefile, trunk/doc/Makefile.am, trunk/doc/Makefile.in, trunk/doc/octopus.texi,
	  trunk/doc/texinfo.tex, trunk/install-sh, trunk/liboct/Makefile, trunk/liboct/Makefile.am,
	  trunk/liboct/Makefile.in, trunk/liboct/config.h, trunk/liboct/config.h.in,
	  trunk/liboct/f77_func.h, trunk/liboct/interface.c, trunk/liboct/recipes.c,
	  trunk/src/Makefile, trunk/src/Makefile.am, trunk/src/Makefile.in, trunk/src/atom.F90,
	  trunk/src/config.h, trunk/src/hartree.F90, trunk/src/hartree1D.F90,
	  trunk/src/hartree3D.F90, trunk/src/mesh.F90, trunk/src/mesh1D.F90, trunk/src/mesh3D.F90,
	  trunk/src/ps.F90, trunk/src/states.F90:
	  new build system!

2002-03-07  cvsusers

	* [r75] trunk/src/systm.F90, trunk/src/td.F90, trunk/src/units.F90, trunk/src/xc_KLI_x.F90:
	  Ions should move now (at least velocity verlet has been checked).
	  I added mass to units module. In xc_KLI_x I had to define ex for
	  the case nst = 1, nspin = 1. In systm.F90 I added the subroutine
	  kinetic_energy, but I think both kinetic_energy and ion_ion_energy
	  should migrate to atom module.

2002-03-06  marques

	* [r74] trunk/src/states.F90:
	  Added the possibility to fix the occupations.
	* [r73] trunk/liboct/Makefile, trunk/liboct/interface.c, trunk/liboct/liboct.h,
	  trunk/liboct/symbols.c, trunk/liboct/varia.c:
	  added a couple of predefined symbols
	  routine to optimize the size of the ffts
	* [r72] trunk/src/atom.F90, trunk/src/fft.F90, trunk/src/h_external_pot.F90,
	  trunk/src/h_forces.F90, trunk/src/hamiltonian.F90, trunk/src/liboct.F90,
	  trunk/src/mesh3D.F90, trunk/src/mesh3D_inc.F90, trunk/src/states.F90:
	  Cleaning up.
	  size of the FFTS is now optimized.

2002-03-05  cvsusers

	* [r71] trunk/src/main.F90, trunk/src/td.F90:
	  In td.F90, ions do not move yet, but file *.nbo is printed, with
	  its proper format (the units are missing). In main.F90, the comments
	  have been removed.
	* [r70] trunk/doc/octopus.texinfo:
	  Installation almost done
	* [r69] trunk/src/mesh1D.F90, trunk/src/mesh1D_inc.F90:
	  Subroutines mesh_laplacian_in_FS and mesh_gradient_in_FS adapted
	  to 1D.
	* [r68] trunk/doc/GPL, trunk/doc/octopus.texinfo:
	  GPL separated as an @include file. Implementation of @include is not
	  too good in texinfo, to put it nicely (a fucking mess is my bare
	  opinion). So I will have to think how to keep going in a smart way.

2002-03-03  marques

	* [r67] trunk/src/mesh3D.F90, trunk/src/mesh3D_inc.F90:
	  Derivatives in fourier space now seem to work!

2002-03-02  marques

	* [r66] trunk/src/eigen.F90, trunk/src/h_external_pot.F90, trunk/src/h_forces.F90,
	  trunk/src/mesh3D.F90, trunk/src/mesh3D_inc.F90:
	  A couple of bug fixes, but derivatives in Fourier space and local forces
	  in Fourier space still don't work.
	* [r65] trunk/src/Makefile, trunk/src/global.F90, trunk/src/h_external_pot.F90,
	  trunk/src/h_forces.F90, trunk/src/hamiltonian.F90, trunk/src/mesh3D.F90,
	  trunk/src/mesh3D_inc.F90, trunk/src/scf.F90, trunk/src/specie.F90:
	  Added force calculation.
	  It works more or less... there are still bugs that I could not find!
	  Try it out, and see if you can find them!
	* [r64] trunk/TODO, trunk/src/h_external_pot.F90:
	  Ooops in build_kb_sphere corrected.
	* [r63] trunk/liboct/Makefile, trunk/liboct/symbols.c:
	  Changed .true. => true, etc in symbols. It was mistaking the dots at the
	  for numbers!
	* [r62] trunk/src/h_external_pot.F90:
	  There was a (funny) phase missing in the Fourier interpolation scheme.
	  Now it does seem to work ;))

2002-03-01  cvsusers

	* [r61] trunk/src/hamiltonian_inc.F90:
	  Bug fixed...

2002-02-28  cvsusers

	* [r60] trunk/src/ps.F90, trunk/src/ps3D.F90:
	  name changes
	* [r59] trunk/src/Makefile, trunk/src/atom.F90, trunk/src/h_external_pot.F90,
	  trunk/src/hamiltonian.F90, trunk/src/hamiltonian_inc.F90, trunk/src/hartree1D.F90,
	  trunk/src/lcao.F90, trunk/src/mesh1D.F90, trunk/src/mesh1D_create.F90,
	  trunk/src/mesh1D_inc.F90, trunk/src/ps1D.F90, trunk/src/run.F90, trunk/src/scf.F90,
	  trunk/src/specie.F90, trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/td.F90,
	  trunk/src/td_rti.F90, trunk/src/xc_KLI.F90, trunk/src/xc_KLI_x.F90:
	  1D works. Some bugs fixed (the gram_schmidt!)

2002-02-28  marques

	* [r58] trunk/src/Makefile, trunk/src/h_external_pot.F90, trunk/src/hamiltonian.F90,
	  trunk/src/specie.F90:
	  Fourier interpolation stuff for the non-local part of the pseudopotential
	  I think it is not working...

2002-02-26  cvsusers

	* [r57] trunk/liboct/parse_exp.c:
	  Parser now accepts descriptors with underscores. But should not be used.
	* [r56] trunk/src/mesh3D_create.F90:
	  Now Box_Shape => BoxShape
	* [r55] trunk/src/mesh3D_create.F90:
	  Box_Shape turned into BoxShape. As a convention, descriptors should *not*
	  contain underscores, even if the parser now considers them.

2002-02-25  cvsusers

	* [r54] trunk/liboct/interface.c:
	  Bug fixed.
	* [r53] trunk/liboct/symbols.c:
	  "yes" and "no" are now accepted

2002-02-25  marques

	* [r52] trunk/liboct/parse.c, trunk/liboct/parse_exp.c:
	  small bug fix!

2002-02-25  cvsusers

	* [r51] trunk/src/specie.F90:
	  Bug fixed
	* [r50] trunk/doc/octopus.texinfo:
	  Updated
	* [r49] trunk/src/h_external_pot.F90, trunk/src/hartree.F90, trunk/src/hartree1D.F90,
	  trunk/src/mesh3D.F90, trunk/src/mesh3D_create.F90, trunk/src/mesh3D_inc.F90,
	  trunk/src/static_pol.F90, trunk/src/td_init.F90, trunk/src/xc_GGA.F90:
	  Different spacings for each direction

2002-02-25  marques

	* [r48] trunk/liboct/Makefile, trunk/liboct/grammar.y, trunk/liboct/interface.c,
	  trunk/liboct/liboct.h, trunk/liboct/main.c, trunk/liboct/math.c, trunk/liboct/parse.c,
	  trunk/liboct/parse_exp.c, trunk/liboct/symbols.c, trunk/liboct/symbols.h,
	  trunk/liboct/ylm.c, trunk/src/Makefile, trunk/src/atom.F90, trunk/src/eigen.F90,
	  trunk/src/fdf.F90, trunk/src/global.F90, trunk/src/hamiltonian.F90, trunk/src/hartree.F90,
	  trunk/src/hartree1D.F90, trunk/src/io.F90, trunk/src/lasers.F90, trunk/src/lcao.F90,
	  trunk/src/liboct.F90, trunk/src/main.F90, trunk/src/math.F90, trunk/src/mesh1D.F90,
	  trunk/src/mesh1D_create.F90, trunk/src/mesh3D.F90, trunk/src/mesh3D_create.F90,
	  trunk/src/mix.F90, trunk/src/ps.F90, trunk/src/pulpo.F90, trunk/src/run.F90,
	  trunk/src/scf.F90, trunk/src/specie.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/static_pol.F90, trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_init.F90,
	  trunk/src/units.F90, trunk/src/unocc.F90, trunk/src/xc.F90, trunk/src/xc_GGA.F90,
	  trunk/src/xc_KLI.F90, trunk/src/xc_KLI_SIC.F90, trunk/src/xc_KLI_x.F90,
	  trunk/src/xc_pot.F90:
	  Added calculation of unoccupied states
	  Got rid of fdf library (now we have our own parser in C)

2002-02-21  cvsusers

	* [r47] trunk/doc/octopus.texinfo:
	  Bug fixed
	* [r46] trunk/doc/Makefile, trunk/doc/octopus.texinfo:
	  New updates in the doc!

2002-02-21  marques

	* [r45] trunk/src/mix.F90:
	  Bug fix: Broyden mixing was not working, but now it is ;)
	* [r44] trunk/src/atom.F90, trunk/src/eigen.F90, trunk/src/h_external_pot.F90:
	  3 bug fixes from Alberto

2002-02-20  cvsusers

	* [r43] trunk/doc/octopus.texinfo:
	  Some more doc
	* [r42] trunk/samples, trunk/samples/inp:
	  Obvious.

2002-02-20  marques

	* [r41] trunk/src/Makefile, trunk/src/run.F90, trunk/src/scf.F90, trunk/src/static_pol.F90:
	  Added run_modes 7 and 8 (static polarizability calculation)
	* [r40] trunk/src/h_external_pot.F90, trunk/src/hamiltonian.F90, trunk/src/specie.F90:
	  Non-local in Fourier space seems to be worse than nl in real space.
	  And I think I understand why now!
	* [r39] trunk/src/h_external_pot.F90, trunk/src/hamiltonian.F90, trunk/src/mesh3D.F90,
	  trunk/src/specie.F90:
	  non-local part of pp now in fourier space - will it work?
	* [r38] trunk/src/h_external_pot.F90, trunk/src/hamiltonian.F90, trunk/src/mesh3D.F90,
	  trunk/src/mesh3D_inc.F90:
	  Bug fixes.
	  Now local potential in Fourier space seems to work again!
	* [r37] trunk/src/global.F90, trunk/src/h_external_pot.F90, trunk/src/hamiltonian.F90,
	  trunk/src/hartree.F90, trunk/src/mesh3D.F90, trunk/src/mesh3D_inc.F90:
	  refurbished fft interface.
	  Local potential in Fourier space now uses ffts in double grid.

2002-02-19  marques

	* [r36] trunk/TODO:
	  A couple of this were already done...
	* [r35] trunk/src/eigen_cg2.F90:
	  Forgot this file yesterday ;)
	* [r34] trunk/Makefile, trunk/src/Makefile, trunk/src/atom.F90, trunk/src/complex.F90,
	  trunk/src/eigen.F90, trunk/src/eigen_cg1.F90, trunk/src/global.F90,
	  trunk/src/h_external_pot.F90, trunk/src/hamiltonian.F90, trunk/src/hamiltonian_inc.F90,
	  trunk/src/hartree.F90, trunk/src/hartree1D.F90, trunk/src/lcao.F90,
	  trunk/src/mesh1D_inc.F90, trunk/src/mesh3D_inc.F90, trunk/src/mix.F90, trunk/src/real.F90,
	  trunk/src/run.F90, trunk/src/specie.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/systm.F90:
	  Lots of changes! Second cg eigensolver, broyden mixing, lcao wfs,
	  read pdbs (for biology), classical charges, bug fixes, etc.
	  The 1D compilation is broken.
	  Also changed Makefiles.

2002-02-19  cvsusers

	* [r33] trunk/doc/Makefile, trunk/doc/octopus.dvi, trunk/doc/octopus.info,
	  trunk/doc/octopus.texinfo, trunk/src/hartree1D.F90:
	  Small update in doc. The hartree 1D part could work now, who knows.

2002-02-18  cvsusers

	* [r32] trunk/src/Makefile, trunk/src/h_external_pot.F90, trunk/src/hartree1D.F90,
	  trunk/src/mesh1D.F90, trunk/src/ps1D.F90, trunk/src/specie.F90, trunk/src/states.F90:
	  Some more things for the 1D stuff.
	* [r31] trunk/doc/Makefile, trunk/doc/octopus.dvi, trunk/doc/octopus.info,
	  trunk/doc/octopus.texinfo:
	  Manual updated. No real "manual" yet, but some technicalities have
	  been solved.
	* [r30] trunk/src/mesh1D.F90, trunk/src/mesh1D_create.F90, trunk/src/mesh1D_inc.F90,
	  trunk/src/ps1D.F90:
	  The 1D counterpart of mesh3D*.F90 and ps.F90.
	* [r29] trunk/Makefile, trunk/src/Makefile, trunk/src/atom.F90, trunk/src/global.F90,
	  trunk/src/main.F90, trunk/src/specie.F90:
	  Small changes aimed to include the 1d part (which does not work yet!)
	  Typing "make 1d" you get the "1doctopus.x" executable.

2002-02-15  marques

	* [r28] trunk/src/td_rti.F90:
	  Bug fix: velocity gauge now works for local potentials.
	* [r27] trunk/src/lasers.F90, trunk/src/ps.F90, trunk/src/run.F90, trunk/src/scf.F90,
	  trunk/src/states.F90, trunk/src/td.F90, trunk/src/td_init.F90, trunk/src/td_rti.F90:
	  Velocity gauge does not work!!!
	* [r26] trunk/liboct/math.c, trunk/liboct/recipes.c, trunk/src/global.F90,
	  trunk/src/main.F90, trunk/src/states.F90, trunk/src/states_inc.F90, trunk/src/td.F90:
	  A couple of bug fixes
	  TD part saves multipoles and laser now
	* [r25] trunk/src/Makefile, trunk/src/hamiltonian.F90, trunk/src/lasers.F90,
	  trunk/src/mesh3D_inc.F90, trunk/src/ps.F90, trunk/src/run.F90, trunk/src/scf.F90,
	  trunk/src/states.F90, trunk/src/td.F90, trunk/src/td_init.F90, trunk/src/td_rti.F90,
	  trunk/src/units.F90, trunk/src/xc_LDA.F90, trunk/src/xc_pot.F90:
	  TD part already works, although the rewrite is not completed.
	  A couple of bugs were sprayed.
	  Things are now looking a bit more complete :)

2002-02-14  marques

	* [r24] trunk/src/Makefile, trunk/src/hamiltonian.F90, trunk/src/lasers.F90,
	  trunk/src/mix.F90, trunk/src/mix_inc.F90, trunk/src/run.F90, trunk/src/states.F90,
	  trunk/src/systm.F90, trunk/src/td.F90, trunk/src/td_init.F90:
	  First attempt at time-dependent evolution.
	  Still doesn't work, but almost ;)

2002-02-13  marques

	* [r23] trunk/TODO:
	  more things TODO :)
	* [r22] trunk/src/Makefile, trunk/src/atom.F90, trunk/src/global.F90, trunk/src/mix.F90,
	  trunk/src/run.F90, trunk/src/scf.F90, trunk/src/states_inc.F90:
	  restart now works :)

2002-02-12  marques

	* [r21] trunk/src/eigen_cg1.F90, trunk/src/h_external_pot.F90, trunk/src/mix.F90,
	  trunk/src/ps.F90, trunk/src/states.F90:
	  Non-local part of the pseudopotential now seems to work.
	  There were some funny bugs, if anyone is interested, that were corrected.

2002-02-11  marques

	* [r20] trunk/Make.i686, trunk/liboct/Makefile, trunk/liboct/config.h, trunk/liboct/math.c,
	  trunk/liboct/recipes.c:
	  Our liboct got some new math functions...
	  Make.i386 had to be changed to include GSL.
	* [r19] trunk/src/asinh.F90, trunk/src/eigen_cg1.F90, trunk/src/h_external_pot.F90,
	  trunk/src/hamiltonian.F90, trunk/src/hamiltonian_inc.F90, trunk/src/hartree.F90,
	  trunk/src/main.F90, trunk/src/math.F90, trunk/src/mesh3D.F90, trunk/src/mesh3D_create.F90,
	  trunk/src/mesh3D_inc.F90, trunk/src/mix.F90, trunk/src/ps.F90, trunk/src/pulpo.F90,
	  trunk/src/run.F90, trunk/src/scf.F90, trunk/src/specie.F90, trunk/src/spline.F90,
	  trunk/src/states.F90, trunk/src/xc_GGA.F90:
	  I already does something :))
	  Lots of bugs killed. Mode 1 now seems to work reasonably.
	  Started purging copyrighted code. Most of math.F90 and spline.F90
	  are gone, and mostly replaced by GSL.

2002-02-03  cvsusers

	* [r18] trunk/doc/octopus.texinfo:
	  Manual update

2002-01-31  cvsusers

	* [r17] trunk/doc/octosex.eps, trunk/doc/octosex.jpg:
	  Better pictures

2002-01-31  marques

	* [r16] trunk/TODO:
	  What we have yet to do ;))

2002-01-31  cvsusers

	* [r15] trunk/doc, trunk/doc/Makefile, trunk/doc/octopus.dvi, trunk/doc/octopus.info,
	  trunk/doc/octopus.texinfo, trunk/doc/octosex.eps, trunk/doc/octosex.jpg:
	  Documentation started in texinfo format. (The documentation itself
	  is empty, I have just put the structure...)

2002-01-31  marques

	* [r14] trunk/src/Makefile, trunk/src/eigen.F90, trunk/src/eigen_cg1.F90, trunk/src/fdf.F90,
	  trunk/src/global.F90, trunk/src/hamiltonian.F90, trunk/src/hamiltonian_inc.F90,
	  trunk/src/hartree.F90, trunk/src/lcao.F90, trunk/src/mesh3D.F90,
	  trunk/src/mesh3D_create.F90, trunk/src/mesh3D_inc.F90, trunk/src/mix.F90,
	  trunk/src/run.F90, trunk/src/scf.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/systm.F90, trunk/src/xc_GGA.F90, trunk/src/xc_LDA.F90:
	  The nights work. Still not doing much, but almost! Basic SCF cycle
	  programmed, but there are still bugs left ;))

2002-01-29  marques

	* [r13] trunk/src/hamiltonian.F90:
	  forgot this file
	* [r12] trunk/src/Makefile, trunk/src/fdf.F90, trunk/src/h_external_pot.F90,
	  trunk/src/hamiltonian_inc.F90, trunk/src/mesh3D.F90, trunk/src/run.F90,
	  trunk/src/states.F90, trunk/src/systm.F90, trunk/src/xc.F90, trunk/src/xc_pot.F90:
	  another afternoon's work... it is getting there (slowly)
	* [r11] trunk/liboct/Makefile, trunk/liboct/recipes.c~:
	  removed bogus file + small fix in the Makefile
	* [r10] trunk/Makefile, trunk/liboct, trunk/liboct/Makefile, trunk/liboct/main.c,
	  trunk/liboct/recipes.c, trunk/liboct/recipes.c~, trunk/src/Makefile, trunk/src/fdf.F90,
	  trunk/src/pulpo.F90, trunk/src/run.F90:
	  added liboct (now we have a C library ;))

2002-01-29  cvsusers

	* [r9] trunk/src/Makefile, trunk/src/run.F90:
	  Recipe added.
	* [r8] trunk/src/mesh3D.F90, trunk/src/mesh3D_create.F90:
	  Parameteres added

2002-01-28  cvsusers

	* [r7] trunk/src/mesh3D.F90:
	  Added some parameters to ease the reading of the code

2002-01-28  marques

	* [r6] trunk/src/Makefile, trunk/src/config.h, trunk/src/hamiltonian.F90,
	  trunk/src/hartree.F90, trunk/src/math.F90, trunk/src/mesh3D.F90, trunk/src/mesh3D_inc.F90,
	  trunk/src/run.F90, trunk/src/specie.F90, trunk/src/states.F90, trunk/src/states_inc.F90,
	  trunk/src/systm.F90, trunk/src/xc.F90, trunk/src/xc_GGA.F90, trunk/src/xc_LDA.F90,
	  trunk/src/xc_pot.F90:
	  slowly rewritting the program...
	  now I added hartree+xc+ a couple of things.

2002-01-25  marques

	* [r5] trunk/src/global.F90, trunk/src/hamiltonian.F90, trunk/src/mesh3D.F90,
	  trunk/src/mesh3D_inc.F90:
	  making the code cleaner by adding some sall but helpful subroutines
	* [r4] trunk/src/mesh.F90:
	  renamed this file to mesh3D
	* [r3] trunk/src/Makefile, trunk/src/atom.F90, trunk/src/complex.F90, trunk/src/config.h,
	  trunk/src/fdf.F90, trunk/src/fft.F90, trunk/src/global.F90, trunk/src/hamiltonian.F90,
	  trunk/src/kb.F90, trunk/src/mesh3D.F90, trunk/src/mesh3D_create.F90,
	  trunk/src/mesh3D_inc.F90, trunk/src/ps.F90, trunk/src/ps_kb.F90, trunk/src/ps_xc.F90,
	  trunk/src/real.F90, trunk/src/run.F90, trunk/src/specie.F90, trunk/src/states.F90,
	  trunk/src/systm.F90, trunk/src/undef.F90, trunk/src/units.F90, trunk/src/xc_old.F90:
	  Slowly rewritting the animal

2001-12-04  marques

	* [r2] trunk/src, trunk/src/Makefile, trunk/src/asinh.F90, trunk/src/atom.F90,
	  trunk/src/config.h, trunk/src/fdf.F90, trunk/src/global.F90, trunk/src/kb.F90,
	  trunk/src/main.F90, trunk/src/math.F90, trunk/src/mesh.F90, trunk/src/ps.F90,
	  trunk/src/run.F90, trunk/src/specie.F90, trunk/src/spline.F90, trunk/src/systm.F90,
	  trunk/src/units.F90, trunk/src/xc_old.F90:
	  Very preliminary version of new tddft code
	  now baptized octopus ;))

2001-12-04  

	* [r1] branches, tags, trunk:
	  New repository initialized by cvs2svn.

